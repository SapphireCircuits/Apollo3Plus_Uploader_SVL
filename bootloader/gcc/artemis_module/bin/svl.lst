
../gcc/artemis_module/bin/svl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	f8 ff 0b 10 09 ce 00 00 8d ce 00 00 93 ce 00 00     ................
    c010:	93 ce 00 00 93 ce 00 00 93 ce 00 00 00 00 00 00     ................
	...
    c02c:	99 ce 00 00 99 ce 00 00 00 00 00 00 99 ce 00 00     ................
    c03c:	99 ce 00 00 99 ce 00 00 99 ce 00 00 99 ce 00 00     ................
    c04c:	99 ce 00 00 99 ce 00 00 99 ce 00 00 99 ce 00 00     ................
    c05c:	99 ce 00 00 99 ce 00 00 99 ce 00 00 99 ce 00 00     ................
    c06c:	99 ce 00 00 99 ce 00 00 15 cd 00 00 99 ce 00 00     ................
    c07c:	95 cc 00 00 05 cd 00 00 99 ce 00 00 99 ce 00 00     ................
    c08c:	99 ce 00 00 99 ce 00 00 99 ce 00 00 71 cd 00 00     ............q...
    c09c:	99 ce 00 00 99 ce 00 00 99 ce 00 00 99 ce 00 00     ................
    c0ac:	99 ce 00 00 99 ce 00 00 99 ce 00 00 99 ce 00 00     ................
    c0bc:	99 ce 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_uldivmod>:
    c100:	b953      	cbnz	r3, c118 <__aeabi_uldivmod+0x18>
    c102:	b94a      	cbnz	r2, c118 <__aeabi_uldivmod+0x18>
    c104:	2900      	cmp	r1, #0
    c106:	bf08      	it	eq
    c108:	2800      	cmpeq	r0, #0
    c10a:	bf1c      	itt	ne
    c10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c114:	f000 b974 	b.w	c400 <__aeabi_idiv0>
    c118:	f1ad 0c08 	sub.w	ip, sp, #8
    c11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c120:	f000 f806 	bl	c130 <__udivmoddi4>
    c124:	f8dd e004 	ldr.w	lr, [sp, #4]
    c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c12c:	b004      	add	sp, #16
    c12e:	4770      	bx	lr

0000c130 <__udivmoddi4>:
    c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c134:	9e08      	ldr	r6, [sp, #32]
    c136:	4604      	mov	r4, r0
    c138:	4688      	mov	r8, r1
    c13a:	2b00      	cmp	r3, #0
    c13c:	f040 8085 	bne.w	c24a <__udivmoddi4+0x11a>
    c140:	428a      	cmp	r2, r1
    c142:	4615      	mov	r5, r2
    c144:	d948      	bls.n	c1d8 <__udivmoddi4+0xa8>
    c146:	fab2 f282 	clz	r2, r2
    c14a:	b14a      	cbz	r2, c160 <__udivmoddi4+0x30>
    c14c:	f1c2 0720 	rsb	r7, r2, #32
    c150:	fa01 f302 	lsl.w	r3, r1, r2
    c154:	fa20 f707 	lsr.w	r7, r0, r7
    c158:	4095      	lsls	r5, r2
    c15a:	ea47 0803 	orr.w	r8, r7, r3
    c15e:	4094      	lsls	r4, r2
    c160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c164:	0c23      	lsrs	r3, r4, #16
    c166:	fbb8 f7fe 	udiv	r7, r8, lr
    c16a:	fa1f fc85 	uxth.w	ip, r5
    c16e:	fb0e 8817 	mls	r8, lr, r7, r8
    c172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    c176:	fb07 f10c 	mul.w	r1, r7, ip
    c17a:	4299      	cmp	r1, r3
    c17c:	d909      	bls.n	c192 <__udivmoddi4+0x62>
    c17e:	18eb      	adds	r3, r5, r3
    c180:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    c184:	f080 80e3 	bcs.w	c34e <__udivmoddi4+0x21e>
    c188:	4299      	cmp	r1, r3
    c18a:	f240 80e0 	bls.w	c34e <__udivmoddi4+0x21e>
    c18e:	3f02      	subs	r7, #2
    c190:	442b      	add	r3, r5
    c192:	1a5b      	subs	r3, r3, r1
    c194:	b2a4      	uxth	r4, r4
    c196:	fbb3 f0fe 	udiv	r0, r3, lr
    c19a:	fb0e 3310 	mls	r3, lr, r0, r3
    c19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c1a2:	fb00 fc0c 	mul.w	ip, r0, ip
    c1a6:	45a4      	cmp	ip, r4
    c1a8:	d909      	bls.n	c1be <__udivmoddi4+0x8e>
    c1aa:	192c      	adds	r4, r5, r4
    c1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c1b0:	f080 80cb 	bcs.w	c34a <__udivmoddi4+0x21a>
    c1b4:	45a4      	cmp	ip, r4
    c1b6:	f240 80c8 	bls.w	c34a <__udivmoddi4+0x21a>
    c1ba:	3802      	subs	r0, #2
    c1bc:	442c      	add	r4, r5
    c1be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    c1c2:	eba4 040c 	sub.w	r4, r4, ip
    c1c6:	2700      	movs	r7, #0
    c1c8:	b11e      	cbz	r6, c1d2 <__udivmoddi4+0xa2>
    c1ca:	40d4      	lsrs	r4, r2
    c1cc:	2300      	movs	r3, #0
    c1ce:	e9c6 4300 	strd	r4, r3, [r6]
    c1d2:	4639      	mov	r1, r7
    c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1d8:	2a00      	cmp	r2, #0
    c1da:	d053      	beq.n	c284 <__udivmoddi4+0x154>
    c1dc:	fab2 f282 	clz	r2, r2
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	f040 80b6 	bne.w	c352 <__udivmoddi4+0x222>
    c1e6:	1b49      	subs	r1, r1, r5
    c1e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c1ec:	fa1f f885 	uxth.w	r8, r5
    c1f0:	2701      	movs	r7, #1
    c1f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c1f6:	0c23      	lsrs	r3, r4, #16
    c1f8:	fb0e 111c 	mls	r1, lr, ip, r1
    c1fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c200:	fb08 f10c 	mul.w	r1, r8, ip
    c204:	4299      	cmp	r1, r3
    c206:	d907      	bls.n	c218 <__udivmoddi4+0xe8>
    c208:	18eb      	adds	r3, r5, r3
    c20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c20e:	d202      	bcs.n	c216 <__udivmoddi4+0xe6>
    c210:	4299      	cmp	r1, r3
    c212:	f200 80ec 	bhi.w	c3ee <__udivmoddi4+0x2be>
    c216:	4684      	mov	ip, r0
    c218:	1a59      	subs	r1, r3, r1
    c21a:	b2a3      	uxth	r3, r4
    c21c:	fbb1 f0fe 	udiv	r0, r1, lr
    c220:	fb0e 1410 	mls	r4, lr, r0, r1
    c224:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    c228:	fb08 f800 	mul.w	r8, r8, r0
    c22c:	45a0      	cmp	r8, r4
    c22e:	d907      	bls.n	c240 <__udivmoddi4+0x110>
    c230:	192c      	adds	r4, r5, r4
    c232:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c236:	d202      	bcs.n	c23e <__udivmoddi4+0x10e>
    c238:	45a0      	cmp	r8, r4
    c23a:	f200 80dc 	bhi.w	c3f6 <__udivmoddi4+0x2c6>
    c23e:	4618      	mov	r0, r3
    c240:	eba4 0408 	sub.w	r4, r4, r8
    c244:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c248:	e7be      	b.n	c1c8 <__udivmoddi4+0x98>
    c24a:	428b      	cmp	r3, r1
    c24c:	d908      	bls.n	c260 <__udivmoddi4+0x130>
    c24e:	2e00      	cmp	r6, #0
    c250:	d078      	beq.n	c344 <__udivmoddi4+0x214>
    c252:	2700      	movs	r7, #0
    c254:	e9c6 0100 	strd	r0, r1, [r6]
    c258:	4638      	mov	r0, r7
    c25a:	4639      	mov	r1, r7
    c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c260:	fab3 f783 	clz	r7, r3
    c264:	b97f      	cbnz	r7, c286 <__udivmoddi4+0x156>
    c266:	428b      	cmp	r3, r1
    c268:	d302      	bcc.n	c270 <__udivmoddi4+0x140>
    c26a:	4282      	cmp	r2, r0
    c26c:	f200 80bd 	bhi.w	c3ea <__udivmoddi4+0x2ba>
    c270:	1a84      	subs	r4, r0, r2
    c272:	eb61 0303 	sbc.w	r3, r1, r3
    c276:	2001      	movs	r0, #1
    c278:	4698      	mov	r8, r3
    c27a:	2e00      	cmp	r6, #0
    c27c:	d0a9      	beq.n	c1d2 <__udivmoddi4+0xa2>
    c27e:	e9c6 4800 	strd	r4, r8, [r6]
    c282:	e7a6      	b.n	c1d2 <__udivmoddi4+0xa2>
    c284:	deff      	udf	#255	; 0xff
    c286:	f1c7 0520 	rsb	r5, r7, #32
    c28a:	40bb      	lsls	r3, r7
    c28c:	fa22 fc05 	lsr.w	ip, r2, r5
    c290:	ea4c 0c03 	orr.w	ip, ip, r3
    c294:	fa01 f407 	lsl.w	r4, r1, r7
    c298:	fa20 f805 	lsr.w	r8, r0, r5
    c29c:	fa21 f305 	lsr.w	r3, r1, r5
    c2a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    c2a4:	ea48 0404 	orr.w	r4, r8, r4
    c2a8:	fbb3 f9fe 	udiv	r9, r3, lr
    c2ac:	0c21      	lsrs	r1, r4, #16
    c2ae:	fb0e 3319 	mls	r3, lr, r9, r3
    c2b2:	fa1f f88c 	uxth.w	r8, ip
    c2b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    c2ba:	fb09 fa08 	mul.w	sl, r9, r8
    c2be:	459a      	cmp	sl, r3
    c2c0:	fa02 f207 	lsl.w	r2, r2, r7
    c2c4:	fa00 f107 	lsl.w	r1, r0, r7
    c2c8:	d90b      	bls.n	c2e2 <__udivmoddi4+0x1b2>
    c2ca:	eb1c 0303 	adds.w	r3, ip, r3
    c2ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c2d2:	f080 8088 	bcs.w	c3e6 <__udivmoddi4+0x2b6>
    c2d6:	459a      	cmp	sl, r3
    c2d8:	f240 8085 	bls.w	c3e6 <__udivmoddi4+0x2b6>
    c2dc:	f1a9 0902 	sub.w	r9, r9, #2
    c2e0:	4463      	add	r3, ip
    c2e2:	eba3 030a 	sub.w	r3, r3, sl
    c2e6:	b2a4      	uxth	r4, r4
    c2e8:	fbb3 f0fe 	udiv	r0, r3, lr
    c2ec:	fb0e 3310 	mls	r3, lr, r0, r3
    c2f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c2f4:	fb00 f808 	mul.w	r8, r0, r8
    c2f8:	45a0      	cmp	r8, r4
    c2fa:	d908      	bls.n	c30e <__udivmoddi4+0x1de>
    c2fc:	eb1c 0404 	adds.w	r4, ip, r4
    c300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c304:	d26b      	bcs.n	c3de <__udivmoddi4+0x2ae>
    c306:	45a0      	cmp	r8, r4
    c308:	d969      	bls.n	c3de <__udivmoddi4+0x2ae>
    c30a:	3802      	subs	r0, #2
    c30c:	4464      	add	r4, ip
    c30e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    c312:	eba4 0408 	sub.w	r4, r4, r8
    c316:	fba0 8902 	umull	r8, r9, r0, r2
    c31a:	454c      	cmp	r4, r9
    c31c:	46c6      	mov	lr, r8
    c31e:	464b      	mov	r3, r9
    c320:	d354      	bcc.n	c3cc <__udivmoddi4+0x29c>
    c322:	d051      	beq.n	c3c8 <__udivmoddi4+0x298>
    c324:	2e00      	cmp	r6, #0
    c326:	d069      	beq.n	c3fc <__udivmoddi4+0x2cc>
    c328:	ebb1 020e 	subs.w	r2, r1, lr
    c32c:	eb64 0403 	sbc.w	r4, r4, r3
    c330:	fa04 f505 	lsl.w	r5, r4, r5
    c334:	fa22 f307 	lsr.w	r3, r2, r7
    c338:	40fc      	lsrs	r4, r7
    c33a:	431d      	orrs	r5, r3
    c33c:	e9c6 5400 	strd	r5, r4, [r6]
    c340:	2700      	movs	r7, #0
    c342:	e746      	b.n	c1d2 <__udivmoddi4+0xa2>
    c344:	4637      	mov	r7, r6
    c346:	4630      	mov	r0, r6
    c348:	e743      	b.n	c1d2 <__udivmoddi4+0xa2>
    c34a:	4618      	mov	r0, r3
    c34c:	e737      	b.n	c1be <__udivmoddi4+0x8e>
    c34e:	4607      	mov	r7, r0
    c350:	e71f      	b.n	c192 <__udivmoddi4+0x62>
    c352:	f1c2 0320 	rsb	r3, r2, #32
    c356:	fa20 f703 	lsr.w	r7, r0, r3
    c35a:	4095      	lsls	r5, r2
    c35c:	fa01 f002 	lsl.w	r0, r1, r2
    c360:	fa21 f303 	lsr.w	r3, r1, r3
    c364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c368:	4338      	orrs	r0, r7
    c36a:	0c01      	lsrs	r1, r0, #16
    c36c:	fbb3 f7fe 	udiv	r7, r3, lr
    c370:	fa1f f885 	uxth.w	r8, r5
    c374:	fb0e 3317 	mls	r3, lr, r7, r3
    c378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c37c:	fb07 f308 	mul.w	r3, r7, r8
    c380:	428b      	cmp	r3, r1
    c382:	fa04 f402 	lsl.w	r4, r4, r2
    c386:	d907      	bls.n	c398 <__udivmoddi4+0x268>
    c388:	1869      	adds	r1, r5, r1
    c38a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    c38e:	d228      	bcs.n	c3e2 <__udivmoddi4+0x2b2>
    c390:	428b      	cmp	r3, r1
    c392:	d926      	bls.n	c3e2 <__udivmoddi4+0x2b2>
    c394:	3f02      	subs	r7, #2
    c396:	4429      	add	r1, r5
    c398:	1acb      	subs	r3, r1, r3
    c39a:	b281      	uxth	r1, r0
    c39c:	fbb3 f0fe 	udiv	r0, r3, lr
    c3a0:	fb0e 3310 	mls	r3, lr, r0, r3
    c3a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c3a8:	fb00 f308 	mul.w	r3, r0, r8
    c3ac:	428b      	cmp	r3, r1
    c3ae:	d907      	bls.n	c3c0 <__udivmoddi4+0x290>
    c3b0:	1869      	adds	r1, r5, r1
    c3b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    c3b6:	d210      	bcs.n	c3da <__udivmoddi4+0x2aa>
    c3b8:	428b      	cmp	r3, r1
    c3ba:	d90e      	bls.n	c3da <__udivmoddi4+0x2aa>
    c3bc:	3802      	subs	r0, #2
    c3be:	4429      	add	r1, r5
    c3c0:	1ac9      	subs	r1, r1, r3
    c3c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c3c6:	e714      	b.n	c1f2 <__udivmoddi4+0xc2>
    c3c8:	4541      	cmp	r1, r8
    c3ca:	d2ab      	bcs.n	c324 <__udivmoddi4+0x1f4>
    c3cc:	ebb8 0e02 	subs.w	lr, r8, r2
    c3d0:	eb69 020c 	sbc.w	r2, r9, ip
    c3d4:	3801      	subs	r0, #1
    c3d6:	4613      	mov	r3, r2
    c3d8:	e7a4      	b.n	c324 <__udivmoddi4+0x1f4>
    c3da:	4660      	mov	r0, ip
    c3dc:	e7f0      	b.n	c3c0 <__udivmoddi4+0x290>
    c3de:	4618      	mov	r0, r3
    c3e0:	e795      	b.n	c30e <__udivmoddi4+0x1de>
    c3e2:	4667      	mov	r7, ip
    c3e4:	e7d8      	b.n	c398 <__udivmoddi4+0x268>
    c3e6:	4681      	mov	r9, r0
    c3e8:	e77b      	b.n	c2e2 <__udivmoddi4+0x1b2>
    c3ea:	4638      	mov	r0, r7
    c3ec:	e745      	b.n	c27a <__udivmoddi4+0x14a>
    c3ee:	f1ac 0c02 	sub.w	ip, ip, #2
    c3f2:	442b      	add	r3, r5
    c3f4:	e710      	b.n	c218 <__udivmoddi4+0xe8>
    c3f6:	3802      	subs	r0, #2
    c3f8:	442c      	add	r4, r5
    c3fa:	e721      	b.n	c240 <__udivmoddi4+0x110>
    c3fc:	4637      	mov	r7, r6
    c3fe:	e6e8      	b.n	c1d2 <__udivmoddi4+0xa2>

0000c400 <__aeabi_idiv0>:
    c400:	4770      	bx	lr
    c402:	bf00      	nop

0000c404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c404:	b480      	push	{r7}
    c406:	b083      	sub	sp, #12
    c408:	af00      	add	r7, sp, #0
    c40a:	4603      	mov	r3, r0
    c40c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c412:	2b00      	cmp	r3, #0
    c414:	db0b      	blt.n	c42e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c416:	79fb      	ldrb	r3, [r7, #7]
    c418:	f003 021f 	and.w	r2, r3, #31
    c41c:	4907      	ldr	r1, [pc, #28]	; (c43c <__NVIC_EnableIRQ+0x38>)
    c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c422:	095b      	lsrs	r3, r3, #5
    c424:	2001      	movs	r0, #1
    c426:	fa00 f202 	lsl.w	r2, r0, r2
    c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c42e:	bf00      	nop
    c430:	370c      	adds	r7, #12
    c432:	46bd      	mov	sp, r7
    c434:	f85d 7b04 	ldr.w	r7, [sp], #4
    c438:	4770      	bx	lr
    c43a:	bf00      	nop
    c43c:	e000e100 	.word	0xe000e100

0000c440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c440:	b480      	push	{r7}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c44e:	2b00      	cmp	r3, #0
    c450:	db10      	blt.n	c474 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c452:	79fb      	ldrb	r3, [r7, #7]
    c454:	f003 021f 	and.w	r2, r3, #31
    c458:	4909      	ldr	r1, [pc, #36]	; (c480 <__NVIC_DisableIRQ+0x40>)
    c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c45e:	095b      	lsrs	r3, r3, #5
    c460:	2001      	movs	r0, #1
    c462:	fa00 f202 	lsl.w	r2, r0, r2
    c466:	3320      	adds	r3, #32
    c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c46c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c470:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c474:	bf00      	nop
    c476:	370c      	adds	r7, #12
    c478:	46bd      	mov	sp, r7
    c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c47e:	4770      	bx	lr
    c480:	e000e100 	.word	0xe000e100

0000c484 <AM_HAL_GPIO_MASKBIT>:
// Since the ptr is required as a return value, a macro does not work.
// Therefore an inline function is used.
//
static inline am_hal_gpio_mask_t*
AM_HAL_GPIO_MASKBIT(am_hal_gpio_mask_t*psMaskNm, uint32_t n)
{
    c484:	b480      	push	{r7}
    c486:	b083      	sub	sp, #12
    c488:	af00      	add	r7, sp, #0
    c48a:	6078      	str	r0, [r7, #4]
    c48c:	6039      	str	r1, [r7, #0]
    psMaskNm->U.Msk[n / 32] = (1 << (n % 32));
    c48e:	683b      	ldr	r3, [r7, #0]
    c490:	f003 031f 	and.w	r3, r3, #31
    c494:	2201      	movs	r2, #1
    c496:	fa02 f103 	lsl.w	r1, r2, r3
    c49a:	683b      	ldr	r3, [r7, #0]
    c49c:	095a      	lsrs	r2, r3, #5
    c49e:	687b      	ldr	r3, [r7, #4]
    c4a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return psMaskNm;
    c4a4:	687b      	ldr	r3, [r7, #4]
}
    c4a6:	4618      	mov	r0, r3
    c4a8:	370c      	adds	r7, #12
    c4aa:	46bd      	mov	sp, r7
    c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b0:	4770      	bx	lr
	...

0000c4b4 <main>:
//
// Main
//
//*****************************************************************************
int main(void)
{
    c4b4:	b580      	push	{r7, lr}
    c4b6:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
    c4ba:	af00      	add	r7, sp, #0

    bool baud_valid = false;
    c4bc:	2300      	movs	r3, #0
    c4be:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    uint32_t bl_baud = 0x00;
    c4c2:	2300      	movs	r3, #0
    c4c4:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
    uint8_t bl_buffer[BL_UART_BUF_LEN] = {0};
    c4c8:	f107 0320 	add.w	r3, r7, #32
    c4cc:	4618      	mov	r0, r3
    c4ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    c4d2:	461a      	mov	r2, r3
    c4d4:	2100      	movs	r1, #0
    c4d6:	f001 f977 	bl	d7c8 <memset>

#define PLLEN_VER 1
    uint8_t packet_ver_buf[PLLEN_VER] = {SVL_VERSION_NUMBER};
    c4da:	f107 031c 	add.w	r3, r7, #28
    c4de:	2207      	movs	r2, #7
    c4e0:	701a      	strb	r2, [r3, #0]
    svl_packet_t svl_packet_version = {CMD_VERSION, packet_ver_buf, PLLEN_VER, PLLEN_VER};
    c4e2:	f107 0310 	add.w	r3, r7, #16
    c4e6:	2201      	movs	r2, #1
    c4e8:	701a      	strb	r2, [r3, #0]
    c4ea:	f107 0310 	add.w	r3, r7, #16
    c4ee:	f107 021c 	add.w	r2, r7, #28
    c4f2:	605a      	str	r2, [r3, #4]
    c4f4:	f107 0310 	add.w	r3, r7, #16
    c4f8:	2201      	movs	r2, #1
    c4fa:	811a      	strh	r2, [r3, #8]
    c4fc:	f107 0310 	add.w	r3, r7, #16
    c500:	2201      	movs	r2, #1
    c502:	815a      	strh	r2, [r3, #10]
    svl_packet_t svl_packet_blmode = {CMD_BLMODE, NULL, 0, 0};
    c504:	1d3b      	adds	r3, r7, #4
    c506:	2202      	movs	r2, #2
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	1d3b      	adds	r3, r7, #4
    c50c:	2200      	movs	r2, #0
    c50e:	605a      	str	r2, [r3, #4]
    c510:	1d3b      	adds	r3, r7, #4
    c512:	2200      	movs	r2, #0
    c514:	811a      	strh	r2, [r3, #8]
    c516:	1d3b      	adds	r3, r7, #4
    c518:	2200      	movs	r2, #0
    c51a:	815a      	strh	r2, [r3, #10]

    art_svl_ringbuf_init(&bl_rx_ringbuf, bl_buffer, BL_UART_BUF_LEN);
    c51c:	f107 0320 	add.w	r3, r7, #32
    c520:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    c524:	4619      	mov	r1, r3
    c526:	4827      	ldr	r0, [pc, #156]	; (c5c4 <main+0x110>)
    c528:	f000 ff56 	bl	d3d8 <art_svl_ringbuf_init>
    setup();
    c52c:	f000 f85a 	bl	c5e4 <setup>

    debug_printf("\n\nArtemis SVL Bootloader - DEBUG\n\n");
    c530:	4825      	ldr	r0, [pc, #148]	; (c5c8 <main+0x114>)
    c532:	f000 fba5 	bl	cc80 <debug_printf>

    baud_valid = detect_baud_rate(&bl_baud); // Detects the baud rate. Returns true if a valid baud rate was found
    c536:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
    c53a:	4618      	mov	r0, r3
    c53c:	f000 f888 	bl	c650 <detect_baud_rate>
    c540:	4603      	mov	r3, r0
    c542:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    if (baud_valid == false)
    c546:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
    c54a:	f083 0301 	eor.w	r3, r3, #1
    c54e:	b2db      	uxtb	r3, r3
    c550:	2b00      	cmp	r3, #0
    c552:	d001      	beq.n	c558 <main+0xa4>
    {
        app_start(); // w/o valid baud rate jump t the app
    c554:	f000 fb7c 	bl	cc50 <app_start>
    }

    start_uart_bl(bl_baud); // This will create a 23 us wide low 'blip' on the TX line (until possibly fixed)
    c558:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
    c55c:	4618      	mov	r0, r3
    c55e:	f000 f9df 	bl	c920 <start_uart_bl>
    am_util_delay_us(200);  // At the minimum baud rate of 115200 one byte (10 bits with start/stop) takes 10/115200 or 87 us. 87+23 = 100, double to be safe
    c562:	20c8      	movs	r0, #200	; 0xc8
    c564:	f000 fc32 	bl	cdcc <am_util_delay_us>

    debug_printf("phase:\tconfirm bootloading entry\n");
    c568:	4818      	ldr	r0, [pc, #96]	; (c5cc <main+0x118>)
    c56a:	f000 fb89 	bl	cc80 <debug_printf>
    debug_printf("\tsending Artemis SVL version packet\n");
    c56e:	4818      	ldr	r0, [pc, #96]	; (c5d0 <main+0x11c>)
    c570:	f000 fb86 	bl	cc80 <debug_printf>
    svl_packet_send(&svl_packet_version); // when baud rate is determined send the version packet
    c574:	f107 0310 	add.w	r3, r7, #16
    c578:	4618      	mov	r0, r3
    c57a:	f000 fce3 	bl	cf44 <svl_packet_send>

    debug_printf("\twaiting for bootloader confirmation\n");
    c57e:	4815      	ldr	r0, [pc, #84]	; (c5d4 <main+0x120>)
    c580:	f000 fb7e 	bl	cc80 <debug_printf>
    if (svl_packet_wait(&svl_packet_blmode) != 0)
    c584:	1d3b      	adds	r3, r7, #4
    c586:	4618      	mov	r0, r3
    c588:	f000 fdd0 	bl	d12c <svl_packet_wait>
    c58c:	4603      	mov	r3, r0
    c58e:	2b00      	cmp	r3, #0
    c590:	d004      	beq.n	c59c <main+0xe8>
    { // wait for the bootloader to confirm bootloader mode entry
        debug_printf("\tno confirmation received\n");
    c592:	4811      	ldr	r0, [pc, #68]	; (c5d8 <main+0x124>)
    c594:	f000 fb74 	bl	cc80 <debug_printf>
        app_start(); // break to app
    c598:	f000 fb5a 	bl	cc50 <app_start>
    }
    debug_printf("\tentering bootloader\n\n");
    c59c:	480f      	ldr	r0, [pc, #60]	; (c5dc <main+0x128>)
    c59e:	f000 fb6f 	bl	cc80 <debug_printf>

    enter_bootload(); // Now we are locked in
    c5a2:	f000 fa27 	bl	c9f4 <enter_bootload>
    am_util_delay_ms(10);
    c5a6:	200a      	movs	r0, #10
    c5a8:	f000 fbf2 	bl	cd90 <am_util_delay_ms>

    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0); //Cause a system Power On Init to release as much of the stack as possible
    c5ac:	2100      	movs	r1, #0
    c5ae:	2001      	movs	r0, #1
    c5b0:	f001 fdc4 	bl	e13c <am_hal_reset_control>

    debug_printf("ERROR - runoff");
    c5b4:	480a      	ldr	r0, [pc, #40]	; (c5e0 <main+0x12c>)
    c5b6:	f000 fb63 	bl	cc80 <debug_printf>
    while (1)
    {                                                    // Loop forever while sleeping.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP); // Go to Deep Sleep.
    c5ba:	2001      	movs	r0, #1
    c5bc:	f001 fe08 	bl	e1d0 <am_hal_sysctrl_sleep>
    c5c0:	e7fb      	b.n	c5ba <main+0x106>
    c5c2:	bf00      	nop
    c5c4:	10000210 	.word	0x10000210
    c5c8:	0000ec6c 	.word	0x0000ec6c
    c5cc:	0000ec90 	.word	0x0000ec90
    c5d0:	0000ecb4 	.word	0x0000ecb4
    c5d4:	0000ecdc 	.word	0x0000ecdc
    c5d8:	0000ed04 	.word	0x0000ed04
    c5dc:	0000ed20 	.word	0x0000ed20
    c5e0:	0000ed38 	.word	0x0000ed38

0000c5e4 <setup>:
//
// Setup
//
//*****************************************************************************
void setup(void)
{
    c5e4:	b580      	push	{r7, lr}
    c5e6:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5e8:	2100      	movs	r1, #0
    c5ea:	2000      	movs	r0, #0
    c5ec:	f001 fa08 	bl	da00 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c5f0:	480b      	ldr	r0, [pc, #44]	; (c620 <setup+0x3c>)
    c5f2:	f001 f9d7 	bl	d9a4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c5f6:	f001 f9f9 	bl	d9ec <am_hal_cachectrl_enable>

    // Configure the stimer
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
    c5fa:	f44f 7080 	mov.w	r0, #256	; 0x100
    c5fe:	f001 fdcd 	bl	e19c <am_hal_stimer_int_enable>
    NVIC_EnableIRQ(STIMER_IRQn);
    c602:	2016      	movs	r0, #22
    c604:	f7ff fefe 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c608:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c60c:	f001 fdb6 	bl	e17c <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
    c610:	2001      	movs	r0, #1
    c612:	f001 fdb3 	bl	e17c <am_hal_stimer_config>
#ifdef DEBUG
    start_uart_debug();
#endif

    // Enable interrupts.
    am_hal_interrupt_master_enable();
    c616:	f001 fd07 	bl	e028 <am_hal_interrupt_master_enable>
}
    c61a:	bf00      	nop
    c61c:	bd80      	pop	{r7, pc}
    c61e:	bf00      	nop
    c620:	0000ef70 	.word	0x0000ef70

0000c624 <unsetup>:
//
// Un-set-up
//
//*****************************************************************************
void unsetup(void)
{
    c624:	b580      	push	{r7, lr}
    c626:	af00      	add	r7, sp, #0
    disable_burst_mode();
    c628:	f001 f854 	bl	d6d4 <disable_burst_mode>

    // Deconfigure the stimer
    am_hal_stimer_int_disable(AM_HAL_STIMER_INT_OVERFLOW);
    c62c:	f44f 7080 	mov.w	r0, #256	; 0x100
    c630:	f001 fdbe 	bl	e1b0 <am_hal_stimer_int_disable>
    NVIC_DisableIRQ(STIMER_IRQn);
    c634:	2016      	movs	r0, #22
    c636:	f7ff ff03 	bl	c440 <__NVIC_DisableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c63a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c63e:	f001 fd9d 	bl	e17c <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_NO_CLK);
    c642:	2000      	movs	r0, #0
    c644:	f001 fd9a 	bl	e17c <am_hal_stimer_config>
#ifdef DEBUG
    stop_uart_debug();
#endif

    // Disable interrupts.
    am_hal_interrupt_master_disable();
    c648:	f001 fcf2 	bl	e030 <am_hal_interrupt_master_disable>
}
    c64c:	bf00      	nop
    c64e:	bd80      	pop	{r7, pc}

0000c650 <detect_baud_rate>:
//
// Baud Rate Detect Phase
//
// ****************************************
bool detect_baud_rate(uint32_t *baud)
{
    c650:	b580      	push	{r7, lr}
    c652:	b08c      	sub	sp, #48	; 0x30
    c654:	af00      	add	r7, sp, #0
    c656:	6078      	str	r0, [r7, #4]
    uint32_t bl_entry_timeout_ms = 200;
    c658:	23c8      	movs	r3, #200	; 0xc8
    c65a:	623b      	str	r3, [r7, #32]
    uint32_t bl_entry_timeout_start = millis();
    c65c:	f001 f80c 	bl	d678 <millis>
    c660:	61f8      	str	r0, [r7, #28]
    bool baud_is_valid = false;
    c662:	2300      	movs	r3, #0
    c664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool timed_out = true;
    c668:	2301      	movs	r3, #1
    c66a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    debug_printf("phase:\tdetect baud rate\n");
    c66e:	48a2      	ldr	r0, [pc, #648]	; (c8f8 <detect_baud_rate+0x2a8>)
    c670:	f000 fb06 	bl	cc80 <debug_printf>

    enable_burst_mode();
    c674:	f001 f814 	bl	d6a0 <enable_burst_mode>

    am_hal_gpio_pinconfig(BL_RX_PAD, g_AM_HAL_GPIO_INPUT_PULLUP);
    c678:	4ba0      	ldr	r3, [pc, #640]	; (c8fc <detect_baud_rate+0x2ac>)
    c67a:	6819      	ldr	r1, [r3, #0]
    c67c:	2031      	movs	r0, #49	; 0x31
    c67e:	f001 fafb 	bl	dc78 <am_hal_gpio_pinconfig>
    AM_HAL_GPIO_MASKCREATE(BL_RX_PAD_Mask);
    c682:	f107 030c 	add.w	r3, r7, #12
    c686:	61bb      	str	r3, [r7, #24]
    c688:	2300      	movs	r3, #0
    c68a:	617b      	str	r3, [r7, #20]
    c68c:	613b      	str	r3, [r7, #16]
    c68e:	60fb      	str	r3, [r7, #12]
    ap3_gpio_enable_interrupts(BL_RX_PAD, AM_HAL_GPIO_PIN_INTDIR_LO2HI);
    c690:	2100      	movs	r1, #0
    c692:	2031      	movs	r0, #49	; 0x31
    c694:	f001 f834 	bl	d700 <ap3_gpio_enable_interrupts>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c698:	2131      	movs	r1, #49	; 0x31
    c69a:	69b8      	ldr	r0, [r7, #24]
    c69c:	f7ff fef2 	bl	c484 <AM_HAL_GPIO_MASKBIT>
    c6a0:	4603      	mov	r3, r0
    c6a2:	4618      	mov	r0, r3
    c6a4:	f001 fc90 	bl	dfc8 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c6a8:	2131      	movs	r1, #49	; 0x31
    c6aa:	69b8      	ldr	r0, [r7, #24]
    c6ac:	f7ff feea 	bl	c484 <AM_HAL_GPIO_MASKBIT>
    c6b0:	4603      	mov	r3, r0
    c6b2:	4618      	mov	r0, r3
    c6b4:	f001 fc28 	bl	df08 <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c6b8:	200d      	movs	r0, #13
    c6ba:	f7ff fea3 	bl	c404 <__NVIC_EnableIRQ>

    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c6be:	e0dd      	b.n	c87c <detect_baud_rate+0x22c>
    {
        // try to detect baud rate

        // debug_printf("\ttime (ms):\t%d\n", millis());

        if (bl_baud_ticks_index == BL_BAUD_SAMPLES)
    c6c0:	4b8f      	ldr	r3, [pc, #572]	; (c900 <detect_baud_rate+0x2b0>)
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	b2db      	uxtb	r3, r3
    c6c6:	2b05      	cmp	r3, #5
    c6c8:	f040 80d8 	bne.w	c87c <detect_baud_rate+0x22c>
        {

            // compute differences between samples
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6cc:	2300      	movs	r3, #0
    c6ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    c6d2:	e015      	b.n	c700 <detect_baud_rate+0xb0>
            {
                bl_baud_ticks[indi] = bl_baud_ticks[indi + 1] - bl_baud_ticks[indi];
    c6d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6d8:	3301      	adds	r3, #1
    c6da:	4a8a      	ldr	r2, [pc, #552]	; (c904 <detect_baud_rate+0x2b4>)
    c6dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c6e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6e4:	4a87      	ldr	r2, [pc, #540]	; (c904 <detect_baud_rate+0x2b4>)
    c6e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c6ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6ee:	1a8a      	subs	r2, r1, r2
    c6f0:	4984      	ldr	r1, [pc, #528]	; (c904 <detect_baud_rate+0x2b4>)
    c6f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6fa:	3301      	adds	r3, #1
    c6fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    c700:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c704:	2b03      	cmp	r3, #3
    c706:	d9e5      	bls.n	c6d4 <detect_baud_rate+0x84>
            }

            float mean = 0.0;
    c708:	f04f 0300 	mov.w	r3, #0
    c70c:	62bb      	str	r3, [r7, #40]	; 0x28
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c70e:	2300      	movs	r3, #0
    c710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c714:	e013      	b.n	c73e <detect_baud_rate+0xee>
            {
                mean += bl_baud_ticks[indi];
    c716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c71a:	4a7a      	ldr	r2, [pc, #488]	; (c904 <detect_baud_rate+0x2b4>)
    c71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c720:	ee07 3a90 	vmov	s15, r3
    c724:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c728:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    c72c:	ee77 7a27 	vadd.f32	s15, s14, s15
    c730:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c738:	3301      	adds	r3, #1
    c73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c742:	2b03      	cmp	r3, #3
    c744:	d9e7      	bls.n	c716 <detect_baud_rate+0xc6>
            }
            mean /= (BL_BAUD_SAMPLES - 1);
    c746:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    c74a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    c74e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c752:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            if (mean < 3)
    c756:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c75a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c75e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c766:	f100 8081 	bmi.w	c86c <detect_baud_rate+0x21c>
            {
                // invalid
            }
            else if ((mean >= 4) && (mean <= 8))
    c76a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c76e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    c772:	eef4 7ac7 	vcmpe.f32	s15, s14
    c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c77a:	db10      	blt.n	c79e <detect_baud_rate+0x14e>
    c77c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c780:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    c784:	eef4 7ac7 	vcmpe.f32	s15, s14
    c788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c78c:	d807      	bhi.n	c79e <detect_baud_rate+0x14e>
            {
                *baud = 921600;
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    c794:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c796:	2301      	movs	r3, #1
    c798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c79c:	e066      	b.n	c86c <detect_baud_rate+0x21c>
            }
            else if ((mean >= 10) && (mean <= 14))
    c79e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c7a6:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7ae:	db10      	blt.n	c7d2 <detect_baud_rate+0x182>
    c7b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7b4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    c7b8:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7c0:	d807      	bhi.n	c7d2 <detect_baud_rate+0x182>
            {
                *baud = 460800;
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
    c7c8:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7ca:	2301      	movs	r3, #1
    c7cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c7d0:	e04c      	b.n	c86c <detect_baud_rate+0x21c>
            }
            else if ((mean >= 25) && (mean <= 30))
    c7d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7d6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    c7da:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7e2:	db10      	blt.n	c806 <detect_baud_rate+0x1b6>
    c7e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7e8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    c7ec:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7f4:	d807      	bhi.n	c806 <detect_baud_rate+0x1b6>
            {
                *baud = 230400;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
    c7fc:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7fe:	2301      	movs	r3, #1
    c800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c804:	e032      	b.n	c86c <detect_baud_rate+0x21c>
            }
            else if ((mean >= 45) && (mean <= 55))
    c806:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c80a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; c908 <detect_baud_rate+0x2b8>
    c80e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c816:	db10      	blt.n	c83a <detect_baud_rate+0x1ea>
    c818:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c81c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; c90c <detect_baud_rate+0x2bc>
    c820:	eef4 7ac7 	vcmpe.f32	s15, s14
    c824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c828:	d807      	bhi.n	c83a <detect_baud_rate+0x1ea>
            {
                *baud = 115200;
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    c830:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c832:	2301      	movs	r3, #1
    c834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c838:	e018      	b.n	c86c <detect_baud_rate+0x21c>
            }
            else if ((mean >= 91) && (mean <= 111))
    c83a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c83e:	ed9f 7a34 	vldr	s14, [pc, #208]	; c910 <detect_baud_rate+0x2c0>
    c842:	eef4 7ac7 	vcmpe.f32	s15, s14
    c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c84a:	db0f      	blt.n	c86c <detect_baud_rate+0x21c>
    c84c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c850:	ed9f 7a30 	vldr	s14, [pc, #192]	; c914 <detect_baud_rate+0x2c4>
    c854:	eef4 7ac7 	vcmpe.f32	s15, s14
    c858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c85c:	d806      	bhi.n	c86c <detect_baud_rate+0x21c>
            {
                *baud = 57600;
    c85e:	687b      	ldr	r3, [r7, #4]
    c860:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    c864:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c866:	2301      	movs	r3, #1
    c868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
            {
                // invalid
            }

            if (baud_is_valid)
    c86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    c870:	2b00      	cmp	r3, #0
    c872:	d00d      	beq.n	c890 <detect_baud_rate+0x240>
            {
                timed_out = false;
    c874:	2300      	movs	r3, #0
    c876:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }

            break; // exit the timeout loop
    c87a:	e009      	b.n	c890 <detect_baud_rate+0x240>
    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c87c:	f000 fefc 	bl	d678 <millis>
    c880:	4602      	mov	r2, r0
    c882:	69fb      	ldr	r3, [r7, #28]
    c884:	1ad3      	subs	r3, r2, r3
    c886:	6a3a      	ldr	r2, [r7, #32]
    c888:	429a      	cmp	r2, r3
    c88a:	f63f af19 	bhi.w	c6c0 <detect_baud_rate+0x70>
    c88e:	e000      	b.n	c892 <detect_baud_rate+0x242>
            break; // exit the timeout loop
    c890:	bf00      	nop
        }
    }

    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c892:	2131      	movs	r1, #49	; 0x31
    c894:	69b8      	ldr	r0, [r7, #24]
    c896:	f7ff fdf5 	bl	c484 <AM_HAL_GPIO_MASKBIT>
    c89a:	4603      	mov	r3, r0
    c89c:	4618      	mov	r0, r3
    c89e:	f001 fb5f 	bl	df60 <am_hal_gpio_interrupt_disable>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c8a2:	2131      	movs	r1, #49	; 0x31
    c8a4:	69b8      	ldr	r0, [r7, #24]
    c8a6:	f7ff fded 	bl	c484 <AM_HAL_GPIO_MASKBIT>
    c8aa:	4603      	mov	r3, r0
    c8ac:	4618      	mov	r0, r3
    c8ae:	f001 fb8b 	bl	dfc8 <am_hal_gpio_interrupt_clear>
    NVIC_DisableIRQ(GPIO_IRQn);
    c8b2:	200d      	movs	r0, #13
    c8b4:	f7ff fdc4 	bl	c440 <__NVIC_DisableIRQ>

    disable_burst_mode();
    c8b8:	f000 ff0c 	bl	d6d4 <disable_burst_mode>
        }
    }
    debug_printf("}\n");
#endif // DEBUG

    if (!baud_is_valid)
    c8bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    c8c0:	f083 0301 	eor.w	r3, r3, #1
    c8c4:	b2db      	uxtb	r3, r3
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d00a      	beq.n	c8e0 <detect_baud_rate+0x290>
    {
        debug_printf("\tbaud rate not detected.\n\t\trising edges:\t%d\n\t\ttimed out:\t%d\n\n", bl_baud_ticks_index, timed_out);
    c8ca:	4b0d      	ldr	r3, [pc, #52]	; (c900 <detect_baud_rate+0x2b0>)
    c8cc:	781b      	ldrb	r3, [r3, #0]
    c8ce:	b2db      	uxtb	r3, r3
    c8d0:	4619      	mov	r1, r3
    c8d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    c8d6:	461a      	mov	r2, r3
    c8d8:	480f      	ldr	r0, [pc, #60]	; (c918 <detect_baud_rate+0x2c8>)
    c8da:	f000 f9d1 	bl	cc80 <debug_printf>
    c8de:	e005      	b.n	c8ec <detect_baud_rate+0x29c>
    }
    else
    {
        debug_printf("\tdetected valid baud rate:\t%d\n\n", *baud);
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	4619      	mov	r1, r3
    c8e6:	480d      	ldr	r0, [pc, #52]	; (c91c <detect_baud_rate+0x2cc>)
    c8e8:	f000 f9ca 	bl	cc80 <debug_printf>
    }

    return baud_is_valid;
    c8ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
    c8f0:	4618      	mov	r0, r3
    c8f2:	3730      	adds	r7, #48	; 0x30
    c8f4:	46bd      	mov	sp, r7
    c8f6:	bd80      	pop	{r7, pc}
    c8f8:	0000ed48 	.word	0x0000ed48
    c8fc:	0000ef78 	.word	0x0000ef78
    c900:	10000224 	.word	0x10000224
    c904:	10000228 	.word	0x10000228
    c908:	42340000 	.word	0x42340000
    c90c:	425c0000 	.word	0x425c0000
    c910:	42b60000 	.word	0x42b60000
    c914:	42de0000 	.word	0x42de0000
    c918:	0000ed64 	.word	0x0000ed64
    c91c:	0000eda4 	.word	0x0000eda4

0000c920 <start_uart_bl>:
//
// Start BL UART at desired baud
//
//*****************************************************************************
void start_uart_bl(uint32_t baud)
{
    c920:	b580      	push	{r7, lr}
    c922:	b08e      	sub	sp, #56	; 0x38
    c924:	af00      	add	r7, sp, #0
    c926:	6078      	str	r0, [r7, #4]
    const am_hal_gpio_pincfg_t bl_uart_tx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, TX, BL_TX_PAD);
    c928:	2300      	movs	r3, #0
    c92a:	637b      	str	r3, [r7, #52]	; 0x34
    const am_hal_gpio_pincfg_t bl_uart_rx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, RX, BL_RX_PAD);
    c92c:	2300      	movs	r3, #0
    c92e:	633b      	str	r3, [r7, #48]	; 0x30
    am_hal_uart_config_t bl_uart_config =
    c930:	687b      	ldr	r3, [r7, #4]
    c932:	60bb      	str	r3, [r7, #8]
    c934:	2360      	movs	r3, #96	; 0x60
    c936:	60fb      	str	r3, [r7, #12]
    c938:	2300      	movs	r3, #0
    c93a:	613b      	str	r3, [r7, #16]
    c93c:	2300      	movs	r3, #0
    c93e:	617b      	str	r3, [r7, #20]
    c940:	2300      	movs	r3, #0
    c942:	61bb      	str	r3, [r7, #24]
    c944:	2312      	movs	r3, #18
    c946:	61fb      	str	r3, [r7, #28]
    c948:	2300      	movs	r3, #0
    c94a:	623b      	str	r3, [r7, #32]
    c94c:	2300      	movs	r3, #0
    c94e:	627b      	str	r3, [r7, #36]	; 0x24
    c950:	2300      	movs	r3, #0
    c952:	62bb      	str	r3, [r7, #40]	; 0x28
    c954:	2300      	movs	r3, #0
    c956:	62fb      	str	r3, [r7, #44]	; 0x2c
            .pui8RxBuffer = NULL,
            .ui32RxBufferSize = 0,
        };

    // Initialize the printf interface for UART output.
    am_hal_uart_initialize(BL_UART_INST, &hUART_bl);
    c958:	491f      	ldr	r1, [pc, #124]	; (c9d8 <start_uart_bl+0xb8>)
    c95a:	2000      	movs	r0, #0
    c95c:	f001 fc8c 	bl	e278 <am_hal_uart_initialize>
    am_hal_uart_power_control(hUART_bl, AM_HAL_SYSCTRL_WAKE, false);
    c960:	4b1d      	ldr	r3, [pc, #116]	; (c9d8 <start_uart_bl+0xb8>)
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	2200      	movs	r2, #0
    c966:	2100      	movs	r1, #0
    c968:	4618      	mov	r0, r3
    c96a:	f001 fcad 	bl	e2c8 <am_hal_uart_power_control>
    am_hal_uart_configure(hUART_bl, &bl_uart_config);
    c96e:	4b1a      	ldr	r3, [pc, #104]	; (c9d8 <start_uart_bl+0xb8>)
    c970:	681b      	ldr	r3, [r3, #0]
    c972:	f107 0208 	add.w	r2, r7, #8
    c976:	4611      	mov	r1, r2
    c978:	4618      	mov	r0, r3
    c97a:	f001 fd1d 	bl	e3b8 <am_hal_uart_configure>

    // Disable that pesky FIFO
    UARTn(BL_UART_INST)->LCRH_b.FEN = 0;
    c97e:	4a17      	ldr	r2, [pc, #92]	; (c9dc <start_uart_bl+0xbc>)
    c980:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    c984:	f36f 1304 	bfc	r3, #4, #1
    c988:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

    // Enable the UART pins.
    am_hal_gpio_pinconfig(BL_TX_PAD, bl_uart_tx_pinconfig);
    c98c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    c98e:	2030      	movs	r0, #48	; 0x30
    c990:	f001 f972 	bl	dc78 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(BL_RX_PAD, bl_uart_rx_pinconfig);
    c994:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c996:	2031      	movs	r0, #49	; 0x31
    c998:	f001 f96e 	bl	dc78 <am_hal_gpio_pinconfig>

    // Enable interrupts.
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + BL_UART_INST));
    c99c:	200f      	movs	r0, #15
    c99e:	f7ff fd31 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(hUART_bl, (AM_HAL_UART_INT_RX));
    c9a2:	4b0d      	ldr	r3, [pc, #52]	; (c9d8 <start_uart_bl+0xb8>)
    c9a4:	681b      	ldr	r3, [r3, #0]
    c9a6:	2110      	movs	r1, #16
    c9a8:	4618      	mov	r0, r3
    c9aa:	f002 f895 	bl	ead8 <am_hal_uart_interrupt_enable>

    // Provide SVL Packet interfaces
    svl_packet_link_read_fn(art_svl_ringbuf_read, &bl_rx_ringbuf);
    c9ae:	490c      	ldr	r1, [pc, #48]	; (c9e0 <start_uart_bl+0xc0>)
    c9b0:	480c      	ldr	r0, [pc, #48]	; (c9e4 <start_uart_bl+0xc4>)
    c9b2:	f000 fa75 	bl	cea0 <svl_packet_link_read_fn>
    svl_packet_link_avail_fn(art_svl_ringbuf_available, &bl_rx_ringbuf);
    c9b6:	490a      	ldr	r1, [pc, #40]	; (c9e0 <start_uart_bl+0xc0>)
    c9b8:	480b      	ldr	r0, [pc, #44]	; (c9e8 <start_uart_bl+0xc8>)
    c9ba:	f000 fa9d 	bl	cef8 <svl_packet_link_avail_fn>
    svl_packet_link_millis_fn(millis);
    c9be:	480b      	ldr	r0, [pc, #44]	; (c9ec <start_uart_bl+0xcc>)
    c9c0:	f000 fab0 	bl	cf24 <svl_packet_link_millis_fn>
    svl_packet_link_write_fn(svl_uart_write_byte, hUART_bl);
    c9c4:	4b04      	ldr	r3, [pc, #16]	; (c9d8 <start_uart_bl+0xb8>)
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	4619      	mov	r1, r3
    c9ca:	4809      	ldr	r0, [pc, #36]	; (c9f0 <start_uart_bl+0xd0>)
    c9cc:	f000 fa7e 	bl	cecc <svl_packet_link_write_fn>
}
    c9d0:	bf00      	nop
    c9d2:	3738      	adds	r7, #56	; 0x38
    c9d4:	46bd      	mov	sp, r7
    c9d6:	bd80      	pop	{r7, pc}
    c9d8:	10000220 	.word	0x10000220
    c9dc:	4001c000 	.word	0x4001c000
    c9e0:	10000210 	.word	0x10000210
    c9e4:	0000d525 	.word	0x0000d525
    c9e8:	0000d41b 	.word	0x0000d41b
    c9ec:	0000d679 	.word	0x0000d679
    c9f0:	0000d5fd 	.word	0x0000d5fd

0000c9f4 <enter_bootload>:
//
// Bootload phase
//
// ****************************************
void enter_bootload(void)
{
    c9f4:	b580      	push	{r7, lr}
    c9f6:	b08c      	sub	sp, #48	; 0x30
    c9f8:	af00      	add	r7, sp, #0
    enable_burst_mode();
    c9fa:	f000 fe51 	bl	d6a0 <enable_burst_mode>
    bool done = false;
    c9fe:	2300      	movs	r3, #0
    ca00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t frame_address = 0;
    ca04:	2300      	movs	r3, #0
    ca06:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t last_page_erased = 0;
    ca08:	2300      	movs	r3, #0
    ca0a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t retransmit = 0;
    ca0c:	2300      	movs	r3, #0
    ca0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    static uint32_t frame_buffer[FRAME_BUFFER_SIZE];

    svl_packet_t svl_packet_incoming_frame = {CMD_FRAME, (uint8_t *)frame_buffer, sizeof(frame_buffer) / sizeof(uint8_t), sizeof(frame_buffer) / sizeof(uint8_t)};
    ca12:	4a41      	ldr	r2, [pc, #260]	; (cb18 <enter_bootload+0x124>)
    ca14:	f107 0318 	add.w	r3, r7, #24
    ca18:	ca07      	ldmia	r2, {r0, r1, r2}
    ca1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    svl_packet_t svl_packet_retry = {CMD_RETRY, NULL, 0, 0};
    ca1e:	2305      	movs	r3, #5
    ca20:	733b      	strb	r3, [r7, #12]
    ca22:	2300      	movs	r3, #0
    ca24:	613b      	str	r3, [r7, #16]
    ca26:	2300      	movs	r3, #0
    ca28:	82bb      	strh	r3, [r7, #20]
    ca2a:	2300      	movs	r3, #0
    ca2c:	82fb      	strh	r3, [r7, #22]
    svl_packet_t svl_packet_next = {CMD_NEXT, NULL, 0, 0};
    ca2e:	2303      	movs	r3, #3
    ca30:	703b      	strb	r3, [r7, #0]
    ca32:	2300      	movs	r3, #0
    ca34:	607b      	str	r3, [r7, #4]
    ca36:	2300      	movs	r3, #0
    ca38:	813b      	strh	r3, [r7, #8]
    ca3a:	2300      	movs	r3, #0
    ca3c:	817b      	strh	r3, [r7, #10]

    debug_printf("phase:\tbootload\n");
    ca3e:	4837      	ldr	r0, [pc, #220]	; (cb1c <enter_bootload+0x128>)
    ca40:	f000 f91e 	bl	cc80 <debug_printf>

    while (!done)
    ca44:	e05c      	b.n	cb00 <enter_bootload+0x10c>
    {

        if (retransmit != 0)
    ca46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d008      	beq.n	ca60 <enter_bootload+0x6c>
        {
            debug_printf("\trequesting retransmission\n");
    ca4e:	4834      	ldr	r0, [pc, #208]	; (cb20 <enter_bootload+0x12c>)
    ca50:	f000 f916 	bl	cc80 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_retry); // Ask to retransmit
    ca54:	f107 030c 	add.w	r3, r7, #12
    ca58:	4618      	mov	r0, r3
    ca5a:	f000 fa73 	bl	cf44 <svl_packet_send>
    ca5e:	e006      	b.n	ca6e <enter_bootload+0x7a>
        }
        else
        {
            debug_printf("\trequesting next app frame\n");
    ca60:	4830      	ldr	r0, [pc, #192]	; (cb24 <enter_bootload+0x130>)
    ca62:	f000 f90d 	bl	cc80 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_next); // Ask for the next frame packet
    ca66:	463b      	mov	r3, r7
    ca68:	4618      	mov	r0, r3
    ca6a:	f000 fa6b 	bl	cf44 <svl_packet_send>
        }
        retransmit = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t stat = svl_packet_wait(&svl_packet_incoming_frame);
    ca74:	f107 0318 	add.w	r3, r7, #24
    ca78:	4618      	mov	r0, r3
    ca7a:	f000 fb57 	bl	d12c <svl_packet_wait>
    ca7e:	4603      	mov	r3, r0
    ca80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (stat != 0)
    ca84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d012      	beq.n	cab2 <enter_bootload+0xbe>
        { // wait for either a frame or the done command
            debug_printf("\t\terror receiving packet (%d)\n", stat);
    ca8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ca90:	4619      	mov	r1, r3
    ca92:	4825      	ldr	r0, [pc, #148]	; (cb28 <enter_bootload+0x134>)
    ca94:	f000 f8f4 	bl	cc80 <debug_printf>
            retransmit = 1;
    ca98:	2301      	movs	r3, #1
    ca9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            am_util_delay_us(177000); //Worst case: wait 177ms for 2048 byte transfer at 115200bps to complete
    ca9e:	4823      	ldr	r0, [pc, #140]	; (cb2c <enter_bootload+0x138>)
    caa0:	f000 f994 	bl	cdcc <am_util_delay_us>

            //Flush the buffers to remove any inbound or outbound garbage
            bl_rx_ringbuf.r_offset = 0;
    caa4:	4b22      	ldr	r3, [pc, #136]	; (cb30 <enter_bootload+0x13c>)
    caa6:	2200      	movs	r2, #0
    caa8:	609a      	str	r2, [r3, #8]
            bl_rx_ringbuf.w_offset = 0;
    caaa:	4b21      	ldr	r3, [pc, #132]	; (cb30 <enter_bootload+0x13c>)
    caac:	2200      	movs	r2, #0
    caae:	60da      	str	r2, [r3, #12]
            continue;
    cab0:	e026      	b.n	cb00 <enter_bootload+0x10c>
        }

        // debug_printf("Successfully received incoming frame packet (todo: add extra details in debug)\n", stat);

        if (svl_packet_incoming_frame.cmd == CMD_FRAME)
    cab2:	7e3b      	ldrb	r3, [r7, #24]
    cab4:	2b04      	cmp	r3, #4
    cab6:	d112      	bne.n	cade <enter_bootload+0xea>
        {
            debug_printf("\t\treceived an app frame\n");
    cab8:	481e      	ldr	r0, [pc, #120]	; (cb34 <enter_bootload+0x140>)
    caba:	f000 f8e1 	bl	cc80 <debug_printf>
            if (handle_frame_packet(&svl_packet_incoming_frame, &frame_address, &last_page_erased) != 0)
    cabe:	f107 0226 	add.w	r2, r7, #38	; 0x26
    cac2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    cac6:	f107 0318 	add.w	r3, r7, #24
    caca:	4618      	mov	r0, r3
    cacc:	f000 f838 	bl	cb40 <handle_frame_packet>
    cad0:	4603      	mov	r3, r0
    cad2:	2b00      	cmp	r3, #0
    cad4:	d014      	beq.n	cb00 <enter_bootload+0x10c>
            {
                // debug_printf("\t\t\tbootload error - packet could not be handled\n");
                retransmit = 1;
    cad6:	2301      	movs	r3, #1
    cad8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                continue;
    cadc:	e010      	b.n	cb00 <enter_bootload+0x10c>
            }
        }
        else if (svl_packet_incoming_frame.cmd == CMD_DONE)
    cade:	7e3b      	ldrb	r3, [r7, #24]
    cae0:	2b06      	cmp	r3, #6
    cae2:	d106      	bne.n	caf2 <enter_bootload+0xfe>
        {
            debug_printf("\t\treceived done signal!\n\n");
    cae4:	4814      	ldr	r0, [pc, #80]	; (cb38 <enter_bootload+0x144>)
    cae6:	f000 f8cb 	bl	cc80 <debug_printf>
            done = true;
    caea:	2301      	movs	r3, #1
    caec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    caf0:	e006      	b.n	cb00 <enter_bootload+0x10c>
        }
        else
        {
            debug_printf("bootload error - unknown command\n");
    caf2:	4812      	ldr	r0, [pc, #72]	; (cb3c <enter_bootload+0x148>)
    caf4:	f000 f8c4 	bl	cc80 <debug_printf>
            retransmit = 1;
    caf8:	2301      	movs	r3, #1
    cafa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    cafe:	bf00      	nop
    while (!done)
    cb00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cb04:	f083 0301 	eor.w	r3, r3, #1
    cb08:	b2db      	uxtb	r3, r3
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d19b      	bne.n	ca46 <enter_bootload+0x52>
        }
    }

    // finish bootloading
}
    cb0e:	bf00      	nop
    cb10:	3730      	adds	r7, #48	; 0x30
    cb12:	46bd      	mov	sp, r7
    cb14:	bd80      	pop	{r7, pc}
    cb16:	bf00      	nop
    cb18:	0000ee8c 	.word	0x0000ee8c
    cb1c:	0000edc4 	.word	0x0000edc4
    cb20:	0000edd8 	.word	0x0000edd8
    cb24:	0000edf4 	.word	0x0000edf4
    cb28:	0000ee10 	.word	0x0000ee10
    cb2c:	0002b368 	.word	0x0002b368
    cb30:	10000210 	.word	0x10000210
    cb34:	0000ee30 	.word	0x0000ee30
    cb38:	0000ee4c 	.word	0x0000ee4c
    cb3c:	0000ee68 	.word	0x0000ee68

0000cb40 <handle_frame_packet>:
//
// Handle a frame packet
//
// ****************************************
uint8_t handle_frame_packet(svl_packet_t *packet, uint32_t *p_frame_address, uint16_t *p_last_page_erased)
{
    cb40:	b580      	push	{r7, lr}
    cb42:	b088      	sub	sp, #32
    cb44:	af00      	add	r7, sp, #0
    cb46:	60f8      	str	r0, [r7, #12]
    cb48:	60b9      	str	r1, [r7, #8]
    cb4a:	607a      	str	r2, [r7, #4]
    // debug_printf("\t\thandling frame\n");
    static uint16_t last_inst_erased=0; //to keep track of last instance of flash
    uint32_t num_words = (packet->pl_len / 4);
    cb4c:	68fb      	ldr	r3, [r7, #12]
    cb4e:	891b      	ldrh	r3, [r3, #8]
    cb50:	089b      	lsrs	r3, r3, #2
    cb52:	b29b      	uxth	r3, r3
    cb54:	61fb      	str	r3, [r7, #28]

    debug_printf("\t\tframe_address = 0x%08X, num_words = %d\n", *(p_frame_address), num_words);
    cb56:	68bb      	ldr	r3, [r7, #8]
    cb58:	681b      	ldr	r3, [r3, #0]
    cb5a:	69fa      	ldr	r2, [r7, #28]
    cb5c:	4619      	mov	r1, r3
    cb5e:	4836      	ldr	r0, [pc, #216]	; (cc38 <handle_frame_packet+0xf8>)
    cb60:	f000 f88e 	bl	cc80 <debug_printf>

    // Check payload length is multiple of words
    if ((packet->pl_len % 4))
    cb64:	68fb      	ldr	r3, [r7, #12]
    cb66:	891b      	ldrh	r3, [r3, #8]
    cb68:	f003 0303 	and.w	r3, r3, #3
    cb6c:	b29b      	uxth	r3, r3
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d004      	beq.n	cb7c <handle_frame_packet+0x3c>
    {
        debug_printf("Error: frame packet not integer multiple of words (4 bytes per word)\n");
    cb72:	4832      	ldr	r0, [pc, #200]	; (cc3c <handle_frame_packet+0xfc>)
    cb74:	f000 f884 	bl	cc80 <debug_printf>
        return 1;
    cb78:	2301      	movs	r3, #1
    cb7a:	e059      	b.n	cc30 <handle_frame_packet+0xf0>
    }

    int32_t i32ReturnCode = 0;
    cb7c:	2300      	movs	r3, #0
    cb7e:	61bb      	str	r3, [r7, #24]
    uint32_t offset_address = (*(p_frame_address) + USERCODE_OFFSET);
    cb80:	68bb      	ldr	r3, [r7, #8]
    cb82:	681b      	ldr	r3, [r3, #0]
    cb84:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cb88:	617b      	str	r3, [r7, #20]
    //if the last page was less than current page, or we switched into next instance
    if ((*p_last_page_erased) < AM_HAL_FLASH_ADDR2PAGE(offset_address) || (last_inst_erased < AM_HAL_FLASH_ADDR2INST(offset_address)))
    cb8a:	687b      	ldr	r3, [r7, #4]
    cb8c:	881b      	ldrh	r3, [r3, #0]
    cb8e:	461a      	mov	r2, r3
    cb90:	697b      	ldr	r3, [r7, #20]
    cb92:	0b5b      	lsrs	r3, r3, #13
    cb94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cb98:	429a      	cmp	r2, r3
    cb9a:	d308      	bcc.n	cbae <handle_frame_packet+0x6e>
    cb9c:	4b28      	ldr	r3, [pc, #160]	; (cc40 <handle_frame_packet+0x100>)
    cb9e:	881b      	ldrh	r3, [r3, #0]
    cba0:	461a      	mov	r2, r3
    cba2:	697b      	ldr	r3, [r7, #20]
    cba4:	0cdb      	lsrs	r3, r3, #19
    cba6:	f003 0303 	and.w	r3, r3, #3
    cbaa:	429a      	cmp	r2, r3
    cbac:	d223      	bcs.n	cbf6 <handle_frame_packet+0xb6>
    { // Prevent erasing partially-filled pages
        // debug_printf("Erasing instance %d, page %d\n\r", AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE(offset_address) );

        //Erase the 8k page for this address
        i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, AM_HAL_FLASH_ADDR2INST(offset_address), AM_HAL_FLASH_ADDR2PAGE(offset_address));
    cbae:	697b      	ldr	r3, [r7, #20]
    cbb0:	0cdb      	lsrs	r3, r3, #19
    cbb2:	f003 0103 	and.w	r1, r3, #3
    cbb6:	697b      	ldr	r3, [r7, #20]
    cbb8:	0b5b      	lsrs	r3, r3, #13
    cbba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cbbe:	461a      	mov	r2, r3
    cbc0:	4820      	ldr	r0, [pc, #128]	; (cc44 <handle_frame_packet+0x104>)
    cbc2:	f000 ffd7 	bl	db74 <am_hal_flash_page_erase>
    cbc6:	61b8      	str	r0, [r7, #24]
        *(p_last_page_erased) = AM_HAL_FLASH_ADDR2PAGE(offset_address);
    cbc8:	697b      	ldr	r3, [r7, #20]
    cbca:	0b5b      	lsrs	r3, r3, #13
    cbcc:	b29b      	uxth	r3, r3
    cbce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cbd2:	b29a      	uxth	r2, r3
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	801a      	strh	r2, [r3, #0]
        last_inst_erased=AM_HAL_FLASH_ADDR2INST(offset_address); //keep track of last instance
    cbd8:	697b      	ldr	r3, [r7, #20]
    cbda:	0cdb      	lsrs	r3, r3, #19
    cbdc:	b29b      	uxth	r3, r3
    cbde:	f003 0303 	and.w	r3, r3, #3
    cbe2:	b29a      	uxth	r2, r3
    cbe4:	4b16      	ldr	r3, [pc, #88]	; (cc40 <handle_frame_packet+0x100>)
    cbe6:	801a      	strh	r2, [r3, #0]

        if (i32ReturnCode)
    cbe8:	69bb      	ldr	r3, [r7, #24]
    cbea:	2b00      	cmp	r3, #0
    cbec:	d003      	beq.n	cbf6 <handle_frame_packet+0xb6>
        {
            debug_printf("FLASH_MASS_ERASE i32ReturnCode = 0x%x.\n\r", i32ReturnCode);
    cbee:	69b9      	ldr	r1, [r7, #24]
    cbf0:	4815      	ldr	r0, [pc, #84]	; (cc48 <handle_frame_packet+0x108>)
    cbf2:	f000 f845 	bl	cc80 <debug_printf>
        }
    }

    //Record the array
    //debug_printf("Recording %d words (%d bytes) to memory\n", num_words, 4 * num_words);
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, (uint32_t *)packet->pl, (uint32_t *)(*(p_frame_address) + USERCODE_OFFSET), num_words);
    cbf6:	68fb      	ldr	r3, [r7, #12]
    cbf8:	6859      	ldr	r1, [r3, #4]
    cbfa:	68bb      	ldr	r3, [r7, #8]
    cbfc:	681b      	ldr	r3, [r3, #0]
    cbfe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cc02:	461a      	mov	r2, r3
    cc04:	69fb      	ldr	r3, [r7, #28]
    cc06:	480f      	ldr	r0, [pc, #60]	; (cc44 <handle_frame_packet+0x104>)
    cc08:	f000 ffb8 	bl	db7c <am_hal_flash_program_main>
    cc0c:	61b8      	str	r0, [r7, #24]
    if (i32ReturnCode)
    cc0e:	69bb      	ldr	r3, [r7, #24]
    cc10:	2b00      	cmp	r3, #0
    cc12:	d005      	beq.n	cc20 <handle_frame_packet+0xe0>
    {
        debug_printf("FLASH_WRITE error = 0x%x.\n\r", i32ReturnCode);
    cc14:	69b9      	ldr	r1, [r7, #24]
    cc16:	480d      	ldr	r0, [pc, #52]	; (cc4c <handle_frame_packet+0x10c>)
    cc18:	f000 f832 	bl	cc80 <debug_printf>
        return 1;
    cc1c:	2301      	movs	r3, #1
    cc1e:	e007      	b.n	cc30 <handle_frame_packet+0xf0>
    }
    *(p_frame_address) += num_words * 4;
    cc20:	68bb      	ldr	r3, [r7, #8]
    cc22:	681a      	ldr	r2, [r3, #0]
    cc24:	69fb      	ldr	r3, [r7, #28]
    cc26:	009b      	lsls	r3, r3, #2
    cc28:	441a      	add	r2, r3
    cc2a:	68bb      	ldr	r3, [r7, #8]
    cc2c:	601a      	str	r2, [r3, #0]

    // debug_printf("Array recorded to flash\n");
    return 0;
    cc2e:	2300      	movs	r3, #0
}
    cc30:	4618      	mov	r0, r3
    cc32:	3720      	adds	r7, #32
    cc34:	46bd      	mov	sp, r7
    cc36:	bd80      	pop	{r7, pc}
    cc38:	0000ee98 	.word	0x0000ee98
    cc3c:	0000eec4 	.word	0x0000eec4
    cc40:	10000a3c 	.word	0x10000a3c
    cc44:	12344321 	.word	0x12344321
    cc48:	0000ef0c 	.word	0x0000ef0c
    cc4c:	0000ef38 	.word	0x0000ef38

0000cc50 <app_start>:
//
// Jump to the application
//
// ****************************************
void app_start(void)
{
    cc50:	b580      	push	{r7, lr}
    cc52:	b082      	sub	sp, #8
    cc54:	af00      	add	r7, sp, #0
    //     debug_printf("\n");
    // #endif // APP_PRINT_PRETTY
    // #endif // DEBUG_PRINT_APP
    // #endif // DEBUG

    void *entryPoint = (void *)(*((uint32_t *)(USERCODE_OFFSET + 4)));
    cc56:	4b08      	ldr	r3, [pc, #32]	; (cc78 <app_start+0x28>)
    cc58:	681b      	ldr	r3, [r3, #0]
    cc5a:	607b      	str	r3, [r7, #4]
    debug_printf("\nJump to App at 0x%08X\n\n", (uint32_t)entryPoint);
    cc5c:	687b      	ldr	r3, [r7, #4]
    cc5e:	4619      	mov	r1, r3
    cc60:	4806      	ldr	r0, [pc, #24]	; (cc7c <app_start+0x2c>)
    cc62:	f000 f80d 	bl	cc80 <debug_printf>
    am_util_delay_ms(10); // Wait for prints to complete
    cc66:	200a      	movs	r0, #10
    cc68:	f000 f892 	bl	cd90 <am_util_delay_ms>
    unsetup();            // Undoes configuration to provide users with a clean slate
    cc6c:	f7ff fcda 	bl	c624 <unsetup>
    goto *entryPoint;     // Jump to start of user code
    cc70:	687b      	ldr	r3, [r7, #4]
    cc72:	f043 0301 	orr.w	r3, r3, #1
    cc76:	4718      	bx	r3
    cc78:	00010004 	.word	0x00010004
    cc7c:	0000ef54 	.word	0x0000ef54

0000cc80 <debug_printf>:
//
// Debug printf function
//
// ****************************************
void debug_printf(char *fmt, ...)
{
    cc80:	b40f      	push	{r0, r1, r2, r3}
    cc82:	b480      	push	{r7}
    cc84:	af00      	add	r7, sp, #0
    vsnprintf(debug_buffer, DEBUG_UART_BUF_LEN, (const char *)fmt, args);
    va_end(args);

    svl_uart_print(hUART_debug, debug_buffer);
#endif //DEBUG
}
    cc86:	bf00      	nop
    cc88:	46bd      	mov	sp, r7
    cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc8e:	b004      	add	sp, #16
    cc90:	4770      	bx	lr
	...

0000cc94 <am_uart_isr>:
//
// UART interrupt handlers
//
//*****************************************************************************
void am_uart_isr(void)
{
    cc94:	b580      	push	{r7, lr}
    cc96:	b084      	sub	sp, #16
    cc98:	af00      	add	r7, sp, #0
    // Service the FIFOs as necessary, and clear the interrupts.
#if BL_UART_INST == 0
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(hUART_bl, &ui32Status, true);
    cc9a:	4b18      	ldr	r3, [pc, #96]	; (ccfc <am_uart_isr+0x68>)
    cc9c:	681b      	ldr	r3, [r3, #0]
    cc9e:	f107 010c 	add.w	r1, r7, #12
    cca2:	2201      	movs	r2, #1
    cca4:	4618      	mov	r0, r3
    cca6:	f001 ff3d 	bl	eb24 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(hUART_bl, ui32Status);
    ccaa:	4b14      	ldr	r3, [pc, #80]	; (ccfc <am_uart_isr+0x68>)
    ccac:	681b      	ldr	r3, [r3, #0]
    ccae:	68fa      	ldr	r2, [r7, #12]
    ccb0:	4611      	mov	r1, r2
    ccb2:	4618      	mov	r0, r3
    ccb4:	f001 ff24 	bl	eb00 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(hUART_bl, ui32Status, &ui32Idle);
    ccb8:	4b10      	ldr	r3, [pc, #64]	; (ccfc <am_uart_isr+0x68>)
    ccba:	681b      	ldr	r3, [r3, #0]
    ccbc:	68f9      	ldr	r1, [r7, #12]
    ccbe:	f107 0208 	add.w	r2, r7, #8
    ccc2:	4618      	mov	r0, r3
    ccc4:	f001 fe72 	bl	e9ac <am_hal_uart_interrupt_service>
    if (ui32Status & AM_HAL_UART_INT_RX)
    ccc8:	68fb      	ldr	r3, [r7, #12]
    ccca:	f003 0310 	and.w	r3, r3, #16
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d010      	beq.n	ccf4 <am_uart_isr+0x60>
    {
        uint8_t c = 0x00;
    ccd2:	2300      	movs	r3, #0
    ccd4:	71fb      	strb	r3, [r7, #7]
        if (svl_uart_read(hUART_bl, (char *)&c, 1) != 0)
    ccd6:	4b09      	ldr	r3, [pc, #36]	; (ccfc <am_uart_isr+0x68>)
    ccd8:	681b      	ldr	r3, [r3, #0]
    ccda:	1df9      	adds	r1, r7, #7
    ccdc:	2201      	movs	r2, #1
    ccde:	4618      	mov	r0, r3
    cce0:	f000 fc4f 	bl	d582 <svl_uart_read>
    cce4:	4603      	mov	r3, r0
    cce6:	2b00      	cmp	r3, #0
    cce8:	d004      	beq.n	ccf4 <am_uart_isr+0x60>
        {
            art_svl_ringbuf_write(&bl_rx_ringbuf, c);
    ccea:	79fb      	ldrb	r3, [r7, #7]
    ccec:	4619      	mov	r1, r3
    ccee:	4804      	ldr	r0, [pc, #16]	; (cd00 <am_uart_isr+0x6c>)
    ccf0:	f000 fbe9 	bl	d4c6 <art_svl_ringbuf_write>
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    ccf4:	bf00      	nop
    ccf6:	3710      	adds	r7, #16
    ccf8:	46bd      	mov	sp, r7
    ccfa:	bd80      	pop	{r7, pc}
    ccfc:	10000220 	.word	0x10000220
    cd00:	10000210 	.word	0x10000210

0000cd04 <am_uart1_isr>:

void am_uart1_isr(void)
{
    cd04:	b480      	push	{r7}
    cd06:	af00      	add	r7, sp, #0
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cd08:	bf00      	nop
    cd0a:	46bd      	mov	sp, r7
    cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd10:	4770      	bx	lr
	...

0000cd14 <am_gpio_isr>:
//
// GPIO interrupt handler
//
//*****************************************************************************
void am_gpio_isr(void)
{
    cd14:	b580      	push	{r7, lr}
    cd16:	b084      	sub	sp, #16
    cd18:	af00      	add	r7, sp, #0
    AM_HAL_GPIO_MASKCREATE(BL_RX_PAD_Mask);
    cd1a:	463b      	mov	r3, r7
    cd1c:	60fb      	str	r3, [r7, #12]
    cd1e:	2300      	movs	r3, #0
    cd20:	60bb      	str	r3, [r7, #8]
    cd22:	607b      	str	r3, [r7, #4]
    cd24:	603b      	str	r3, [r7, #0]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    cd26:	2131      	movs	r1, #49	; 0x31
    cd28:	68f8      	ldr	r0, [r7, #12]
    cd2a:	f7ff fbab 	bl	c484 <AM_HAL_GPIO_MASKBIT>
    cd2e:	4603      	mov	r3, r0
    cd30:	4618      	mov	r0, r3
    cd32:	f001 f949 	bl	dfc8 <am_hal_gpio_interrupt_clear>
    if (bl_baud_ticks_index < BL_BAUD_SAMPLES)
    cd36:	4b0b      	ldr	r3, [pc, #44]	; (cd64 <am_gpio_isr+0x50>)
    cd38:	781b      	ldrb	r3, [r3, #0]
    cd3a:	b2db      	uxtb	r3, r3
    cd3c:	2b04      	cmp	r3, #4
    cd3e:	d80d      	bhi.n	cd5c <am_gpio_isr+0x48>
    {
        bl_baud_ticks[bl_baud_ticks_index++] = CTIMER->STTMR;
    cd40:	4a09      	ldr	r2, [pc, #36]	; (cd68 <am_gpio_isr+0x54>)
    cd42:	4b08      	ldr	r3, [pc, #32]	; (cd64 <am_gpio_isr+0x50>)
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	b2db      	uxtb	r3, r3
    cd48:	1c59      	adds	r1, r3, #1
    cd4a:	b2c8      	uxtb	r0, r1
    cd4c:	4905      	ldr	r1, [pc, #20]	; (cd64 <am_gpio_isr+0x50>)
    cd4e:	7008      	strb	r0, [r1, #0]
    cd50:	4619      	mov	r1, r3
    cd52:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
    cd56:	4a05      	ldr	r2, [pc, #20]	; (cd6c <am_gpio_isr+0x58>)
    cd58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
}
    cd5c:	bf00      	nop
    cd5e:	3710      	adds	r7, #16
    cd60:	46bd      	mov	sp, r7
    cd62:	bd80      	pop	{r7, pc}
    cd64:	10000224 	.word	0x10000224
    cd68:	40008000 	.word	0x40008000
    cd6c:	10000228 	.word	0x10000228

0000cd70 <am_stimer_isr>:
//
// STimer interrupt handler
//
//*****************************************************************************
void am_stimer_isr(void)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	af00      	add	r7, sp, #0
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
    cd74:	f44f 7080 	mov.w	r0, #256	; 0x100
    cd78:	f001 fa24 	bl	e1c4 <am_hal_stimer_int_clear>
    ap3_stimer_overflows += 1;
    cd7c:	4b03      	ldr	r3, [pc, #12]	; (cd8c <am_stimer_isr+0x1c>)
    cd7e:	681b      	ldr	r3, [r3, #0]
    cd80:	3301      	adds	r3, #1
    cd82:	4a02      	ldr	r2, [pc, #8]	; (cd8c <am_stimer_isr+0x1c>)
    cd84:	6013      	str	r3, [r2, #0]
    // At the fastest rate (3MHz) the 64 bits of the stimer
    // along with this overflow counter can keep track of
    // the time for ~ 195,000 years without wrapping to 0
    cd86:	bf00      	nop
    cd88:	bd80      	pop	{r7, pc}
    cd8a:	bf00      	nop
    cd8c:	10000a5c 	.word	0x10000a5c

0000cd90 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    cd90:	b580      	push	{r7, lr}
    cd92:	b088      	sub	sp, #32
    cd94:	af00      	add	r7, sp, #0
    cd96:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cd98:	f107 030c 	add.w	r3, r7, #12
    cd9c:	4618      	mov	r0, r3
    cd9e:	f000 fecb 	bl	db38 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cda2:	68fb      	ldr	r3, [r7, #12]
    cda4:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cda6:	69fb      	ldr	r3, [r7, #28]
    cda8:	4a07      	ldr	r2, [pc, #28]	; (cdc8 <am_util_delay_ms+0x38>)
    cdaa:	fba2 2303 	umull	r2, r3, r2, r3
    cdae:	099a      	lsrs	r2, r3, #6
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	fb02 f303 	mul.w	r3, r2, r3
    cdb6:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cdb8:	69b8      	ldr	r0, [r7, #24]
    cdba:	f000 ff0d 	bl	dbd8 <am_hal_flash_delay>
}
    cdbe:	bf00      	nop
    cdc0:	3720      	adds	r7, #32
    cdc2:	46bd      	mov	sp, r7
    cdc4:	bd80      	pop	{r7, pc}
    cdc6:	bf00      	nop
    cdc8:	057619f1 	.word	0x057619f1

0000cdcc <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    cdcc:	b580      	push	{r7, lr}
    cdce:	b088      	sub	sp, #32
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cdd4:	f107 030c 	add.w	r3, r7, #12
    cdd8:	4618      	mov	r0, r3
    cdda:	f000 fead 	bl	db38 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cdde:	68fb      	ldr	r3, [r7, #12]
    cde0:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    cde2:	69fb      	ldr	r3, [r7, #28]
    cde4:	4a07      	ldr	r2, [pc, #28]	; (ce04 <am_util_delay_us+0x38>)
    cde6:	fba2 2303 	umull	r2, r3, r2, r3
    cdea:	0c9a      	lsrs	r2, r3, #18
    cdec:	687b      	ldr	r3, [r7, #4]
    cdee:	fb02 f303 	mul.w	r3, r2, r3
    cdf2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cdf4:	69b8      	ldr	r0, [r7, #24]
    cdf6:	f000 feef 	bl	dbd8 <am_hal_flash_delay>
}
    cdfa:	bf00      	nop
    cdfc:	3720      	adds	r7, #32
    cdfe:	46bd      	mov	sp, r7
    ce00:	bd80      	pop	{r7, pc}
    ce02:	bf00      	nop
    ce04:	165e9f81 	.word	0x165e9f81

0000ce08 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    ce08:	4818      	ldr	r0, [pc, #96]	; (ce6c <zero_loop+0x2c>)
    ce0a:	4919      	ldr	r1, [pc, #100]	; (ce70 <zero_loop+0x30>)
    ce0c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    ce0e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    ce12:	4818      	ldr	r0, [pc, #96]	; (ce74 <zero_loop+0x34>)
    ce14:	6801      	ldr	r1, [r0, #0]
    ce16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce1a:	6001      	str	r1, [r0, #0]
    ce1c:	f3bf 8f4f 	dsb	sy
    ce20:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    ce24:	4814      	ldr	r0, [pc, #80]	; (ce78 <zero_loop+0x38>)
    ce26:	4915      	ldr	r1, [pc, #84]	; (ce7c <zero_loop+0x3c>)
    ce28:	4a15      	ldr	r2, [pc, #84]	; (ce80 <zero_loop+0x40>)

0000ce2a <copy_loop>:
    ce2a:	4291      	cmp	r1, r2
    ce2c:	d004      	beq.n	ce38 <copy_end>
    ce2e:	f850 3b04 	ldr.w	r3, [r0], #4
    ce32:	f841 3b04 	str.w	r3, [r1], #4
    ce36:	e7f8      	b.n	ce2a <copy_loop>

0000ce38 <copy_end>:
          "copy_end:\n");
    
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    ce38:	4812      	ldr	r0, [pc, #72]	; (ce84 <zero_loop+0x44>)
    ce3a:	4913      	ldr	r1, [pc, #76]	; (ce88 <zero_loop+0x48>)
    ce3c:	f04f 0200 	mov.w	r2, #0

0000ce40 <zero_loop>:
    ce40:	4288      	cmp	r0, r1
    ce42:	bfb8      	it	lt
    ce44:	f840 2b04 	strlt.w	r2, [r0], #4
    ce48:	dbfa      	blt.n	ce40 <zero_loop>
    //
    // Call Global Static Constructors for C++ support
    //
    extern void (*__init_array_start)(void);    // symbols must be
    extern void (*__init_array_end)(void);      // provided by linker
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    ce4a:	4c06      	ldr	r4, [pc, #24]	; (ce64 <zero_loop+0x24>)
    ce4c:	e002      	b.n	ce54 <zero_loop+0x14>
        (*p)();                                 // Call each function in the list
    ce4e:	6823      	ldr	r3, [r4, #0]
    ce50:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    ce52:	3404      	adds	r4, #4
    ce54:	4b04      	ldr	r3, [pc, #16]	; (ce68 <zero_loop+0x28>)
    ce56:	429c      	cmp	r4, r3
    ce58:	d3f9      	bcc.n	ce4e <zero_loop+0xe>
    }

    //
    // Call the application's entry point.
    //
    main();
    ce5a:	f7ff fb2b 	bl	c4b4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    ce5e:	be00      	bkpt	0x0000
}
    ce60:	bf00      	nop
    ce62:	bf00      	nop
    ce64:	0000ec6c 	.word	0x0000ec6c
    ce68:	0000ec6c 	.word	0x0000ec6c
    ce6c:	e000ed08 	.word	0xe000ed08
    ce70:	0000c000 	.word	0x0000c000
    ce74:	e000ed88 	.word	0xe000ed88
    ce78:	0000f26c 	.word	0x0000f26c
    ce7c:	10000000 	.word	0x10000000
    ce80:	1000020c 	.word	0x1000020c
    ce84:	10000210 	.word	0x10000210
    ce88:	10000b40 	.word	0x10000b40

0000ce8c <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    ce8c:	b480      	push	{r7}
    ce8e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce90:	e7fe      	b.n	ce90 <NMI_Handler+0x4>

0000ce92 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
    ce92:	b480      	push	{r7}
    ce94:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce96:	e7fe      	b.n	ce96 <BusFault_Handler+0x4>

0000ce98 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    ce98:	b480      	push	{r7}
    ce9a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce9c:	e7fe      	b.n	ce9c <DebugMon_Handler+0x4>
	...

0000cea0 <svl_packet_link_read_fn>:
  }
  return retval;
}

void svl_packet_link_read_fn(svl_packet_read_byte_fn_t fn, void *param)
{
    cea0:	b480      	push	{r7}
    cea2:	b083      	sub	sp, #12
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
    cea8:	6039      	str	r1, [r7, #0]
  read_param = param;
    ceaa:	4a06      	ldr	r2, [pc, #24]	; (cec4 <svl_packet_link_read_fn+0x24>)
    ceac:	683b      	ldr	r3, [r7, #0]
    ceae:	6013      	str	r3, [r2, #0]
  read_fn = fn;
    ceb0:	4a05      	ldr	r2, [pc, #20]	; (cec8 <svl_packet_link_read_fn+0x28>)
    ceb2:	687b      	ldr	r3, [r7, #4]
    ceb4:	6013      	str	r3, [r2, #0]
}
    ceb6:	bf00      	nop
    ceb8:	370c      	adds	r7, #12
    ceba:	46bd      	mov	sp, r7
    cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cec0:	4770      	bx	lr
    cec2:	bf00      	nop
    cec4:	10000a40 	.word	0x10000a40
    cec8:	10000a4c 	.word	0x10000a4c

0000cecc <svl_packet_link_write_fn>:

void svl_packet_link_write_fn(svl_packet_write_byte_fn_t fn, void *param)
{
    cecc:	b480      	push	{r7}
    cece:	b083      	sub	sp, #12
    ced0:	af00      	add	r7, sp, #0
    ced2:	6078      	str	r0, [r7, #4]
    ced4:	6039      	str	r1, [r7, #0]
  write_param = param;
    ced6:	4a06      	ldr	r2, [pc, #24]	; (cef0 <svl_packet_link_write_fn+0x24>)
    ced8:	683b      	ldr	r3, [r7, #0]
    ceda:	6013      	str	r3, [r2, #0]
  write_fn = fn;
    cedc:	4a05      	ldr	r2, [pc, #20]	; (cef4 <svl_packet_link_write_fn+0x28>)
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	6013      	str	r3, [r2, #0]
}
    cee2:	bf00      	nop
    cee4:	370c      	adds	r7, #12
    cee6:	46bd      	mov	sp, r7
    cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    ceec:	4770      	bx	lr
    ceee:	bf00      	nop
    cef0:	10000a44 	.word	0x10000a44
    cef4:	10000a50 	.word	0x10000a50

0000cef8 <svl_packet_link_avail_fn>:

void svl_packet_link_avail_fn(svl_packet_avail_bytes_fn_t fn, void *param)
{
    cef8:	b480      	push	{r7}
    cefa:	b083      	sub	sp, #12
    cefc:	af00      	add	r7, sp, #0
    cefe:	6078      	str	r0, [r7, #4]
    cf00:	6039      	str	r1, [r7, #0]
  avail_param = param;
    cf02:	4a06      	ldr	r2, [pc, #24]	; (cf1c <svl_packet_link_avail_fn+0x24>)
    cf04:	683b      	ldr	r3, [r7, #0]
    cf06:	6013      	str	r3, [r2, #0]
  avail_fn = fn;
    cf08:	4a05      	ldr	r2, [pc, #20]	; (cf20 <svl_packet_link_avail_fn+0x28>)
    cf0a:	687b      	ldr	r3, [r7, #4]
    cf0c:	6013      	str	r3, [r2, #0]
}
    cf0e:	bf00      	nop
    cf10:	370c      	adds	r7, #12
    cf12:	46bd      	mov	sp, r7
    cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf18:	4770      	bx	lr
    cf1a:	bf00      	nop
    cf1c:	10000a48 	.word	0x10000a48
    cf20:	10000a54 	.word	0x10000a54

0000cf24 <svl_packet_link_millis_fn>:

void svl_packet_link_millis_fn(svl_packet_millis_fn_t fn)
{
    cf24:	b480      	push	{r7}
    cf26:	b083      	sub	sp, #12
    cf28:	af00      	add	r7, sp, #0
    cf2a:	6078      	str	r0, [r7, #4]
  millis_fn = fn;
    cf2c:	4a04      	ldr	r2, [pc, #16]	; (cf40 <svl_packet_link_millis_fn+0x1c>)
    cf2e:	687b      	ldr	r3, [r7, #4]
    cf30:	6013      	str	r3, [r2, #0]
}
    cf32:	bf00      	nop
    cf34:	370c      	adds	r7, #12
    cf36:	46bd      	mov	sp, r7
    cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf3c:	4770      	bx	lr
    cf3e:	bf00      	nop
    cf40:	10000a58 	.word	0x10000a58

0000cf44 <svl_packet_send>:

void svl_packet_send(svl_packet_t *packet)
{
    cf44:	b580      	push	{r7, lr}
    cf46:	b092      	sub	sp, #72	; 0x48
    cf48:	af00      	add	r7, sp, #0
    cf4a:	6078      	str	r0, [r7, #4]
  CRCL = 0;
    cf4c:	4b72      	ldr	r3, [pc, #456]	; (d118 <svl_packet_send+0x1d4>)
    cf4e:	2200      	movs	r2, #0
    cf50:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    cf52:	4b72      	ldr	r3, [pc, #456]	; (d11c <svl_packet_send+0x1d8>)
    cf54:	2200      	movs	r2, #0
    cf56:	701a      	strb	r2, [r3, #0]
  updateCRC(packet->cmd); //Add this byte to CRC
    cf58:	687b      	ldr	r3, [r7, #4]
    cf5a:	781b      	ldrb	r3, [r3, #0]
    cf5c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint16_t tableAddr = (num ^ CRCH);
    cf60:	4b6e      	ldr	r3, [pc, #440]	; (d11c <svl_packet_send+0x1d8>)
    cf62:	781a      	ldrb	r2, [r3, #0]
    cf64:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    cf68:	4053      	eors	r3, r2
    cf6a:	b2db      	uxtb	r3, r3
    cf6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cf6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cf70:	4a6b      	ldr	r2, [pc, #428]	; (d120 <svl_packet_send+0x1dc>)
    cf72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf76:	0a1b      	lsrs	r3, r3, #8
    cf78:	b29b      	uxth	r3, r3
    cf7a:	b2da      	uxtb	r2, r3
    cf7c:	4b66      	ldr	r3, [pc, #408]	; (d118 <svl_packet_send+0x1d4>)
    cf7e:	781b      	ldrb	r3, [r3, #0]
    cf80:	4053      	eors	r3, r2
    cf82:	b2da      	uxtb	r2, r3
    cf84:	4b65      	ldr	r3, [pc, #404]	; (d11c <svl_packet_send+0x1d8>)
    cf86:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cf88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cf8a:	4a65      	ldr	r2, [pc, #404]	; (d120 <svl_packet_send+0x1dc>)
    cf8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf90:	b2da      	uxtb	r2, r3
    cf92:	4b61      	ldr	r3, [pc, #388]	; (d118 <svl_packet_send+0x1d4>)
    cf94:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cf96:	2300      	movs	r3, #0
    cf98:	647b      	str	r3, [r7, #68]	; 0x44
    cf9a:	e024      	b.n	cfe6 <svl_packet_send+0xa2>
  {
    updateCRC(*(packet->pl + x)); //Add this byte to CRC
    cf9c:	687b      	ldr	r3, [r7, #4]
    cf9e:	685a      	ldr	r2, [r3, #4]
    cfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cfa2:	4413      	add	r3, r2
    cfa4:	781b      	ldrb	r3, [r3, #0]
    cfa6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint16_t tableAddr = (num ^ CRCH);
    cfaa:	4b5c      	ldr	r3, [pc, #368]	; (d11c <svl_packet_send+0x1d8>)
    cfac:	781a      	ldrb	r2, [r3, #0]
    cfae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    cfb2:	4053      	eors	r3, r2
    cfb4:	b2db      	uxtb	r3, r3
    cfb6:	877b      	strh	r3, [r7, #58]	; 0x3a
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cfb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cfba:	4a59      	ldr	r2, [pc, #356]	; (d120 <svl_packet_send+0x1dc>)
    cfbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfc0:	0a1b      	lsrs	r3, r3, #8
    cfc2:	b29b      	uxth	r3, r3
    cfc4:	b2da      	uxtb	r2, r3
    cfc6:	4b54      	ldr	r3, [pc, #336]	; (d118 <svl_packet_send+0x1d4>)
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	4053      	eors	r3, r2
    cfcc:	b2da      	uxtb	r2, r3
    cfce:	4b53      	ldr	r3, [pc, #332]	; (d11c <svl_packet_send+0x1d8>)
    cfd0:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cfd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cfd4:	4a52      	ldr	r2, [pc, #328]	; (d120 <svl_packet_send+0x1dc>)
    cfd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfda:	b2da      	uxtb	r2, r3
    cfdc:	4b4e      	ldr	r3, [pc, #312]	; (d118 <svl_packet_send+0x1d4>)
    cfde:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cfe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cfe2:	3301      	adds	r3, #1
    cfe4:	647b      	str	r3, [r7, #68]	; 0x44
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	891b      	ldrh	r3, [r3, #8]
    cfea:	461a      	mov	r2, r3
    cfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cfee:	4293      	cmp	r3, r2
    cff0:	d3d4      	bcc.n	cf9c <svl_packet_send+0x58>
  }

  svl_packet_write_byte(((packet->pl_len + 3) >> 8));   // len high byte (including command and CRC bytes)
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	891b      	ldrh	r3, [r3, #8]
    cff6:	3303      	adds	r3, #3
    cff8:	121b      	asrs	r3, r3, #8
    cffa:	b2db      	uxtb	r3, r3
    cffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  size_t retval = 0x00;
    d000:	2300      	movs	r3, #0
    d002:	627b      	str	r3, [r7, #36]	; 0x24
  if (write_fn != NULL)
    d004:	4b47      	ldr	r3, [pc, #284]	; (d124 <svl_packet_send+0x1e0>)
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	2b00      	cmp	r3, #0
    d00a:	d008      	beq.n	d01e <svl_packet_send+0xda>
    retval = write_fn(write_param, c);
    d00c:	4b45      	ldr	r3, [pc, #276]	; (d124 <svl_packet_send+0x1e0>)
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	4a45      	ldr	r2, [pc, #276]	; (d128 <svl_packet_send+0x1e4>)
    d012:	6812      	ldr	r2, [r2, #0]
    d014:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    d018:	4610      	mov	r0, r2
    d01a:	4798      	blx	r3
    d01c:	6278      	str	r0, [r7, #36]	; 0x24
  svl_packet_write_byte(((packet->pl_len + 3) & 0xFF)); // len low byte  (including command and CRC bytes)
    d01e:	687b      	ldr	r3, [r7, #4]
    d020:	891b      	ldrh	r3, [r3, #8]
    d022:	b2db      	uxtb	r3, r3
    d024:	3303      	adds	r3, #3
    d026:	b2db      	uxtb	r3, r3
    d028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  size_t retval = 0x00;
    d02c:	2300      	movs	r3, #0
    d02e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (write_fn != NULL)
    d030:	4b3c      	ldr	r3, [pc, #240]	; (d124 <svl_packet_send+0x1e0>)
    d032:	681b      	ldr	r3, [r3, #0]
    d034:	2b00      	cmp	r3, #0
    d036:	d008      	beq.n	d04a <svl_packet_send+0x106>
    retval = write_fn(write_param, c);
    d038:	4b3a      	ldr	r3, [pc, #232]	; (d124 <svl_packet_send+0x1e0>)
    d03a:	681b      	ldr	r3, [r3, #0]
    d03c:	4a3a      	ldr	r2, [pc, #232]	; (d128 <svl_packet_send+0x1e4>)
    d03e:	6812      	ldr	r2, [r2, #0]
    d040:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
    d044:	4610      	mov	r0, r2
    d046:	4798      	blx	r3
    d048:	62f8      	str	r0, [r7, #44]	; 0x2c

  svl_packet_write_byte((packet->cmd)); // command byte
    d04a:	687b      	ldr	r3, [r7, #4]
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  size_t retval = 0x00;
    d052:	2300      	movs	r3, #0
    d054:	637b      	str	r3, [r7, #52]	; 0x34
  if (write_fn != NULL)
    d056:	4b33      	ldr	r3, [pc, #204]	; (d124 <svl_packet_send+0x1e0>)
    d058:	681b      	ldr	r3, [r3, #0]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d008      	beq.n	d070 <svl_packet_send+0x12c>
    retval = write_fn(write_param, c);
    d05e:	4b31      	ldr	r3, [pc, #196]	; (d124 <svl_packet_send+0x1e0>)
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	4a31      	ldr	r2, [pc, #196]	; (d128 <svl_packet_send+0x1e4>)
    d064:	6812      	ldr	r2, [r2, #0]
    d066:	f897 1039 	ldrb.w	r1, [r7, #57]	; 0x39
    d06a:	4610      	mov	r0, r2
    d06c:	4798      	blx	r3
    d06e:	6378      	str	r0, [r7, #52]	; 0x34

  if ((packet->pl != NULL) && (packet->pl_len != 0))
    d070:	687b      	ldr	r3, [r7, #4]
    d072:	685b      	ldr	r3, [r3, #4]
    d074:	2b00      	cmp	r3, #0
    d076:	d029      	beq.n	d0cc <svl_packet_send+0x188>
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	891b      	ldrh	r3, [r3, #8]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d025      	beq.n	d0cc <svl_packet_send+0x188>
  {
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    d080:	2300      	movs	r3, #0
    d082:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    d086:	e01b      	b.n	d0c0 <svl_packet_send+0x17c>
    { // payload
      svl_packet_write_byte(*(packet->pl + indi));
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	685a      	ldr	r2, [r3, #4]
    d08c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    d090:	4413      	add	r3, r2
    d092:	781b      	ldrb	r3, [r3, #0]
    d094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t retval = 0x00;
    d098:	2300      	movs	r3, #0
    d09a:	61fb      	str	r3, [r7, #28]
  if (write_fn != NULL)
    d09c:	4b21      	ldr	r3, [pc, #132]	; (d124 <svl_packet_send+0x1e0>)
    d09e:	681b      	ldr	r3, [r3, #0]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d008      	beq.n	d0b6 <svl_packet_send+0x172>
    retval = write_fn(write_param, c);
    d0a4:	4b1f      	ldr	r3, [pc, #124]	; (d124 <svl_packet_send+0x1e0>)
    d0a6:	681b      	ldr	r3, [r3, #0]
    d0a8:	4a1f      	ldr	r2, [pc, #124]	; (d128 <svl_packet_send+0x1e4>)
    d0aa:	6812      	ldr	r2, [r2, #0]
    d0ac:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    d0b0:	4610      	mov	r0, r2
    d0b2:	4798      	blx	r3
    d0b4:	61f8      	str	r0, [r7, #28]
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    d0b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    d0ba:	3301      	adds	r3, #1
    d0bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    d0c0:	687b      	ldr	r3, [r7, #4]
    d0c2:	891b      	ldrh	r3, [r3, #8]
    d0c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
    d0c8:	429a      	cmp	r2, r3
    d0ca:	d3dd      	bcc.n	d088 <svl_packet_send+0x144>
    }
  }

  svl_packet_write_byte(CRCH); // CRC H
    d0cc:	4b13      	ldr	r3, [pc, #76]	; (d11c <svl_packet_send+0x1d8>)
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	74fb      	strb	r3, [r7, #19]
  size_t retval = 0x00;
    d0d2:	2300      	movs	r3, #0
    d0d4:	60fb      	str	r3, [r7, #12]
  if (write_fn != NULL)
    d0d6:	4b13      	ldr	r3, [pc, #76]	; (d124 <svl_packet_send+0x1e0>)
    d0d8:	681b      	ldr	r3, [r3, #0]
    d0da:	2b00      	cmp	r3, #0
    d0dc:	d007      	beq.n	d0ee <svl_packet_send+0x1aa>
    retval = write_fn(write_param, c);
    d0de:	4b11      	ldr	r3, [pc, #68]	; (d124 <svl_packet_send+0x1e0>)
    d0e0:	681b      	ldr	r3, [r3, #0]
    d0e2:	4a11      	ldr	r2, [pc, #68]	; (d128 <svl_packet_send+0x1e4>)
    d0e4:	6812      	ldr	r2, [r2, #0]
    d0e6:	7cf9      	ldrb	r1, [r7, #19]
    d0e8:	4610      	mov	r0, r2
    d0ea:	4798      	blx	r3
    d0ec:	60f8      	str	r0, [r7, #12]
  svl_packet_write_byte(CRCL); // CRC L
    d0ee:	4b0a      	ldr	r3, [pc, #40]	; (d118 <svl_packet_send+0x1d4>)
    d0f0:	781b      	ldrb	r3, [r3, #0]
    d0f2:	76fb      	strb	r3, [r7, #27]
  size_t retval = 0x00;
    d0f4:	2300      	movs	r3, #0
    d0f6:	617b      	str	r3, [r7, #20]
  if (write_fn != NULL)
    d0f8:	4b0a      	ldr	r3, [pc, #40]	; (d124 <svl_packet_send+0x1e0>)
    d0fa:	681b      	ldr	r3, [r3, #0]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d007      	beq.n	d110 <svl_packet_send+0x1cc>
    retval = write_fn(write_param, c);
    d100:	4b08      	ldr	r3, [pc, #32]	; (d124 <svl_packet_send+0x1e0>)
    d102:	681b      	ldr	r3, [r3, #0]
    d104:	4a08      	ldr	r2, [pc, #32]	; (d128 <svl_packet_send+0x1e4>)
    d106:	6812      	ldr	r2, [r2, #0]
    d108:	7ef9      	ldrb	r1, [r7, #27]
    d10a:	4610      	mov	r0, r2
    d10c:	4798      	blx	r3
    d10e:	6178      	str	r0, [r7, #20]
}
    d110:	bf00      	nop
    d112:	3748      	adds	r7, #72	; 0x48
    d114:	46bd      	mov	sp, r7
    d116:	bd80      	pop	{r7, pc}
    d118:	10000a74 	.word	0x10000a74
    d11c:	10000a75 	.word	0x10000a75
    d120:	10000000 	.word	0x10000000
    d124:	10000a50 	.word	0x10000a50
    d128:	10000a44 	.word	0x10000a44

0000d12c <svl_packet_wait>:

uint8_t svl_packet_wait(svl_packet_t *packet)
{
    d12c:	b580      	push	{r7, lr}
    d12e:	b08c      	sub	sp, #48	; 0x30
    d130:	af00      	add	r7, sp, #0
    d132:	6078      	str	r0, [r7, #4]

  // wait for 2 bytes (the length bytes)
  // wait for length bytes to come in
  // make sure that 'length' bytes are enough to satisfy the desired payload length

  if (packet == NULL)
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	2b00      	cmp	r3, #0
    d138:	d101      	bne.n	d13e <svl_packet_wait+0x12>
  {
    return (SVL_PACKET_ERR);
    d13a:	2301      	movs	r3, #1
    d13c:	e0bf      	b.n	d2be <svl_packet_wait+0x192>
  }

  const uint8_t num_bytes_length = 2;
    d13e:	2302      	movs	r3, #2
    d140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (svl_packet_wait_bytes(num_bytes_length))
    d144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d148:	4618      	mov	r0, r3
    d14a:	f000 f8ff 	bl	d34c <svl_packet_wait_bytes>
    d14e:	4603      	mov	r3, r0
    d150:	2b00      	cmp	r3, #0
    d152:	d001      	beq.n	d158 <svl_packet_wait+0x2c>
  {
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_LEN);
    d154:	2382      	movs	r3, #130	; 0x82
    d156:	e0b2      	b.n	d2be <svl_packet_wait+0x192>
  }
  uint16_t len = svl_packet_get_uint16_t();
    d158:	f000 f8c0 	bl	d2dc <svl_packet_get_uint16_t>
    d15c:	4603      	mov	r3, r0
    d15e:	853b      	strh	r3, [r7, #40]	; 0x28

  if (len == 0)
    d160:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d162:	2b00      	cmp	r3, #0
    d164:	d101      	bne.n	d16a <svl_packet_wait+0x3e>
  {
    return (SVL_PACKET_ERR_ZLP);
    d166:	2304      	movs	r3, #4
    d168:	e0a9      	b.n	d2be <svl_packet_wait+0x192>
  }
  if ((len - 3) > packet->max_pl_len)
    d16a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d16c:	3b03      	subs	r3, #3
    d16e:	687a      	ldr	r2, [r7, #4]
    d170:	8952      	ldrh	r2, [r2, #10]
    d172:	4293      	cmp	r3, r2
    d174:	dd01      	ble.n	d17a <svl_packet_wait+0x4e>
  {
    return (SVL_PACKET_ERR_MEM | SVL_PACKET_PL);
    d176:	2348      	movs	r3, #72	; 0x48
    d178:	e0a1      	b.n	d2be <svl_packet_wait+0x192>
  }

  //Wait for entire packet to come in
  if (svl_packet_wait_bytes(len))
    d17a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d17c:	4618      	mov	r0, r3
    d17e:	f000 f8e5 	bl	d34c <svl_packet_wait_bytes>
    d182:	4603      	mov	r3, r0
    d184:	2b00      	cmp	r3, #0
    d186:	d001      	beq.n	d18c <svl_packet_wait+0x60>
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_PL);
    d188:	2342      	movs	r3, #66	; 0x42
    d18a:	e098      	b.n	d2be <svl_packet_wait+0x192>

  uint8_t incoming;
  CRCL = 0;
    d18c:	4b4e      	ldr	r3, [pc, #312]	; (d2c8 <svl_packet_wait+0x19c>)
    d18e:	2200      	movs	r2, #0
    d190:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    d192:	4b4e      	ldr	r3, [pc, #312]	; (d2cc <svl_packet_wait+0x1a0>)
    d194:	2200      	movs	r2, #0
    d196:	701a      	strb	r2, [r3, #0]
    d198:	f107 030b 	add.w	r3, r7, #11
    d19c:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d19e:	2300      	movs	r3, #0
    d1a0:	61bb      	str	r3, [r7, #24]
  if (read_fn != NULL)
    d1a2:	4b4b      	ldr	r3, [pc, #300]	; (d2d0 <svl_packet_wait+0x1a4>)
    d1a4:	681b      	ldr	r3, [r3, #0]
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d007      	beq.n	d1ba <svl_packet_wait+0x8e>
    retval = read_fn(read_param, c);
    d1aa:	4b49      	ldr	r3, [pc, #292]	; (d2d0 <svl_packet_wait+0x1a4>)
    d1ac:	681b      	ldr	r3, [r3, #0]
    d1ae:	4a49      	ldr	r2, [pc, #292]	; (d2d4 <svl_packet_wait+0x1a8>)
    d1b0:	6812      	ldr	r2, [r2, #0]
    d1b2:	69f9      	ldr	r1, [r7, #28]
    d1b4:	4610      	mov	r0, r2
    d1b6:	4798      	blx	r3
    d1b8:	61b8      	str	r0, [r7, #24]

  //Get command byte
  svl_packet_read_byte(&incoming);
  packet->cmd = incoming;
    d1ba:	7afa      	ldrb	r2, [r7, #11]
    d1bc:	687b      	ldr	r3, [r7, #4]
    d1be:	701a      	strb	r2, [r3, #0]
  updateCRC(incoming); //Add this byte to CRC
    d1c0:	7afb      	ldrb	r3, [r7, #11]
    d1c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t tableAddr = (num ^ CRCH);
    d1c6:	4b41      	ldr	r3, [pc, #260]	; (d2cc <svl_packet_wait+0x1a0>)
    d1c8:	781a      	ldrb	r2, [r3, #0]
    d1ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    d1ce:	4053      	eors	r3, r2
    d1d0:	b2db      	uxtb	r3, r3
    d1d2:	843b      	strh	r3, [r7, #32]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d1d4:	8c3b      	ldrh	r3, [r7, #32]
    d1d6:	4a40      	ldr	r2, [pc, #256]	; (d2d8 <svl_packet_wait+0x1ac>)
    d1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1dc:	0a1b      	lsrs	r3, r3, #8
    d1de:	b29b      	uxth	r3, r3
    d1e0:	b2da      	uxtb	r2, r3
    d1e2:	4b39      	ldr	r3, [pc, #228]	; (d2c8 <svl_packet_wait+0x19c>)
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	4053      	eors	r3, r2
    d1e8:	b2da      	uxtb	r2, r3
    d1ea:	4b38      	ldr	r3, [pc, #224]	; (d2cc <svl_packet_wait+0x1a0>)
    d1ec:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d1ee:	8c3b      	ldrh	r3, [r7, #32]
    d1f0:	4a39      	ldr	r2, [pc, #228]	; (d2d8 <svl_packet_wait+0x1ac>)
    d1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1f6:	b2da      	uxtb	r2, r3
    d1f8:	4b33      	ldr	r3, [pc, #204]	; (d2c8 <svl_packet_wait+0x19c>)
    d1fa:	701a      	strb	r2, [r3, #0]

  packet->pl_len = (len - 3);
    d1fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d1fe:	3b03      	subs	r3, #3
    d200:	b29a      	uxth	r2, r3
    d202:	687b      	ldr	r3, [r7, #4]
    d204:	811a      	strh	r2, [r3, #8]

  //Now read the data coming in
  if ((packet->pl != NULL) && (packet->max_pl_len != 0))
    d206:	687b      	ldr	r3, [r7, #4]
    d208:	685b      	ldr	r3, [r3, #4]
    d20a:	2b00      	cmp	r3, #0
    d20c:	d042      	beq.n	d294 <svl_packet_wait+0x168>
    d20e:	687b      	ldr	r3, [r7, #4]
    d210:	895b      	ldrh	r3, [r3, #10]
    d212:	2b00      	cmp	r3, #0
    d214:	d03e      	beq.n	d294 <svl_packet_wait+0x168>
  {
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d216:	2300      	movs	r3, #0
    d218:	62fb      	str	r3, [r7, #44]	; 0x2c
    d21a:	e035      	b.n	d288 <svl_packet_wait+0x15c>
    d21c:	f107 030b 	add.w	r3, r7, #11
    d220:	613b      	str	r3, [r7, #16]
  size_t retval = 0x00;
    d222:	2300      	movs	r3, #0
    d224:	60fb      	str	r3, [r7, #12]
  if (read_fn != NULL)
    d226:	4b2a      	ldr	r3, [pc, #168]	; (d2d0 <svl_packet_wait+0x1a4>)
    d228:	681b      	ldr	r3, [r3, #0]
    d22a:	2b00      	cmp	r3, #0
    d22c:	d007      	beq.n	d23e <svl_packet_wait+0x112>
    retval = read_fn(read_param, c);
    d22e:	4b28      	ldr	r3, [pc, #160]	; (d2d0 <svl_packet_wait+0x1a4>)
    d230:	681b      	ldr	r3, [r3, #0]
    d232:	4a28      	ldr	r2, [pc, #160]	; (d2d4 <svl_packet_wait+0x1a8>)
    d234:	6812      	ldr	r2, [r2, #0]
    d236:	6939      	ldr	r1, [r7, #16]
    d238:	4610      	mov	r0, r2
    d23a:	4798      	blx	r3
    d23c:	60f8      	str	r0, [r7, #12]
    {
      svl_packet_read_byte(&incoming);

      updateCRC(incoming); //Add this byte to CRC
    d23e:	7afb      	ldrb	r3, [r7, #11]
    d240:	75fb      	strb	r3, [r7, #23]
  uint16_t tableAddr = (num ^ CRCH);
    d242:	4b22      	ldr	r3, [pc, #136]	; (d2cc <svl_packet_wait+0x1a0>)
    d244:	781a      	ldrb	r2, [r3, #0]
    d246:	7dfb      	ldrb	r3, [r7, #23]
    d248:	4053      	eors	r3, r2
    d24a:	b2db      	uxtb	r3, r3
    d24c:	82bb      	strh	r3, [r7, #20]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d24e:	8abb      	ldrh	r3, [r7, #20]
    d250:	4a21      	ldr	r2, [pc, #132]	; (d2d8 <svl_packet_wait+0x1ac>)
    d252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d256:	0a1b      	lsrs	r3, r3, #8
    d258:	b29b      	uxth	r3, r3
    d25a:	b2da      	uxtb	r2, r3
    d25c:	4b1a      	ldr	r3, [pc, #104]	; (d2c8 <svl_packet_wait+0x19c>)
    d25e:	781b      	ldrb	r3, [r3, #0]
    d260:	4053      	eors	r3, r2
    d262:	b2da      	uxtb	r2, r3
    d264:	4b19      	ldr	r3, [pc, #100]	; (d2cc <svl_packet_wait+0x1a0>)
    d266:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d268:	8abb      	ldrh	r3, [r7, #20]
    d26a:	4a1b      	ldr	r2, [pc, #108]	; (d2d8 <svl_packet_wait+0x1ac>)
    d26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d270:	b2da      	uxtb	r2, r3
    d272:	4b15      	ldr	r3, [pc, #84]	; (d2c8 <svl_packet_wait+0x19c>)
    d274:	701a      	strb	r2, [r3, #0]

      *(packet->pl + x) = incoming; //Fill payload with data
    d276:	687b      	ldr	r3, [r7, #4]
    d278:	685a      	ldr	r2, [r3, #4]
    d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d27c:	4413      	add	r3, r2
    d27e:	7afa      	ldrb	r2, [r7, #11]
    d280:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d284:	3301      	adds	r3, #1
    d286:	62fb      	str	r3, [r7, #44]	; 0x2c
    d288:	687b      	ldr	r3, [r7, #4]
    d28a:	891b      	ldrh	r3, [r3, #8]
    d28c:	461a      	mov	r2, r3
    d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d290:	4293      	cmp	r3, r2
    d292:	d3c3      	bcc.n	d21c <svl_packet_wait+0xf0>
    }
  }

  uint16_t crc = svl_packet_get_uint16_t(); //Read final two bytes into CRC
    d294:	f000 f822 	bl	d2dc <svl_packet_get_uint16_t>
    d298:	4603      	mov	r3, r0
    d29a:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t check = ((uint16_t)CRCH << 8) | CRCL;
    d29c:	4b0b      	ldr	r3, [pc, #44]	; (d2cc <svl_packet_wait+0x1a0>)
    d29e:	781b      	ldrb	r3, [r3, #0]
    d2a0:	021b      	lsls	r3, r3, #8
    d2a2:	b21a      	sxth	r2, r3
    d2a4:	4b08      	ldr	r3, [pc, #32]	; (d2c8 <svl_packet_wait+0x19c>)
    d2a6:	781b      	ldrb	r3, [r3, #0]
    d2a8:	b21b      	sxth	r3, r3
    d2aa:	4313      	orrs	r3, r2
    d2ac:	b21b      	sxth	r3, r3
    d2ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (crc != check)
    d2b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    d2b4:	429a      	cmp	r2, r3
    d2b6:	d001      	beq.n	d2bc <svl_packet_wait+0x190>
  {
    return (SVL_PACKET_ERR_CRC);
    d2b8:	2310      	movs	r3, #16
    d2ba:	e000      	b.n	d2be <svl_packet_wait+0x192>
  }

  return (SVL_PACKET_OK);
    d2bc:	2300      	movs	r3, #0
}
    d2be:	4618      	mov	r0, r3
    d2c0:	3730      	adds	r7, #48	; 0x30
    d2c2:	46bd      	mov	sp, r7
    d2c4:	bd80      	pop	{r7, pc}
    d2c6:	bf00      	nop
    d2c8:	10000a74 	.word	0x10000a74
    d2cc:	10000a75 	.word	0x10000a75
    d2d0:	10000a4c 	.word	0x10000a4c
    d2d4:	10000a40 	.word	0x10000a40
    d2d8:	10000000 	.word	0x10000000

0000d2dc <svl_packet_get_uint16_t>:

uint16_t svl_packet_get_uint16_t(void)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b086      	sub	sp, #24
    d2e0:	af00      	add	r7, sp, #0
  uint8_t h = 0x00;
    d2e2:	2300      	movs	r3, #0
    d2e4:	71fb      	strb	r3, [r7, #7]
  uint8_t l = 0x00;
    d2e6:	2300      	movs	r3, #0
    d2e8:	71bb      	strb	r3, [r7, #6]
    d2ea:	1dfb      	adds	r3, r7, #7
    d2ec:	60fb      	str	r3, [r7, #12]
  size_t retval = 0x00;
    d2ee:	2300      	movs	r3, #0
    d2f0:	60bb      	str	r3, [r7, #8]
  if (read_fn != NULL)
    d2f2:	4b14      	ldr	r3, [pc, #80]	; (d344 <svl_packet_get_uint16_t+0x68>)
    d2f4:	681b      	ldr	r3, [r3, #0]
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d007      	beq.n	d30a <svl_packet_get_uint16_t+0x2e>
    retval = read_fn(read_param, c);
    d2fa:	4b12      	ldr	r3, [pc, #72]	; (d344 <svl_packet_get_uint16_t+0x68>)
    d2fc:	681b      	ldr	r3, [r3, #0]
    d2fe:	4a12      	ldr	r2, [pc, #72]	; (d348 <svl_packet_get_uint16_t+0x6c>)
    d300:	6812      	ldr	r2, [r2, #0]
    d302:	68f9      	ldr	r1, [r7, #12]
    d304:	4610      	mov	r0, r2
    d306:	4798      	blx	r3
    d308:	60b8      	str	r0, [r7, #8]
    d30a:	1dbb      	adds	r3, r7, #6
    d30c:	617b      	str	r3, [r7, #20]
  size_t retval = 0x00;
    d30e:	2300      	movs	r3, #0
    d310:	613b      	str	r3, [r7, #16]
  if (read_fn != NULL)
    d312:	4b0c      	ldr	r3, [pc, #48]	; (d344 <svl_packet_get_uint16_t+0x68>)
    d314:	681b      	ldr	r3, [r3, #0]
    d316:	2b00      	cmp	r3, #0
    d318:	d007      	beq.n	d32a <svl_packet_get_uint16_t+0x4e>
    retval = read_fn(read_param, c);
    d31a:	4b0a      	ldr	r3, [pc, #40]	; (d344 <svl_packet_get_uint16_t+0x68>)
    d31c:	681b      	ldr	r3, [r3, #0]
    d31e:	4a0a      	ldr	r2, [pc, #40]	; (d348 <svl_packet_get_uint16_t+0x6c>)
    d320:	6812      	ldr	r2, [r2, #0]
    d322:	6979      	ldr	r1, [r7, #20]
    d324:	4610      	mov	r0, r2
    d326:	4798      	blx	r3
    d328:	6138      	str	r0, [r7, #16]
  svl_packet_read_byte(&h);
  svl_packet_read_byte(&l);
  return (((uint16_t)h << 8) | (l & 0xFF));
    d32a:	79fb      	ldrb	r3, [r7, #7]
    d32c:	021b      	lsls	r3, r3, #8
    d32e:	b21a      	sxth	r2, r3
    d330:	79bb      	ldrb	r3, [r7, #6]
    d332:	b21b      	sxth	r3, r3
    d334:	4313      	orrs	r3, r2
    d336:	b21b      	sxth	r3, r3
    d338:	b29b      	uxth	r3, r3
}
    d33a:	4618      	mov	r0, r3
    d33c:	3718      	adds	r7, #24
    d33e:	46bd      	mov	sp, r7
    d340:	bd80      	pop	{r7, pc}
    d342:	bf00      	nop
    d344:	10000a4c 	.word	0x10000a4c
    d348:	10000a40 	.word	0x10000a40

0000d34c <svl_packet_wait_bytes>:

uint8_t svl_packet_wait_bytes(uint32_t num)
{
    d34c:	b580      	push	{r7, lr}
    d34e:	b088      	sub	sp, #32
    d350:	af00      	add	r7, sp, #0
    d352:	6078      	str	r0, [r7, #4]
  uint32_t timeout_ms = 500;
    d354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d358:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d35a:	2300      	movs	r3, #0
    d35c:	613b      	str	r3, [r7, #16]
  if (millis_fn != NULL)
    d35e:	4b1b      	ldr	r3, [pc, #108]	; (d3cc <svl_packet_wait_bytes+0x80>)
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	2b00      	cmp	r3, #0
    d364:	d003      	beq.n	d36e <svl_packet_wait_bytes+0x22>
    retval = millis_fn();
    d366:	4b19      	ldr	r3, [pc, #100]	; (d3cc <svl_packet_wait_bytes+0x80>)
    d368:	681b      	ldr	r3, [r3, #0]
    d36a:	4798      	blx	r3
    d36c:	6138      	str	r0, [r7, #16]
  return retval;
    d36e:	693b      	ldr	r3, [r7, #16]
  uint32_t start = svl_packet_millis();
    d370:	61bb      	str	r3, [r7, #24]
  uint32_t avail = 0;
    d372:	2300      	movs	r3, #0
    d374:	617b      	str	r3, [r7, #20]

  while ((svl_packet_millis() - start) < timeout_ms)
    d376:	e014      	b.n	d3a2 <svl_packet_wait_bytes+0x56>
  size_t retval = 0x00;
    d378:	2300      	movs	r3, #0
    d37a:	60fb      	str	r3, [r7, #12]
  if (avail_fn != NULL)
    d37c:	4b14      	ldr	r3, [pc, #80]	; (d3d0 <svl_packet_wait_bytes+0x84>)
    d37e:	681b      	ldr	r3, [r3, #0]
    d380:	2b00      	cmp	r3, #0
    d382:	d006      	beq.n	d392 <svl_packet_wait_bytes+0x46>
    retval = avail_fn(avail_param);
    d384:	4b12      	ldr	r3, [pc, #72]	; (d3d0 <svl_packet_wait_bytes+0x84>)
    d386:	681b      	ldr	r3, [r3, #0]
    d388:	4a12      	ldr	r2, [pc, #72]	; (d3d4 <svl_packet_wait_bytes+0x88>)
    d38a:	6812      	ldr	r2, [r2, #0]
    d38c:	4610      	mov	r0, r2
    d38e:	4798      	blx	r3
    d390:	60f8      	str	r0, [r7, #12]
  return retval;
    d392:	68fb      	ldr	r3, [r7, #12]
  {
    avail = svl_packet_avail_bytes();
    d394:	617b      	str	r3, [r7, #20]
    if (avail >= num)
    d396:	697a      	ldr	r2, [r7, #20]
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	429a      	cmp	r2, r3
    d39c:	d301      	bcc.n	d3a2 <svl_packet_wait_bytes+0x56>
    {
      return 0;
    d39e:	2300      	movs	r3, #0
    d3a0:	e010      	b.n	d3c4 <svl_packet_wait_bytes+0x78>
  size_t retval = 0x00;
    d3a2:	2300      	movs	r3, #0
    d3a4:	60bb      	str	r3, [r7, #8]
  if (millis_fn != NULL)
    d3a6:	4b09      	ldr	r3, [pc, #36]	; (d3cc <svl_packet_wait_bytes+0x80>)
    d3a8:	681b      	ldr	r3, [r3, #0]
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d003      	beq.n	d3b6 <svl_packet_wait_bytes+0x6a>
    retval = millis_fn();
    d3ae:	4b07      	ldr	r3, [pc, #28]	; (d3cc <svl_packet_wait_bytes+0x80>)
    d3b0:	681b      	ldr	r3, [r3, #0]
    d3b2:	4798      	blx	r3
    d3b4:	60b8      	str	r0, [r7, #8]
  return retval;
    d3b6:	68ba      	ldr	r2, [r7, #8]
  while ((svl_packet_millis() - start) < timeout_ms)
    d3b8:	69bb      	ldr	r3, [r7, #24]
    d3ba:	1ad3      	subs	r3, r2, r3
    d3bc:	69fa      	ldr	r2, [r7, #28]
    d3be:	429a      	cmp	r2, r3
    d3c0:	d8da      	bhi.n	d378 <svl_packet_wait_bytes+0x2c>
    }
  }

  // debug_printf("only got %d bytes...\n",avail);
  return 1;
    d3c2:	2301      	movs	r3, #1
    d3c4:	4618      	mov	r0, r3
    d3c6:	3720      	adds	r7, #32
    d3c8:	46bd      	mov	sp, r7
    d3ca:	bd80      	pop	{r7, pc}
    d3cc:	10000a58 	.word	0x10000a58
    d3d0:	10000a54 	.word	0x10000a54
    d3d4:	10000a48 	.word	0x10000a48

0000d3d8 <art_svl_ringbuf_init>:
#include "svl_ringbuf.h"

size_t art_svl_ringbuf_init( void* vrb, uint8_t* buf, size_t len ){
    d3d8:	b480      	push	{r7}
    d3da:	b087      	sub	sp, #28
    d3dc:	af00      	add	r7, sp, #0
    d3de:	60f8      	str	r0, [r7, #12]
    d3e0:	60b9      	str	r1, [r7, #8]
    d3e2:	607a      	str	r2, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d3e4:	68fb      	ldr	r3, [r7, #12]
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d101      	bne.n	d3ee <art_svl_ringbuf_init+0x16>
    d3ea:	2300      	movs	r3, #0
    d3ec:	e00f      	b.n	d40e <art_svl_ringbuf_init+0x36>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d3ee:	68fb      	ldr	r3, [r7, #12]
    d3f0:	617b      	str	r3, [r7, #20]
    
    rb->buf = buf;
    d3f2:	697b      	ldr	r3, [r7, #20]
    d3f4:	68ba      	ldr	r2, [r7, #8]
    d3f6:	601a      	str	r2, [r3, #0]
    rb->len = len;
    d3f8:	697b      	ldr	r3, [r7, #20]
    d3fa:	687a      	ldr	r2, [r7, #4]
    d3fc:	605a      	str	r2, [r3, #4]
    rb->r_offset = 0;
    d3fe:	697b      	ldr	r3, [r7, #20]
    d400:	2200      	movs	r2, #0
    d402:	609a      	str	r2, [r3, #8]
    rb->w_offset = 0;
    d404:	697b      	ldr	r3, [r7, #20]
    d406:	2200      	movs	r2, #0
    d408:	60da      	str	r2, [r3, #12]

    return rb->len;
    d40a:	697b      	ldr	r3, [r7, #20]
    d40c:	685b      	ldr	r3, [r3, #4]
}
    d40e:	4618      	mov	r0, r3
    d410:	371c      	adds	r7, #28
    d412:	46bd      	mov	sp, r7
    d414:	f85d 7b04 	ldr.w	r7, [sp], #4
    d418:	4770      	bx	lr

0000d41a <art_svl_ringbuf_available>:

size_t art_svl_ringbuf_available( void* vrb ){
    d41a:	b480      	push	{r7}
    d41c:	b085      	sub	sp, #20
    d41e:	af00      	add	r7, sp, #0
    d420:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d422:	687b      	ldr	r3, [r7, #4]
    d424:	2b00      	cmp	r3, #0
    d426:	d101      	bne.n	d42c <art_svl_ringbuf_available+0x12>
    d428:	2300      	movs	r3, #0
    d42a:	e01a      	b.n	d462 <art_svl_ringbuf_available+0x48>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	60bb      	str	r3, [r7, #8]

    size_t avail = 0x00;
    d430:	2300      	movs	r3, #0
    d432:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d434:	68bb      	ldr	r3, [r7, #8]
    d436:	68da      	ldr	r2, [r3, #12]
    d438:	68bb      	ldr	r3, [r7, #8]
    d43a:	689b      	ldr	r3, [r3, #8]
    d43c:	429a      	cmp	r2, r3
    d43e:	d306      	bcc.n	d44e <art_svl_ringbuf_available+0x34>
        avail = rb->w_offset - rb->r_offset;
    d440:	68bb      	ldr	r3, [r7, #8]
    d442:	68da      	ldr	r2, [r3, #12]
    d444:	68bb      	ldr	r3, [r7, #8]
    d446:	689b      	ldr	r3, [r3, #8]
    d448:	1ad3      	subs	r3, r2, r3
    d44a:	60fb      	str	r3, [r7, #12]
    d44c:	e008      	b.n	d460 <art_svl_ringbuf_available+0x46>
    }else{
        avail = rb->len - (rb->r_offset - rb->w_offset);
    d44e:	68bb      	ldr	r3, [r7, #8]
    d450:	685a      	ldr	r2, [r3, #4]
    d452:	68bb      	ldr	r3, [r7, #8]
    d454:	68d9      	ldr	r1, [r3, #12]
    d456:	68bb      	ldr	r3, [r7, #8]
    d458:	689b      	ldr	r3, [r3, #8]
    d45a:	1acb      	subs	r3, r1, r3
    d45c:	4413      	add	r3, r2
    d45e:	60fb      	str	r3, [r7, #12]
    }
    return avail;
    d460:	68fb      	ldr	r3, [r7, #12]
}
    d462:	4618      	mov	r0, r3
    d464:	3714      	adds	r7, #20
    d466:	46bd      	mov	sp, r7
    d468:	f85d 7b04 	ldr.w	r7, [sp], #4
    d46c:	4770      	bx	lr

0000d46e <art_svl_ringbuf_bytes_free>:

size_t art_svl_ringbuf_bytes_free( void* vrb ){
    d46e:	b480      	push	{r7}
    d470:	b085      	sub	sp, #20
    d472:	af00      	add	r7, sp, #0
    d474:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d476:	687b      	ldr	r3, [r7, #4]
    d478:	2b00      	cmp	r3, #0
    d47a:	d101      	bne.n	d480 <art_svl_ringbuf_bytes_free+0x12>
    d47c:	2300      	movs	r3, #0
    d47e:	e01c      	b.n	d4ba <art_svl_ringbuf_bytes_free+0x4c>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	60bb      	str	r3, [r7, #8]

    size_t friegh = 0x00;
    d484:	2300      	movs	r3, #0
    d486:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d488:	68bb      	ldr	r3, [r7, #8]
    d48a:	68da      	ldr	r2, [r3, #12]
    d48c:	68bb      	ldr	r3, [r7, #8]
    d48e:	689b      	ldr	r3, [r3, #8]
    d490:	429a      	cmp	r2, r3
    d492:	d30a      	bcc.n	d4aa <art_svl_ringbuf_bytes_free+0x3c>
        friegh = rb->len - rb->w_offset + rb->r_offset -1;
    d494:	68bb      	ldr	r3, [r7, #8]
    d496:	685a      	ldr	r2, [r3, #4]
    d498:	68bb      	ldr	r3, [r7, #8]
    d49a:	68db      	ldr	r3, [r3, #12]
    d49c:	1ad2      	subs	r2, r2, r3
    d49e:	68bb      	ldr	r3, [r7, #8]
    d4a0:	689b      	ldr	r3, [r3, #8]
    d4a2:	4413      	add	r3, r2
    d4a4:	3b01      	subs	r3, #1
    d4a6:	60fb      	str	r3, [r7, #12]
    d4a8:	e006      	b.n	d4b8 <art_svl_ringbuf_bytes_free+0x4a>
    }else{
        friegh = rb->r_offset - rb->w_offset - 1;
    d4aa:	68bb      	ldr	r3, [r7, #8]
    d4ac:	689a      	ldr	r2, [r3, #8]
    d4ae:	68bb      	ldr	r3, [r7, #8]
    d4b0:	68db      	ldr	r3, [r3, #12]
    d4b2:	1ad3      	subs	r3, r2, r3
    d4b4:	3b01      	subs	r3, #1
    d4b6:	60fb      	str	r3, [r7, #12]
    }
    return friegh;
    d4b8:	68fb      	ldr	r3, [r7, #12]
}
    d4ba:	4618      	mov	r0, r3
    d4bc:	3714      	adds	r7, #20
    d4be:	46bd      	mov	sp, r7
    d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4c4:	4770      	bx	lr

0000d4c6 <art_svl_ringbuf_write>:

size_t art_svl_ringbuf_write( void* vrb, uint8_t c ){
    d4c6:	b580      	push	{r7, lr}
    d4c8:	b084      	sub	sp, #16
    d4ca:	af00      	add	r7, sp, #0
    d4cc:	6078      	str	r0, [r7, #4]
    d4ce:	460b      	mov	r3, r1
    d4d0:	70fb      	strb	r3, [r7, #3]
    if( vrb == NULL ){ return 0; }
    d4d2:	687b      	ldr	r3, [r7, #4]
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d101      	bne.n	d4dc <art_svl_ringbuf_write+0x16>
    d4d8:	2300      	movs	r3, #0
    d4da:	e01f      	b.n	d51c <art_svl_ringbuf_write+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d4dc:	687b      	ldr	r3, [r7, #4]
    d4de:	60fb      	str	r3, [r7, #12]

    if(art_svl_ringbuf_bytes_free(rb) > 0){
    d4e0:	68f8      	ldr	r0, [r7, #12]
    d4e2:	f7ff ffc4 	bl	d46e <art_svl_ringbuf_bytes_free>
    d4e6:	4603      	mov	r3, r0
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d016      	beq.n	d51a <art_svl_ringbuf_write+0x54>
        *(rb->buf + rb->w_offset) = c;
    d4ec:	68fb      	ldr	r3, [r7, #12]
    d4ee:	681a      	ldr	r2, [r3, #0]
    d4f0:	68fb      	ldr	r3, [r7, #12]
    d4f2:	68db      	ldr	r3, [r3, #12]
    d4f4:	4413      	add	r3, r2
    d4f6:	78fa      	ldrb	r2, [r7, #3]
    d4f8:	701a      	strb	r2, [r3, #0]
        rb->w_offset++;
    d4fa:	68fb      	ldr	r3, [r7, #12]
    d4fc:	68db      	ldr	r3, [r3, #12]
    d4fe:	1c5a      	adds	r2, r3, #1
    d500:	68fb      	ldr	r3, [r7, #12]
    d502:	60da      	str	r2, [r3, #12]
        if(rb->w_offset >= rb->len){
    d504:	68fb      	ldr	r3, [r7, #12]
    d506:	68da      	ldr	r2, [r3, #12]
    d508:	68fb      	ldr	r3, [r7, #12]
    d50a:	685b      	ldr	r3, [r3, #4]
    d50c:	429a      	cmp	r2, r3
    d50e:	d302      	bcc.n	d516 <art_svl_ringbuf_write+0x50>
            rb->w_offset = 0;
    d510:	68fb      	ldr	r3, [r7, #12]
    d512:	2200      	movs	r2, #0
    d514:	60da      	str	r2, [r3, #12]
        }
        return 1;
    d516:	2301      	movs	r3, #1
    d518:	e000      	b.n	d51c <art_svl_ringbuf_write+0x56>
    }
    return 0;
    d51a:	2300      	movs	r3, #0
}
    d51c:	4618      	mov	r0, r3
    d51e:	3710      	adds	r7, #16
    d520:	46bd      	mov	sp, r7
    d522:	bd80      	pop	{r7, pc}

0000d524 <art_svl_ringbuf_read>:

size_t art_svl_ringbuf_read( void* vrb, uint8_t* c ){
    d524:	b580      	push	{r7, lr}
    d526:	b084      	sub	sp, #16
    d528:	af00      	add	r7, sp, #0
    d52a:	6078      	str	r0, [r7, #4]
    d52c:	6039      	str	r1, [r7, #0]
    if( vrb == NULL ){ return 0; }
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	2b00      	cmp	r3, #0
    d532:	d101      	bne.n	d538 <art_svl_ringbuf_read+0x14>
    d534:	2300      	movs	r3, #0
    d536:	e020      	b.n	d57a <art_svl_ringbuf_read+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d538:	687b      	ldr	r3, [r7, #4]
    d53a:	60fb      	str	r3, [r7, #12]
    
    if(art_svl_ringbuf_available(rb) > 0){
    d53c:	68f8      	ldr	r0, [r7, #12]
    d53e:	f7ff ff6c 	bl	d41a <art_svl_ringbuf_available>
    d542:	4603      	mov	r3, r0
    d544:	2b00      	cmp	r3, #0
    d546:	d017      	beq.n	d578 <art_svl_ringbuf_read+0x54>
        *c = *(rb->buf + rb->r_offset);
    d548:	68fb      	ldr	r3, [r7, #12]
    d54a:	681a      	ldr	r2, [r3, #0]
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	689b      	ldr	r3, [r3, #8]
    d550:	4413      	add	r3, r2
    d552:	781a      	ldrb	r2, [r3, #0]
    d554:	683b      	ldr	r3, [r7, #0]
    d556:	701a      	strb	r2, [r3, #0]
        rb->r_offset++;
    d558:	68fb      	ldr	r3, [r7, #12]
    d55a:	689b      	ldr	r3, [r3, #8]
    d55c:	1c5a      	adds	r2, r3, #1
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	609a      	str	r2, [r3, #8]
        if(rb->r_offset >= rb->len){
    d562:	68fb      	ldr	r3, [r7, #12]
    d564:	689a      	ldr	r2, [r3, #8]
    d566:	68fb      	ldr	r3, [r7, #12]
    d568:	685b      	ldr	r3, [r3, #4]
    d56a:	429a      	cmp	r2, r3
    d56c:	d302      	bcc.n	d574 <art_svl_ringbuf_read+0x50>
            rb->r_offset = 0;
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	2200      	movs	r2, #0
    d572:	609a      	str	r2, [r3, #8]
        }
        return 1;
    d574:	2301      	movs	r3, #1
    d576:	e000      	b.n	d57a <art_svl_ringbuf_read+0x56>
    }
    return 0;
    d578:	2300      	movs	r3, #0
    d57a:	4618      	mov	r0, r3
    d57c:	3710      	adds	r7, #16
    d57e:	46bd      	mov	sp, r7
    d580:	bd80      	pop	{r7, pc}

0000d582 <svl_uart_read>:
//*****************************************************************************
//
// UART read buffer
//
//*****************************************************************************
size_t svl_uart_read(void *pHandle, char* buf, size_t len){
    d582:	b580      	push	{r7, lr}
    d584:	b08a      	sub	sp, #40	; 0x28
    d586:	af00      	add	r7, sp, #0
    d588:	60f8      	str	r0, [r7, #12]
    d58a:	60b9      	str	r1, [r7, #8]
    d58c:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesRead = 0x00;
    d58e:	2300      	movs	r3, #0
    d590:	627b      	str	r3, [r7, #36]	; 0x24
    am_hal_uart_transfer_t sRead = {
    d592:	2301      	movs	r3, #1
    d594:	613b      	str	r3, [r7, #16]
    d596:	68bb      	ldr	r3, [r7, #8]
    d598:	617b      	str	r3, [r7, #20]
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	61bb      	str	r3, [r7, #24]
    d59e:	2300      	movs	r3, #0
    d5a0:	61fb      	str	r3, [r7, #28]
    d5a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d5a6:	623b      	str	r3, [r7, #32]
        .pui8Data = (uint8_t*)buf,
        .ui32NumBytes = len,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesRead,
    };
    am_hal_uart_transfer(pHandle, &sRead);
    d5a8:	f107 0310 	add.w	r3, r7, #16
    d5ac:	4619      	mov	r1, r3
    d5ae:	68f8      	ldr	r0, [r7, #12]
    d5b0:	f000 fff2 	bl	e598 <am_hal_uart_transfer>
    return ui32BytesRead;
    d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d5b6:	4618      	mov	r0, r3
    d5b8:	3728      	adds	r7, #40	; 0x28
    d5ba:	46bd      	mov	sp, r7
    d5bc:	bd80      	pop	{r7, pc}

0000d5be <svl_uart_write>:
//*****************************************************************************
//
// UART write buffer
//
//*****************************************************************************
size_t svl_uart_write(void *pHandle, char* buf, size_t len){
    d5be:	b580      	push	{r7, lr}
    d5c0:	b08a      	sub	sp, #40	; 0x28
    d5c2:	af00      	add	r7, sp, #0
    d5c4:	60f8      	str	r0, [r7, #12]
    d5c6:	60b9      	str	r1, [r7, #8]
    d5c8:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesWritten = 0;
    d5ca:	2300      	movs	r3, #0
    d5cc:	627b      	str	r3, [r7, #36]	; 0x24
    const am_hal_uart_transfer_t sUartWrite =
    d5ce:	2300      	movs	r3, #0
    d5d0:	613b      	str	r3, [r7, #16]
    d5d2:	68bb      	ldr	r3, [r7, #8]
    d5d4:	617b      	str	r3, [r7, #20]
    d5d6:	687b      	ldr	r3, [r7, #4]
    d5d8:	61bb      	str	r3, [r7, #24]
    d5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5de:	61fb      	str	r3, [r7, #28]
    d5e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d5e4:	623b      	str	r3, [r7, #32]
        .ui32NumBytes = len,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(pHandle, &sUartWrite);
    d5e6:	f107 0310 	add.w	r3, r7, #16
    d5ea:	4619      	mov	r1, r3
    d5ec:	68f8      	ldr	r0, [r7, #12]
    d5ee:	f000 ffd3 	bl	e598 <am_hal_uart_transfer>

    return ui32BytesWritten;
    d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d5f4:	4618      	mov	r0, r3
    d5f6:	3728      	adds	r7, #40	; 0x28
    d5f8:	46bd      	mov	sp, r7
    d5fa:	bd80      	pop	{r7, pc}

0000d5fc <svl_uart_write_byte>:
//*****************************************************************************
//
// UART write byte
//
//*****************************************************************************
size_t svl_uart_write_byte(void *pHandle, uint8_t c){
    d5fc:	b580      	push	{r7, lr}
    d5fe:	b082      	sub	sp, #8
    d600:	af00      	add	r7, sp, #0
    d602:	6078      	str	r0, [r7, #4]
    d604:	460b      	mov	r3, r1
    d606:	70fb      	strb	r3, [r7, #3]
    return svl_uart_write(pHandle, (char*)&c, 1);
    d608:	1cfb      	adds	r3, r7, #3
    d60a:	2201      	movs	r2, #1
    d60c:	4619      	mov	r1, r3
    d60e:	6878      	ldr	r0, [r7, #4]
    d610:	f7ff ffd5 	bl	d5be <svl_uart_write>
    d614:	4603      	mov	r3, r0
}
    d616:	4618      	mov	r0, r3
    d618:	3708      	adds	r7, #8
    d61a:	46bd      	mov	sp, r7
    d61c:	bd80      	pop	{r7, pc}
	...

0000d620 <_fill_ticks>:

volatile uint32_t ap3_stimer_overflows = 0x00;
uint64_t ticks = 0;

void _fill_ticks(void)
{
    d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d622:	af00      	add	r7, sp, #0
    ticks = ap3_stimer_overflows;
    d624:	4b12      	ldr	r3, [pc, #72]	; (d670 <_fill_ticks+0x50>)
    d626:	681b      	ldr	r3, [r3, #0]
    d628:	f04f 0400 	mov.w	r4, #0
    d62c:	4a11      	ldr	r2, [pc, #68]	; (d674 <_fill_ticks+0x54>)
    d62e:	e9c2 3400 	strd	r3, r4, [r2]
    ticks <<= 32;
    d632:	4b10      	ldr	r3, [pc, #64]	; (d674 <_fill_ticks+0x54>)
    d634:	e9d3 1200 	ldrd	r1, r2, [r3]
    d638:	f04f 0300 	mov.w	r3, #0
    d63c:	f04f 0400 	mov.w	r4, #0
    d640:	000c      	movs	r4, r1
    d642:	2300      	movs	r3, #0
    d644:	4a0b      	ldr	r2, [pc, #44]	; (d674 <_fill_ticks+0x54>)
    d646:	e9c2 3400 	strd	r3, r4, [r2]
    ticks |= (am_hal_stimer_counter_get() & 0xFFFFFFFF);
    d64a:	f000 fda1 	bl	e190 <am_hal_stimer_counter_get>
    d64e:	4603      	mov	r3, r0
    d650:	4619      	mov	r1, r3
    d652:	f04f 0200 	mov.w	r2, #0
    d656:	4b07      	ldr	r3, [pc, #28]	; (d674 <_fill_ticks+0x54>)
    d658:	e9d3 3400 	ldrd	r3, r4, [r3]
    d65c:	ea41 0503 	orr.w	r5, r1, r3
    d660:	ea42 0604 	orr.w	r6, r2, r4
    d664:	4b03      	ldr	r3, [pc, #12]	; (d674 <_fill_ticks+0x54>)
    d666:	e9c3 5600 	strd	r5, r6, [r3]
}
    d66a:	bf00      	nop
    d66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d66e:	bf00      	nop
    d670:	10000a5c 	.word	0x10000a5c
    d674:	10000a60 	.word	0x10000a60

0000d678 <millis>:

size_t millis(void){
    d678:	b598      	push	{r3, r4, r7, lr}
    d67a:	af00      	add	r7, sp, #0
    _fill_ticks();
    d67c:	f7ff ffd0 	bl	d620 <_fill_ticks>
    return (uint32_t)(ticks / AP3_STIMER_FREQ_KHZ);
    d680:	4b06      	ldr	r3, [pc, #24]	; (d69c <millis+0x24>)
    d682:	e9d3 0100 	ldrd	r0, r1, [r3]
    d686:	f640 32b8 	movw	r2, #3000	; 0xbb8
    d68a:	f04f 0300 	mov.w	r3, #0
    d68e:	f7fe fd37 	bl	c100 <__aeabi_uldivmod>
    d692:	4603      	mov	r3, r0
    d694:	460c      	mov	r4, r1
}
    d696:	4618      	mov	r0, r3
    d698:	bd98      	pop	{r3, r4, r7, pc}
    d69a:	bf00      	nop
    d69c:	10000a60 	.word	0x10000a60

0000d6a0 <enable_burst_mode>:
//
// Burst mode
//
//*****************************************************************************
bool enable_burst_mode(void)
{
    d6a0:	b580      	push	{r7, lr}
    d6a2:	b082      	sub	sp, #8
    d6a4:	af00      	add	r7, sp, #0
    // Check that the Burst Feature is available.
    am_hal_burst_avail_e eBurstModeAvailable;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d6a6:	1dfb      	adds	r3, r7, #7
    d6a8:	4618      	mov	r0, r3
    d6aa:	f000 f8dd 	bl	d868 <am_hal_burst_mode_initialize>
    d6ae:	4603      	mov	r3, r0
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d001      	beq.n	d6b8 <enable_burst_mode+0x18>
    {
        return (false);
    d6b4:	2300      	movs	r3, #0
    d6b6:	e009      	b.n	d6cc <enable_burst_mode+0x2c>
    }

    // Put the MCU into "Burst" mode.
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_enable(&eBurstMode))
    d6b8:	1dbb      	adds	r3, r7, #6
    d6ba:	4618      	mov	r0, r3
    d6bc:	f000 f916 	bl	d8ec <am_hal_burst_mode_enable>
    d6c0:	4603      	mov	r3, r0
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d001      	beq.n	d6ca <enable_burst_mode+0x2a>
    {
        return (false);
    d6c6:	2300      	movs	r3, #0
    d6c8:	e000      	b.n	d6cc <enable_burst_mode+0x2c>
    }
    return (true);
    d6ca:	2301      	movs	r3, #1
}
    d6cc:	4618      	mov	r0, r3
    d6ce:	3708      	adds	r7, #8
    d6d0:	46bd      	mov	sp, r7
    d6d2:	bd80      	pop	{r7, pc}

0000d6d4 <disable_burst_mode>:

//Turns main processor from 96MHz to 48MHz
//Returns false if disable fails
bool disable_burst_mode(void)
{
    d6d4:	b580      	push	{r7, lr}
    d6d6:	b082      	sub	sp, #8
    d6d8:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    d6da:	1dfb      	adds	r3, r7, #7
    d6dc:	4618      	mov	r0, r3
    d6de:	f000 f935 	bl	d94c <am_hal_burst_mode_disable>
    d6e2:	4603      	mov	r3, r0
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	d104      	bne.n	d6f2 <disable_burst_mode+0x1e>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    d6e8:	79fb      	ldrb	r3, [r7, #7]
    d6ea:	2b01      	cmp	r3, #1
    d6ec:	d003      	beq.n	d6f6 <disable_burst_mode+0x22>
        {
            return (false);
    d6ee:	2300      	movs	r3, #0
    d6f0:	e002      	b.n	d6f8 <disable_burst_mode+0x24>
        }
    }
    else
    {
        return (false);
    d6f2:	2300      	movs	r3, #0
    d6f4:	e000      	b.n	d6f8 <disable_burst_mode+0x24>
    }
    return (true);
    d6f6:	2301      	movs	r3, #1
}
    d6f8:	4618      	mov	r0, r3
    d6fa:	3708      	adds	r7, #8
    d6fc:	46bd      	mov	sp, r7
    d6fe:	bd80      	pop	{r7, pc}

0000d700 <ap3_gpio_enable_interrupts>:

#define GPIOCFG_FLD_INTD_S 3
#define GPIOCFG_FLD_OUTCFG_S 1
#define GPIOCFG_FLD_INCFG_S 0

uint32_t ap3_gpio_enable_interrupts(uint32_t ui32Pin, uint32_t eIntDir){
    d700:	b580      	push	{r7, lr}
    d702:	b08a      	sub	sp, #40	; 0x28
    d704:	af00      	add	r7, sp, #0
    d706:	6078      	str	r0, [r7, #4]
    d708:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    bool bClearEnable = false;
    d70a:	2300      	movs	r3, #0
    d70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d710:	2300      	movs	r3, #0
    d712:	623b      	str	r3, [r7, #32]
    d714:	6a3b      	ldr	r3, [r7, #32]
    d716:	61fb      	str	r3, [r7, #28]
    d718:	69fb      	ldr	r3, [r7, #28]
    d71a:	61bb      	str	r3, [r7, #24]
    ui32GPCfg |= (((eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S) | (((eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d71c:	683b      	ldr	r3, [r7, #0]
    d71e:	00db      	lsls	r3, r3, #3
    d720:	f003 0208 	and.w	r2, r3, #8
    d724:	683b      	ldr	r3, [r7, #0]
    d726:	085b      	lsrs	r3, r3, #1
    d728:	f003 0301 	and.w	r3, r3, #1
    d72c:	4313      	orrs	r3, r2
    d72e:	69ba      	ldr	r2, [r7, #24]
    d730:	4313      	orrs	r3, r2
    d732:	61bb      	str	r3, [r7, #24]

    uint32_t ui32GPCfgAddr;
    uint32_t ui32GPCfgClearMask;
    uint32_t ui32GPCfgShft;

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	009b      	lsls	r3, r3, #2
    d738:	f003 031c 	and.w	r3, r3, #28
    d73c:	617b      	str	r3, [r7, #20]

    ui32GPCfgAddr = AM_REGADDR(GPIO, CFGA) + ((ui32Pin >> 1) & ~0x3);
    d73e:	687b      	ldr	r3, [r7, #4]
    d740:	085b      	lsrs	r3, r3, #1
    d742:	f023 0203 	bic.w	r2, r3, #3
    d746:	4b1d      	ldr	r3, [pc, #116]	; (d7bc <ap3_gpio_enable_interrupts+0xbc>)
    d748:	4413      	add	r3, r2
    d74a:	613b      	str	r3, [r7, #16]
    ui32GPCfgClearMask = ~((uint32_t)0xF << ui32GPCfgShft);
    d74c:	220f      	movs	r2, #15
    d74e:	697b      	ldr	r3, [r7, #20]
    d750:	fa02 f303 	lsl.w	r3, r2, r3
    d754:	43db      	mvns	r3, r3
    d756:	60fb      	str	r3, [r7, #12]

    ui32GPCfg <<= ui32GPCfgShft;
    d758:	69ba      	ldr	r2, [r7, #24]
    d75a:	697b      	ldr	r3, [r7, #20]
    d75c:	fa02 f303 	lsl.w	r3, r2, r3
    d760:	61bb      	str	r3, [r7, #24]

    AM_CRITICAL_BEGIN
    d762:	f000 fc65 	bl	e030 <am_hal_interrupt_master_disable>
    d766:	4603      	mov	r3, r0
    d768:	60bb      	str	r3, [r7, #8]

    if (bClearEnable)
    d76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d76e:	2b00      	cmp	r3, #0
    d770:	d00c      	beq.n	d78c <ap3_gpio_enable_interrupts+0x8c>
    {
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d772:	687b      	ldr	r3, [r7, #4]
    d774:	f003 021f 	and.w	r2, r3, #31
    d778:	687b      	ldr	r3, [r7, #4]
    d77a:	08db      	lsrs	r3, r3, #3
    d77c:	f003 010c 	and.w	r1, r3, #12
    d780:	4b0f      	ldr	r3, [pc, #60]	; (d7c0 <ap3_gpio_enable_interrupts+0xc0>)
    d782:	440b      	add	r3, r1
    d784:	4619      	mov	r1, r3
    d786:	2301      	movs	r3, #1
    d788:	4093      	lsls	r3, r2
    d78a:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d78c:	4b0d      	ldr	r3, [pc, #52]	; (d7c4 <ap3_gpio_enable_interrupts+0xc4>)
    d78e:	2273      	movs	r2, #115	; 0x73
    d790:	675a      	str	r2, [r3, #116]	; 0x74

    // Here's where the magic happens
    AM_REGVAL(ui32GPCfgAddr) = (AM_REGVAL(ui32GPCfgAddr) & ui32GPCfgClearMask) | ui32GPCfg;
    d792:	693b      	ldr	r3, [r7, #16]
    d794:	681a      	ldr	r2, [r3, #0]
    d796:	68fb      	ldr	r3, [r7, #12]
    d798:	ea02 0103 	and.w	r1, r2, r3
    d79c:	693b      	ldr	r3, [r7, #16]
    d79e:	69ba      	ldr	r2, [r7, #24]
    d7a0:	430a      	orrs	r2, r1
    d7a2:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d7a4:	4b07      	ldr	r3, [pc, #28]	; (d7c4 <ap3_gpio_enable_interrupts+0xc4>)
    d7a6:	2200      	movs	r2, #0
    d7a8:	675a      	str	r2, [r3, #116]	; 0x74

    AM_CRITICAL_END
    d7aa:	68bb      	ldr	r3, [r7, #8]
    d7ac:	4618      	mov	r0, r3
    d7ae:	f000 fc43 	bl	e038 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d7b2:	2300      	movs	r3, #0
}
    d7b4:	4618      	mov	r0, r3
    d7b6:	3728      	adds	r7, #40	; 0x28
    d7b8:	46bd      	mov	sp, r7
    d7ba:	bd80      	pop	{r7, pc}
    d7bc:	4001004c 	.word	0x4001004c
    d7c0:	400100c8 	.word	0x400100c8
    d7c4:	40010000 	.word	0x40010000

0000d7c8 <memset>:
    d7c8:	b4f0      	push	{r4, r5, r6, r7}
    d7ca:	0786      	lsls	r6, r0, #30
    d7cc:	d046      	beq.n	d85c <memset+0x94>
    d7ce:	1e54      	subs	r4, r2, #1
    d7d0:	2a00      	cmp	r2, #0
    d7d2:	d03c      	beq.n	d84e <memset+0x86>
    d7d4:	b2ca      	uxtb	r2, r1
    d7d6:	4603      	mov	r3, r0
    d7d8:	e002      	b.n	d7e0 <memset+0x18>
    d7da:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    d7de:	d336      	bcc.n	d84e <memset+0x86>
    d7e0:	f803 2b01 	strb.w	r2, [r3], #1
    d7e4:	079d      	lsls	r5, r3, #30
    d7e6:	d1f8      	bne.n	d7da <memset+0x12>
    d7e8:	2c03      	cmp	r4, #3
    d7ea:	d929      	bls.n	d840 <memset+0x78>
    d7ec:	b2cd      	uxtb	r5, r1
    d7ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d7f2:	2c0f      	cmp	r4, #15
    d7f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d7f8:	d933      	bls.n	d862 <memset+0x9a>
    d7fa:	f1a4 0610 	sub.w	r6, r4, #16
    d7fe:	0936      	lsrs	r6, r6, #4
    d800:	f103 0720 	add.w	r7, r3, #32
    d804:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    d808:	f103 0210 	add.w	r2, r3, #16
    d80c:	e942 5504 	strd	r5, r5, [r2, #-16]
    d810:	e942 5502 	strd	r5, r5, [r2, #-8]
    d814:	3210      	adds	r2, #16
    d816:	42ba      	cmp	r2, r7
    d818:	d1f8      	bne.n	d80c <memset+0x44>
    d81a:	1c72      	adds	r2, r6, #1
    d81c:	f014 0f0c 	tst.w	r4, #12
    d820:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d824:	f004 060f 	and.w	r6, r4, #15
    d828:	d013      	beq.n	d852 <memset+0x8a>
    d82a:	1f33      	subs	r3, r6, #4
    d82c:	f023 0303 	bic.w	r3, r3, #3
    d830:	3304      	adds	r3, #4
    d832:	4413      	add	r3, r2
    d834:	f842 5b04 	str.w	r5, [r2], #4
    d838:	4293      	cmp	r3, r2
    d83a:	d1fb      	bne.n	d834 <memset+0x6c>
    d83c:	f006 0403 	and.w	r4, r6, #3
    d840:	b12c      	cbz	r4, d84e <memset+0x86>
    d842:	b2c9      	uxtb	r1, r1
    d844:	441c      	add	r4, r3
    d846:	f803 1b01 	strb.w	r1, [r3], #1
    d84a:	429c      	cmp	r4, r3
    d84c:	d1fb      	bne.n	d846 <memset+0x7e>
    d84e:	bcf0      	pop	{r4, r5, r6, r7}
    d850:	4770      	bx	lr
    d852:	4634      	mov	r4, r6
    d854:	4613      	mov	r3, r2
    d856:	2c00      	cmp	r4, #0
    d858:	d1f3      	bne.n	d842 <memset+0x7a>
    d85a:	e7f8      	b.n	d84e <memset+0x86>
    d85c:	4614      	mov	r4, r2
    d85e:	4603      	mov	r3, r0
    d860:	e7c2      	b.n	d7e8 <memset+0x20>
    d862:	461a      	mov	r2, r3
    d864:	4626      	mov	r6, r4
    d866:	e7e0      	b.n	d82a <memset+0x62>

0000d868 <am_hal_burst_mode_initialize>:
    d868:	b570      	push	{r4, r5, r6, lr}
    d86a:	4b1c      	ldr	r3, [pc, #112]	; (d8dc <am_hal_burst_mode_initialize+0x74>)
    d86c:	695b      	ldr	r3, [r3, #20]
    d86e:	4604      	mov	r4, r0
    d870:	07d8      	lsls	r0, r3, #31
    d872:	b082      	sub	sp, #8
    d874:	d521      	bpl.n	d8ba <am_hal_burst_mode_initialize+0x52>
    d876:	4b1a      	ldr	r3, [pc, #104]	; (d8e0 <am_hal_burst_mode_initialize+0x78>)
    d878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d87a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d87e:	629a      	str	r2, [r3, #40]	; 0x28
    d880:	681b      	ldr	r3, [r3, #0]
    d882:	07d9      	lsls	r1, r3, #31
    d884:	d427      	bmi.n	d8d6 <am_hal_burst_mode_initialize+0x6e>
    d886:	4d15      	ldr	r5, [pc, #84]	; (d8dc <am_hal_burst_mode_initialize+0x74>)
    d888:	4916      	ldr	r1, [pc, #88]	; (d8e4 <am_hal_burst_mode_initialize+0x7c>)
    d88a:	7e2a      	ldrb	r2, [r5, #24]
    d88c:	2601      	movs	r6, #1
    d88e:	f042 0210 	orr.w	r2, r2, #16
    d892:	2320      	movs	r3, #32
    d894:	762a      	strb	r2, [r5, #24]
    d896:	f242 7010 	movw	r0, #10000	; 0x2710
    d89a:	461a      	mov	r2, r3
    d89c:	9600      	str	r6, [sp, #0]
    d89e:	f000 f9ab 	bl	dbf8 <am_hal_flash_delay_status_check>
    d8a2:	b990      	cbnz	r0, d8ca <am_hal_burst_mode_initialize+0x62>
    d8a4:	69ab      	ldr	r3, [r5, #24]
    d8a6:	065a      	lsls	r2, r3, #25
    d8a8:	d507      	bpl.n	d8ba <am_hal_burst_mode_initialize+0x52>
    d8aa:	69ab      	ldr	r3, [r5, #24]
    d8ac:	069b      	lsls	r3, r3, #26
    d8ae:	d504      	bpl.n	d8ba <am_hal_burst_mode_initialize+0x52>
    d8b0:	4b0d      	ldr	r3, [pc, #52]	; (d8e8 <am_hal_burst_mode_initialize+0x80>)
    d8b2:	701e      	strb	r6, [r3, #0]
    d8b4:	7020      	strb	r0, [r4, #0]
    d8b6:	b002      	add	sp, #8
    d8b8:	bd70      	pop	{r4, r5, r6, pc}
    d8ba:	4a0b      	ldr	r2, [pc, #44]	; (d8e8 <am_hal_burst_mode_initialize+0x80>)
    d8bc:	2100      	movs	r1, #0
    d8be:	2301      	movs	r3, #1
    d8c0:	2007      	movs	r0, #7
    d8c2:	7011      	strb	r1, [r2, #0]
    d8c4:	7023      	strb	r3, [r4, #0]
    d8c6:	b002      	add	sp, #8
    d8c8:	bd70      	pop	{r4, r5, r6, pc}
    d8ca:	4b07      	ldr	r3, [pc, #28]	; (d8e8 <am_hal_burst_mode_initialize+0x80>)
    d8cc:	2200      	movs	r2, #0
    d8ce:	701a      	strb	r2, [r3, #0]
    d8d0:	7026      	strb	r6, [r4, #0]
    d8d2:	b002      	add	sp, #8
    d8d4:	bd70      	pop	{r4, r5, r6, pc}
    d8d6:	f000 fc09 	bl	e0ec <am_hal_pwrctrl_blebuck_trim>
    d8da:	e7d4      	b.n	d886 <am_hal_burst_mode_initialize+0x1e>
    d8dc:	40020000 	.word	0x40020000
    d8e0:	40021000 	.word	0x40021000
    d8e4:	40020018 	.word	0x40020018
    d8e8:	10000a68 	.word	0x10000a68

0000d8ec <am_hal_burst_mode_enable>:
    d8ec:	b570      	push	{r4, r5, r6, lr}
    d8ee:	4b15      	ldr	r3, [pc, #84]	; (d944 <am_hal_burst_mode_enable+0x58>)
    d8f0:	781b      	ldrb	r3, [r3, #0]
    d8f2:	b082      	sub	sp, #8
    d8f4:	4604      	mov	r4, r0
    d8f6:	b1db      	cbz	r3, d930 <am_hal_burst_mode_enable+0x44>
    d8f8:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d8fc:	2601      	movs	r6, #1
    d8fe:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d902:	4911      	ldr	r1, [pc, #68]	; (d948 <am_hal_burst_mode_enable+0x5c>)
    d904:	4332      	orrs	r2, r6
    d906:	2304      	movs	r3, #4
    d908:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d90c:	f242 7010 	movw	r0, #10000	; 0x2710
    d910:	461a      	mov	r2, r3
    d912:	9600      	str	r6, [sp, #0]
    d914:	f000 f970 	bl	dbf8 <am_hal_flash_delay_status_check>
    d918:	b938      	cbnz	r0, d92a <am_hal_burst_mode_enable+0x3e>
    d91a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d91c:	079b      	lsls	r3, r3, #30
    d91e:	d50c      	bpl.n	d93a <am_hal_burst_mode_enable+0x4e>
    d920:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d922:	f013 0f04 	tst.w	r3, #4
    d926:	bf18      	it	ne
    d928:	4606      	movne	r6, r0
    d92a:	7026      	strb	r6, [r4, #0]
    d92c:	b002      	add	sp, #8
    d92e:	bd70      	pop	{r4, r5, r6, pc}
    d930:	2301      	movs	r3, #1
    d932:	7003      	strb	r3, [r0, #0]
    d934:	2007      	movs	r0, #7
    d936:	b002      	add	sp, #8
    d938:	bd70      	pop	{r4, r5, r6, pc}
    d93a:	4630      	mov	r0, r6
    d93c:	7026      	strb	r6, [r4, #0]
    d93e:	b002      	add	sp, #8
    d940:	bd70      	pop	{r4, r5, r6, pc}
    d942:	bf00      	nop
    d944:	10000a68 	.word	0x10000a68
    d948:	40004034 	.word	0x40004034

0000d94c <am_hal_burst_mode_disable>:
    d94c:	b530      	push	{r4, r5, lr}
    d94e:	b085      	sub	sp, #20
    d950:	4605      	mov	r5, r0
    d952:	f000 fb6d 	bl	e030 <am_hal_interrupt_master_disable>
    d956:	2100      	movs	r1, #0
    d958:	4603      	mov	r3, r0
    d95a:	4810      	ldr	r0, [pc, #64]	; (d99c <am_hal_burst_mode_disable+0x50>)
    d95c:	9303      	str	r3, [sp, #12]
    d95e:	f000 f985 	bl	dc6c <am_hal_flash_store_ui32>
    d962:	9803      	ldr	r0, [sp, #12]
    d964:	f000 fb68 	bl	e038 <am_hal_interrupt_master_set>
    d968:	4b0d      	ldr	r3, [pc, #52]	; (d9a0 <am_hal_burst_mode_disable+0x54>)
    d96a:	490c      	ldr	r1, [pc, #48]	; (d99c <am_hal_burst_mode_disable+0x50>)
    d96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d96e:	2401      	movs	r4, #1
    d970:	f36f 72df 	bfc	r2, #31, #1
    d974:	629a      	str	r2, [r3, #40]	; 0x28
    d976:	f242 7010 	movw	r0, #10000	; 0x2710
    d97a:	2300      	movs	r3, #0
    d97c:	9400      	str	r4, [sp, #0]
    d97e:	2204      	movs	r2, #4
    d980:	f000 f93a 	bl	dbf8 <am_hal_flash_delay_status_check>
    d984:	b930      	cbnz	r0, d994 <am_hal_burst_mode_disable+0x48>
    d986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d98c:	f013 0f04 	tst.w	r3, #4
    d990:	bf18      	it	ne
    d992:	4604      	movne	r4, r0
    d994:	702c      	strb	r4, [r5, #0]
    d996:	b005      	add	sp, #20
    d998:	bd30      	pop	{r4, r5, pc}
    d99a:	bf00      	nop
    d99c:	40004034 	.word	0x40004034
    d9a0:	40021000 	.word	0x40021000

0000d9a4 <am_hal_cachectrl_config>:
    d9a4:	b530      	push	{r4, r5, lr}
    d9a6:	b083      	sub	sp, #12
    d9a8:	4604      	mov	r4, r0
    d9aa:	f000 fb41 	bl	e030 <am_hal_interrupt_master_disable>
    d9ae:	4d0e      	ldr	r5, [pc, #56]	; (d9e8 <am_hal_cachectrl_config+0x44>)
    d9b0:	9001      	str	r0, [sp, #4]
    d9b2:	682b      	ldr	r3, [r5, #0]
    d9b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d9b8:	602b      	str	r3, [r5, #0]
    d9ba:	9801      	ldr	r0, [sp, #4]
    d9bc:	f000 fb3c 	bl	e038 <am_hal_interrupt_master_set>
    d9c0:	7863      	ldrb	r3, [r4, #1]
    d9c2:	7822      	ldrb	r2, [r4, #0]
    d9c4:	78a1      	ldrb	r1, [r4, #2]
    d9c6:	021b      	lsls	r3, r3, #8
    d9c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d9cc:	0112      	lsls	r2, r2, #4
    d9ce:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d9d2:	b2d2      	uxtb	r2, r2
    d9d4:	4313      	orrs	r3, r2
    d9d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d9da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d9de:	2000      	movs	r0, #0
    d9e0:	602b      	str	r3, [r5, #0]
    d9e2:	b003      	add	sp, #12
    d9e4:	bd30      	pop	{r4, r5, pc}
    d9e6:	bf00      	nop
    d9e8:	40018000 	.word	0x40018000

0000d9ec <am_hal_cachectrl_enable>:
    d9ec:	4a03      	ldr	r2, [pc, #12]	; (d9fc <am_hal_cachectrl_enable+0x10>)
    d9ee:	6813      	ldr	r3, [r2, #0]
    d9f0:	f043 0301 	orr.w	r3, r3, #1
    d9f4:	6013      	str	r3, [r2, #0]
    d9f6:	2000      	movs	r0, #0
    d9f8:	4770      	bx	lr
    d9fa:	bf00      	nop
    d9fc:	40018000 	.word	0x40018000

0000da00 <am_hal_clkgen_control>:
    da00:	4b49      	ldr	r3, [pc, #292]	; (db28 <am_hal_clkgen_control+0x128>)
    da02:	681a      	ldr	r2, [r3, #0]
    da04:	b912      	cbnz	r2, da0c <am_hal_clkgen_control+0xc>
    da06:	4a49      	ldr	r2, [pc, #292]	; (db2c <am_hal_clkgen_control+0x12c>)
    da08:	6812      	ldr	r2, [r2, #0]
    da0a:	601a      	str	r2, [r3, #0]
    da0c:	2809      	cmp	r0, #9
    da0e:	f200 8089 	bhi.w	db24 <am_hal_clkgen_control+0x124>
    da12:	e8df f000 	tbb	[pc, r0]
    da16:	160d      	.short	0x160d
    da18:	423a261e 	.word	0x423a261e
    da1c:	055c544c 	.word	0x055c544c
    da20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da24:	2000      	movs	r0, #0
    da26:	6a1a      	ldr	r2, [r3, #32]
    da28:	f36f 0200 	bfc	r2, #0, #1
    da2c:	621a      	str	r2, [r3, #32]
    da2e:	4770      	bx	lr
    da30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da34:	2200      	movs	r2, #0
    da36:	2147      	movs	r1, #71	; 0x47
    da38:	6159      	str	r1, [r3, #20]
    da3a:	4610      	mov	r0, r2
    da3c:	619a      	str	r2, [r3, #24]
    da3e:	615a      	str	r2, [r3, #20]
    da40:	4770      	bx	lr
    da42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da46:	2000      	movs	r0, #0
    da48:	899a      	ldrh	r2, [r3, #12]
    da4a:	f36f 0200 	bfc	r2, #0, #1
    da4e:	819a      	strh	r2, [r3, #12]
    da50:	4770      	bx	lr
    da52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da56:	2000      	movs	r0, #0
    da58:	899a      	ldrh	r2, [r3, #12]
    da5a:	f36f 0241 	bfc	r2, #1, #1
    da5e:	819a      	strh	r2, [r3, #12]
    da60:	4770      	bx	lr
    da62:	4a33      	ldr	r2, [pc, #204]	; (db30 <am_hal_clkgen_control+0x130>)
    da64:	68d3      	ldr	r3, [r2, #12]
    da66:	b2db      	uxtb	r3, r3
    da68:	2b21      	cmp	r3, #33	; 0x21
    da6a:	d106      	bne.n	da7a <am_hal_clkgen_control+0x7a>
    da6c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da70:	2101      	movs	r1, #1
    da72:	f361 2309 	bfi	r3, r1, #8, #2
    da76:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da7e:	2000      	movs	r0, #0
    da80:	8993      	ldrh	r3, [r2, #12]
    da82:	f043 0301 	orr.w	r3, r3, #1
    da86:	8193      	strh	r3, [r2, #12]
    da88:	4770      	bx	lr
    da8a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da8e:	2000      	movs	r0, #0
    da90:	8993      	ldrh	r3, [r2, #12]
    da92:	f043 0302 	orr.w	r3, r3, #2
    da96:	8193      	strh	r3, [r2, #12]
    da98:	4770      	bx	lr
    da9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da9e:	2200      	movs	r2, #0
    daa0:	2047      	movs	r0, #71	; 0x47
    daa2:	2101      	movs	r1, #1
    daa4:	6158      	str	r0, [r3, #20]
    daa6:	6199      	str	r1, [r3, #24]
    daa8:	4610      	mov	r0, r2
    daaa:	615a      	str	r2, [r3, #20]
    daac:	4770      	bx	lr
    daae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dab2:	2000      	movs	r0, #0
    dab4:	899a      	ldrh	r2, [r3, #12]
    dab6:	f36f 12c7 	bfc	r2, #7, #1
    daba:	819a      	strh	r2, [r3, #12]
    dabc:	4770      	bx	lr
    dabe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dac2:	2000      	movs	r0, #0
    dac4:	8993      	ldrh	r3, [r2, #12]
    dac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    daca:	8193      	strh	r3, [r2, #12]
    dacc:	4770      	bx	lr
    dace:	4a18      	ldr	r2, [pc, #96]	; (db30 <am_hal_clkgen_control+0x130>)
    dad0:	68d3      	ldr	r3, [r2, #12]
    dad2:	b2db      	uxtb	r3, r3
    dad4:	2b20      	cmp	r3, #32
    dad6:	d80a      	bhi.n	daee <am_hal_clkgen_control+0xee>
    dad8:	b139      	cbz	r1, daea <am_hal_clkgen_control+0xea>
    dada:	680b      	ldr	r3, [r1, #0]
    dadc:	f043 0301 	orr.w	r3, r3, #1
    dae0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dae4:	2000      	movs	r0, #0
    dae6:	6213      	str	r3, [r2, #32]
    dae8:	4770      	bx	lr
    daea:	4b12      	ldr	r3, [pc, #72]	; (db34 <am_hal_clkgen_control+0x134>)
    daec:	e7f8      	b.n	dae0 <am_hal_clkgen_control+0xe0>
    daee:	b500      	push	{lr}
    daf0:	b083      	sub	sp, #12
    daf2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    daf6:	9101      	str	r1, [sp, #4]
    daf8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dafc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db00:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db04:	f000 f868 	bl	dbd8 <am_hal_flash_delay>
    db08:	9901      	ldr	r1, [sp, #4]
    db0a:	b149      	cbz	r1, db20 <am_hal_clkgen_control+0x120>
    db0c:	680b      	ldr	r3, [r1, #0]
    db0e:	f043 0301 	orr.w	r3, r3, #1
    db12:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db16:	2000      	movs	r0, #0
    db18:	6213      	str	r3, [r2, #32]
    db1a:	b003      	add	sp, #12
    db1c:	f85d fb04 	ldr.w	pc, [sp], #4
    db20:	4b04      	ldr	r3, [pc, #16]	; (db34 <am_hal_clkgen_control+0x134>)
    db22:	e7f6      	b.n	db12 <am_hal_clkgen_control+0x112>
    db24:	2006      	movs	r0, #6
    db26:	4770      	bx	lr
    db28:	10000a6c 	.word	0x10000a6c
    db2c:	4ffff000 	.word	0x4ffff000
    db30:	40020000 	.word	0x40020000
    db34:	0025b801 	.word	0x0025b801

0000db38 <am_hal_clkgen_status_get>:
    db38:	b1a8      	cbz	r0, db66 <am_hal_clkgen_status_get+0x2e>
    db3a:	b410      	push	{r4}
    db3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db40:	490a      	ldr	r1, [pc, #40]	; (db6c <am_hal_clkgen_status_get+0x34>)
    db42:	6994      	ldr	r4, [r2, #24]
    db44:	4b0a      	ldr	r3, [pc, #40]	; (db70 <am_hal_clkgen_status_get+0x38>)
    db46:	f014 0f01 	tst.w	r4, #1
    db4a:	bf08      	it	eq
    db4c:	460b      	moveq	r3, r1
    db4e:	6003      	str	r3, [r0, #0]
    db50:	69d3      	ldr	r3, [r2, #28]
    db52:	f85d 4b04 	ldr.w	r4, [sp], #4
    db56:	f003 0201 	and.w	r2, r3, #1
    db5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    db5e:	6042      	str	r2, [r0, #4]
    db60:	7203      	strb	r3, [r0, #8]
    db62:	2000      	movs	r0, #0
    db64:	4770      	bx	lr
    db66:	2006      	movs	r0, #6
    db68:	4770      	bx	lr
    db6a:	bf00      	nop
    db6c:	02dc6c00 	.word	0x02dc6c00
    db70:	016e3600 	.word	0x016e3600

0000db74 <am_hal_flash_page_erase>:
    db74:	4b00      	ldr	r3, [pc, #0]	; (db78 <am_hal_flash_page_erase+0x4>)
    db76:	4718      	bx	r3
    db78:	08000051 	.word	0x08000051

0000db7c <am_hal_flash_program_main>:
    db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db80:	4e12      	ldr	r6, [pc, #72]	; (dbcc <am_hal_flash_program_main+0x50>)
    db82:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    db86:	42b5      	cmp	r5, r6
    db88:	b082      	sub	sp, #8
    db8a:	d004      	beq.n	db96 <am_hal_flash_program_main+0x1a>
    db8c:	4c10      	ldr	r4, [pc, #64]	; (dbd0 <am_hal_flash_program_main+0x54>)
    db8e:	47a0      	blx	r4
    db90:	b002      	add	sp, #8
    db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db96:	2b01      	cmp	r3, #1
    db98:	461c      	mov	r4, r3
    db9a:	4680      	mov	r8, r0
    db9c:	4617      	mov	r7, r2
    db9e:	d904      	bls.n	dbaa <am_hal_flash_program_main+0x2e>
    dba0:	4d0b      	ldr	r5, [pc, #44]	; (dbd0 <am_hal_flash_program_main+0x54>)
    dba2:	3b01      	subs	r3, #1
    dba4:	47a8      	blx	r5
    dba6:	2800      	cmp	r0, #0
    dba8:	d1f2      	bne.n	db90 <am_hal_flash_program_main+0x14>
    dbaa:	4b0a      	ldr	r3, [pc, #40]	; (dbd4 <am_hal_flash_program_main+0x58>)
    dbac:	4d08      	ldr	r5, [pc, #32]	; (dbd0 <am_hal_flash_program_main+0x54>)
    dbae:	681b      	ldr	r3, [r3, #0]
    dbb0:	9301      	str	r3, [sp, #4]
    dbb2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    dbb6:	3a01      	subs	r2, #1
    dbb8:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    dbbc:	4640      	mov	r0, r8
    dbbe:	2301      	movs	r3, #1
    dbc0:	a901      	add	r1, sp, #4
    dbc2:	47a8      	blx	r5
    dbc4:	b002      	add	sp, #8
    dbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbca:	bf00      	nop
    dbcc:	100c0000 	.word	0x100c0000
    dbd0:	08000055 	.word	0x08000055
    dbd4:	100bfffc 	.word	0x100bfffc

0000dbd8 <am_hal_flash_delay>:
    dbd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dbde:	075b      	lsls	r3, r3, #29
    dbe0:	bf46      	itte	mi
    dbe2:	0040      	lslmi	r0, r0, #1
    dbe4:	230e      	movmi	r3, #14
    dbe6:	230b      	movpl	r3, #11
    dbe8:	4298      	cmp	r0, r3
    dbea:	d902      	bls.n	dbf2 <am_hal_flash_delay+0x1a>
    dbec:	1ac0      	subs	r0, r0, r3
    dbee:	4b01      	ldr	r3, [pc, #4]	; (dbf4 <am_hal_flash_delay+0x1c>)
    dbf0:	4718      	bx	r3
    dbf2:	4770      	bx	lr
    dbf4:	0800009d 	.word	0x0800009d

0000dbf8 <am_hal_flash_delay_status_check>:
    dbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbfc:	f89d c020 	ldrb.w	ip, [sp, #32]
    dc00:	4604      	mov	r4, r0
    dc02:	460d      	mov	r5, r1
    dc04:	4616      	mov	r6, r2
    dc06:	461f      	mov	r7, r3
    dc08:	f1bc 0f00 	cmp.w	ip, #0
    dc0c:	d015      	beq.n	dc3a <am_hal_flash_delay_status_check+0x42>
    dc0e:	f8df 8058 	ldr.w	r8, [pc, #88]	; dc68 <am_hal_flash_delay_status_check+0x70>
    dc12:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dc16:	e009      	b.n	dc2c <am_hal_flash_delay_status_check+0x34>
    dc18:	b31c      	cbz	r4, dc62 <am_hal_flash_delay_status_check+0x6a>
    dc1a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc1e:	f013 0f04 	tst.w	r3, #4
    dc22:	bf0c      	ite	eq
    dc24:	2005      	moveq	r0, #5
    dc26:	2012      	movne	r0, #18
    dc28:	3c01      	subs	r4, #1
    dc2a:	47c0      	blx	r8
    dc2c:	6828      	ldr	r0, [r5, #0]
    dc2e:	4030      	ands	r0, r6
    dc30:	42b8      	cmp	r0, r7
    dc32:	d1f1      	bne.n	dc18 <am_hal_flash_delay_status_check+0x20>
    dc34:	2000      	movs	r0, #0
    dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc3a:	f8df 902c 	ldr.w	r9, [pc, #44]	; dc68 <am_hal_flash_delay_status_check+0x70>
    dc3e:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
    dc42:	e009      	b.n	dc58 <am_hal_flash_delay_status_check+0x60>
    dc44:	b16c      	cbz	r4, dc62 <am_hal_flash_delay_status_check+0x6a>
    dc46:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    dc4a:	f013 0f04 	tst.w	r3, #4
    dc4e:	bf0c      	ite	eq
    dc50:	2005      	moveq	r0, #5
    dc52:	2012      	movne	r0, #18
    dc54:	3c01      	subs	r4, #1
    dc56:	47c8      	blx	r9
    dc58:	6828      	ldr	r0, [r5, #0]
    dc5a:	4030      	ands	r0, r6
    dc5c:	42b8      	cmp	r0, r7
    dc5e:	d0f1      	beq.n	dc44 <am_hal_flash_delay_status_check+0x4c>
    dc60:	e7e8      	b.n	dc34 <am_hal_flash_delay_status_check+0x3c>
    dc62:	2004      	movs	r0, #4
    dc64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc68:	0800009d 	.word	0x0800009d

0000dc6c <am_hal_flash_store_ui32>:
    dc6c:	4b01      	ldr	r3, [pc, #4]	; (dc74 <am_hal_flash_store_ui32+0x8>)
    dc6e:	f043 0301 	orr.w	r3, r3, #1
    dc72:	4718      	bx	r3
    dc74:	10000200 	.word	0x10000200

0000dc78 <am_hal_gpio_pinconfig>:
    dc78:	2849      	cmp	r0, #73	; 0x49
    dc7a:	f200 80bc 	bhi.w	ddf6 <am_hal_gpio_pinconfig+0x17e>
    dc7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc82:	4604      	mov	r4, r0
    dc84:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dc88:	f001 0007 	and.w	r0, r1, #7
    dc8c:	b085      	sub	sp, #20
    dc8e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dc92:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dc96:	d00f      	beq.n	dcb8 <am_hal_gpio_pinconfig+0x40>
    dc98:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dc9c:	1db5      	adds	r5, r6, #6
    dc9e:	f005 0507 	and.w	r5, r5, #7
    dca2:	2d03      	cmp	r5, #3
    dca4:	f042 0201 	orr.w	r2, r2, #1
    dca8:	f240 80a7 	bls.w	ddfa <am_hal_gpio_pinconfig+0x182>
    dcac:	2fc0      	cmp	r7, #192	; 0xc0
    dcae:	f000 80f4 	beq.w	de9a <am_hal_gpio_pinconfig+0x222>
    dcb2:	2f20      	cmp	r7, #32
    dcb4:	f000 80f6 	beq.w	dea4 <am_hal_gpio_pinconfig+0x22c>
    dcb8:	b163      	cbz	r3, dcd4 <am_hal_gpio_pinconfig+0x5c>
    dcba:	2b01      	cmp	r3, #1
    dcbc:	f000 80e2 	beq.w	de84 <am_hal_gpio_pinconfig+0x20c>
    dcc0:	2b02      	cmp	r3, #2
    dcc2:	f040 80c8 	bne.w	de56 <am_hal_gpio_pinconfig+0x1de>
    dcc6:	4b82      	ldr	r3, [pc, #520]	; (ded0 <am_hal_gpio_pinconfig+0x258>)
    dcc8:	5d1b      	ldrb	r3, [r3, r4]
    dcca:	075d      	lsls	r5, r3, #29
    dccc:	f140 80c3 	bpl.w	de56 <am_hal_gpio_pinconfig+0x1de>
    dcd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dcd4:	4b7f      	ldr	r3, [pc, #508]	; (ded4 <am_hal_gpio_pinconfig+0x25c>)
    dcd6:	4d80      	ldr	r5, [pc, #512]	; (ded8 <am_hal_gpio_pinconfig+0x260>)
    dcd8:	5d1b      	ldrb	r3, [r3, r4]
    dcda:	5d2d      	ldrb	r5, [r5, r4]
    dcdc:	4103      	asrs	r3, r0
    dcde:	005b      	lsls	r3, r3, #1
    dce0:	f003 0302 	and.w	r3, r3, #2
    dce4:	4285      	cmp	r5, r0
    dce6:	ea43 0302 	orr.w	r3, r3, r2
    dcea:	f000 8091 	beq.w	de10 <am_hal_gpio_pinconfig+0x198>
    dcee:	f3c1 2607 	ubfx	r6, r1, #8, #8
    dcf2:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dcf6:	f3c1 3080 	ubfx	r0, r1, #14, #1
    dcfa:	0a8a      	lsrs	r2, r1, #10
    dcfc:	f006 070c 	and.w	r7, r6, #12
    dd00:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    dd04:	f002 0208 	and.w	r2, r2, #8
    dd08:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dd0c:	2f04      	cmp	r7, #4
    dd0e:	ea42 0200 	orr.w	r2, r2, r0
    dd12:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    dd16:	4628      	mov	r0, r5
    dd18:	f000 80a1 	beq.w	de5e <am_hal_gpio_pinconfig+0x1e6>
    dd1c:	486f      	ldr	r0, [pc, #444]	; (dedc <am_hal_gpio_pinconfig+0x264>)
    dd1e:	6800      	ldr	r0, [r0, #0]
    dd20:	eba1 0800 	sub.w	r8, r1, r0
    dd24:	fab8 f888 	clz	r8, r8
    dd28:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dd2c:	f016 0f60 	tst.w	r6, #96	; 0x60
    dd30:	bf04      	itt	eq
    dd32:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dd36:	f360 0200 	bfieq	r2, r0, #0, #1
    dd3a:	00a6      	lsls	r6, r4, #2
    dd3c:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dd40:	2902      	cmp	r1, #2
    dd42:	ea4f 05c4 	mov.w	r5, r4, lsl #3
    dd46:	f000 808d 	beq.w	de64 <am_hal_gpio_pinconfig+0x1ec>
    dd4a:	2903      	cmp	r1, #3
    dd4c:	f000 8091 	beq.w	de72 <am_hal_gpio_pinconfig+0x1fa>
    dd50:	2901      	cmp	r1, #1
    dd52:	bf08      	it	eq
    dd54:	f043 0304 	orreq.w	r3, r3, #4
    dd58:	f005 0518 	and.w	r5, r5, #24
    dd5c:	f04f 0900 	mov.w	r9, #0
    dd60:	f006 061c 	and.w	r6, r6, #28
    dd64:	210f      	movs	r1, #15
    dd66:	40b1      	lsls	r1, r6
    dd68:	27ff      	movs	r7, #255	; 0xff
    dd6a:	fa02 f606 	lsl.w	r6, r2, r6
    dd6e:	43ca      	mvns	r2, r1
    dd70:	40af      	lsls	r7, r5
    dd72:	9201      	str	r2, [sp, #4]
    dd74:	fa03 f505 	lsl.w	r5, r3, r5
    dd78:	f000 f95a 	bl	e030 <am_hal_interrupt_master_disable>
    dd7c:	f024 0b03 	bic.w	fp, r4, #3
    dd80:	ea4f 0a54 	mov.w	sl, r4, lsr #1
    dd84:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
    dd88:	4b55      	ldr	r3, [pc, #340]	; (dee0 <am_hal_gpio_pinconfig+0x268>)
    dd8a:	4956      	ldr	r1, [pc, #344]	; (dee4 <am_hal_gpio_pinconfig+0x26c>)
    dd8c:	9a01      	ldr	r2, [sp, #4]
    dd8e:	9003      	str	r0, [sp, #12]
    dd90:	43ff      	mvns	r7, r7
    dd92:	f02a 0a03 	bic.w	sl, sl, #3
    dd96:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dd9a:	f1b8 0f00 	cmp.w	r8, #0
    dd9e:	d00b      	beq.n	ddb8 <am_hal_gpio_pinconfig+0x140>
    dda0:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dda4:	f004 081f 	and.w	r8, r4, #31
    dda8:	484f      	ldr	r0, [pc, #316]	; (dee8 <am_hal_gpio_pinconfig+0x270>)
    ddaa:	f00e 0e0c 	and.w	lr, lr, #12
    ddae:	2401      	movs	r4, #1
    ddb0:	fa04 f408 	lsl.w	r4, r4, r8
    ddb4:	f84e 4000 	str.w	r4, [lr, r0]
    ddb8:	484c      	ldr	r0, [pc, #304]	; (deec <am_hal_gpio_pinconfig+0x274>)
    ddba:	2473      	movs	r4, #115	; 0x73
    ddbc:	6744      	str	r4, [r0, #116]	; 0x74
    ddbe:	f8dc 4000 	ldr.w	r4, [ip]
    ddc2:	403c      	ands	r4, r7
    ddc4:	4325      	orrs	r5, r4
    ddc6:	f8cc 5000 	str.w	r5, [ip]
    ddca:	f85a 4003 	ldr.w	r4, [sl, r3]
    ddce:	4022      	ands	r2, r4
    ddd0:	4332      	orrs	r2, r6
    ddd2:	f84a 2003 	str.w	r2, [sl, r3]
    ddd6:	f85b 3001 	ldr.w	r3, [fp, r1]
    ddda:	401f      	ands	r7, r3
    dddc:	2400      	movs	r4, #0
    ddde:	ea47 0709 	orr.w	r7, r7, r9
    dde2:	f84b 7001 	str.w	r7, [fp, r1]
    dde6:	6744      	str	r4, [r0, #116]	; 0x74
    dde8:	9803      	ldr	r0, [sp, #12]
    ddea:	f000 f925 	bl	e038 <am_hal_interrupt_master_set>
    ddee:	4620      	mov	r0, r4
    ddf0:	b005      	add	sp, #20
    ddf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf6:	2006      	movs	r0, #6
    ddf8:	4770      	bx	lr
    ddfa:	4d35      	ldr	r5, [pc, #212]	; (ded0 <am_hal_gpio_pinconfig+0x258>)
    ddfc:	5d2d      	ldrb	r5, [r5, r4]
    ddfe:	3e02      	subs	r6, #2
    de00:	07ef      	lsls	r7, r5, #31
    de02:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    de06:	d550      	bpl.n	deaa <am_hal_gpio_pinconfig+0x232>
    de08:	2b00      	cmp	r3, #0
    de0a:	f43f af63 	beq.w	dcd4 <am_hal_gpio_pinconfig+0x5c>
    de0e:	e754      	b.n	dcba <am_hal_gpio_pinconfig+0x42>
    de10:	03c8      	lsls	r0, r1, #15
    de12:	f3c1 4242 	ubfx	r2, r1, #17, #3
    de16:	d43c      	bmi.n	de92 <am_hal_gpio_pinconfig+0x21a>
    de18:	2a02      	cmp	r2, #2
    de1a:	d83c      	bhi.n	de96 <am_hal_gpio_pinconfig+0x21e>
    de1c:	4d34      	ldr	r5, [pc, #208]	; (def0 <am_hal_gpio_pinconfig+0x278>)
    de1e:	f3c1 5001 	ubfx	r0, r1, #20, #2
    de22:	f3c1 4600 	ubfx	r6, r1, #16, #1
    de26:	0100      	lsls	r0, r0, #4
    de28:	ea40 10c6 	orr.w	r0, r0, r6, lsl #7
    de2c:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    de30:	4310      	orrs	r0, r2
    de32:	4286      	cmp	r6, r0
    de34:	d03b      	beq.n	deae <am_hal_gpio_pinconfig+0x236>
    de36:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de3a:	00a6      	lsls	r6, r4, #2
    de3c:	786a      	ldrb	r2, [r5, #1]
    de3e:	4282      	cmp	r2, r0
    de40:	d03f      	beq.n	dec2 <am_hal_gpio_pinconfig+0x24a>
    de42:	78aa      	ldrb	r2, [r5, #2]
    de44:	4282      	cmp	r2, r0
    de46:	d03e      	beq.n	dec6 <am_hal_gpio_pinconfig+0x24e>
    de48:	78ea      	ldrb	r2, [r5, #3]
    de4a:	4282      	cmp	r2, r0
    de4c:	d03d      	beq.n	deca <am_hal_gpio_pinconfig+0x252>
    de4e:	4829      	ldr	r0, [pc, #164]	; (def4 <am_hal_gpio_pinconfig+0x27c>)
    de50:	b005      	add	sp, #20
    de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de56:	4828      	ldr	r0, [pc, #160]	; (def8 <am_hal_gpio_pinconfig+0x280>)
    de58:	b005      	add	sp, #20
    de5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de5e:	f04f 0801 	mov.w	r8, #1
    de62:	e763      	b.n	dd2c <am_hal_gpio_pinconfig+0xb4>
    de64:	f005 0518 	and.w	r5, r5, #24
    de68:	f04f 0901 	mov.w	r9, #1
    de6c:	fa09 f905 	lsl.w	r9, r9, r5
    de70:	e776      	b.n	dd60 <am_hal_gpio_pinconfig+0xe8>
    de72:	f005 0518 	and.w	r5, r5, #24
    de76:	f04f 0901 	mov.w	r9, #1
    de7a:	f043 0304 	orr.w	r3, r3, #4
    de7e:	fa09 f905 	lsl.w	r9, r9, r5
    de82:	e76d      	b.n	dd60 <am_hal_gpio_pinconfig+0xe8>
    de84:	4b12      	ldr	r3, [pc, #72]	; (ded0 <am_hal_gpio_pinconfig+0x258>)
    de86:	5d1b      	ldrb	r3, [r3, r4]
    de88:	079e      	lsls	r6, r3, #30
    de8a:	d5e4      	bpl.n	de56 <am_hal_gpio_pinconfig+0x1de>
    de8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    de90:	e720      	b.n	dcd4 <am_hal_gpio_pinconfig+0x5c>
    de92:	2a05      	cmp	r2, #5
    de94:	d9c2      	bls.n	de1c <am_hal_gpio_pinconfig+0x1a4>
    de96:	4819      	ldr	r0, [pc, #100]	; (defc <am_hal_gpio_pinconfig+0x284>)
    de98:	e7aa      	b.n	ddf0 <am_hal_gpio_pinconfig+0x178>
    de9a:	2c14      	cmp	r4, #20
    de9c:	f43f af0c 	beq.w	dcb8 <am_hal_gpio_pinconfig+0x40>
    dea0:	4817      	ldr	r0, [pc, #92]	; (df00 <am_hal_gpio_pinconfig+0x288>)
    dea2:	e7a5      	b.n	ddf0 <am_hal_gpio_pinconfig+0x178>
    dea4:	2c14      	cmp	r4, #20
    dea6:	f47f af07 	bne.w	dcb8 <am_hal_gpio_pinconfig+0x40>
    deaa:	4816      	ldr	r0, [pc, #88]	; (df04 <am_hal_gpio_pinconfig+0x28c>)
    deac:	e7a0      	b.n	ddf0 <am_hal_gpio_pinconfig+0x178>
    deae:	2200      	movs	r2, #0
    deb0:	00a6      	lsls	r6, r4, #2
    deb2:	0052      	lsls	r2, r2, #1
    deb4:	f3c1 5080 	ubfx	r0, r1, #22, #1
    deb8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
    debc:	f04f 0800 	mov.w	r8, #0
    dec0:	e73c      	b.n	dd3c <am_hal_gpio_pinconfig+0xc4>
    dec2:	2201      	movs	r2, #1
    dec4:	e7f5      	b.n	deb2 <am_hal_gpio_pinconfig+0x23a>
    dec6:	2202      	movs	r2, #2
    dec8:	e7f3      	b.n	deb2 <am_hal_gpio_pinconfig+0x23a>
    deca:	2203      	movs	r2, #3
    decc:	e7f1      	b.n	deb2 <am_hal_gpio_pinconfig+0x23a>
    dece:	bf00      	nop
    ded0:	0000ef7c 	.word	0x0000ef7c
    ded4:	0000efc8 	.word	0x0000efc8
    ded8:	0000f13c 	.word	0x0000f13c
    dedc:	0000ef74 	.word	0x0000ef74
    dee0:	4001004c 	.word	0x4001004c
    dee4:	400100f8 	.word	0x400100f8
    dee8:	400100c8 	.word	0x400100c8
    deec:	40010000 	.word	0x40010000
    def0:	0000f014 	.word	0x0000f014
    def4:	08000104 	.word	0x08000104
    def8:	08000102 	.word	0x08000102
    defc:	08000103 	.word	0x08000103
    df00:	08000101 	.word	0x08000101
    df04:	08000100 	.word	0x08000100

0000df08 <am_hal_gpio_interrupt_enable>:
    df08:	b530      	push	{r4, r5, lr}
    df0a:	6884      	ldr	r4, [r0, #8]
    df0c:	f424 747f 	bic.w	r4, r4, #1020	; 0x3fc
    df10:	f024 0403 	bic.w	r4, r4, #3
    df14:	b083      	sub	sp, #12
    df16:	b9e4      	cbnz	r4, df52 <am_hal_gpio_interrupt_enable+0x4a>
    df18:	4605      	mov	r5, r0
    df1a:	f000 f889 	bl	e030 <am_hal_interrupt_master_disable>
    df1e:	4b0f      	ldr	r3, [pc, #60]	; (df5c <am_hal_gpio_interrupt_enable+0x54>)
    df20:	9001      	str	r0, [sp, #4]
    df22:	6829      	ldr	r1, [r5, #0]
    df24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    df28:	430a      	orrs	r2, r1
    df2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df2e:	6869      	ldr	r1, [r5, #4]
    df30:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
    df34:	430a      	orrs	r2, r1
    df36:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    df3a:	68a9      	ldr	r1, [r5, #8]
    df3c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
    df40:	430a      	orrs	r2, r1
    df42:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    df46:	9801      	ldr	r0, [sp, #4]
    df48:	f000 f876 	bl	e038 <am_hal_interrupt_master_set>
    df4c:	4620      	mov	r0, r4
    df4e:	b003      	add	sp, #12
    df50:	bd30      	pop	{r4, r5, pc}
    df52:	2405      	movs	r4, #5
    df54:	4620      	mov	r0, r4
    df56:	b003      	add	sp, #12
    df58:	bd30      	pop	{r4, r5, pc}
    df5a:	bf00      	nop
    df5c:	40010000 	.word	0x40010000

0000df60 <am_hal_gpio_interrupt_disable>:
    df60:	b530      	push	{r4, r5, lr}
    df62:	b083      	sub	sp, #12
    df64:	b348      	cbz	r0, dfba <am_hal_gpio_interrupt_disable+0x5a>
    df66:	6884      	ldr	r4, [r0, #8]
    df68:	f424 747f 	bic.w	r4, r4, #1020	; 0x3fc
    df6c:	f024 0403 	bic.w	r4, r4, #3
    df70:	4605      	mov	r5, r0
    df72:	b9f4      	cbnz	r4, dfb2 <am_hal_gpio_interrupt_disable+0x52>
    df74:	f000 f85c 	bl	e030 <am_hal_interrupt_master_disable>
    df78:	4b12      	ldr	r3, [pc, #72]	; (dfc4 <am_hal_gpio_interrupt_disable+0x64>)
    df7a:	9001      	str	r0, [sp, #4]
    df7c:	6829      	ldr	r1, [r5, #0]
    df7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    df82:	ea22 0201 	bic.w	r2, r2, r1
    df86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df8a:	6869      	ldr	r1, [r5, #4]
    df8c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
    df90:	ea22 0201 	bic.w	r2, r2, r1
    df94:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    df98:	68a9      	ldr	r1, [r5, #8]
    df9a:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
    df9e:	ea22 0201 	bic.w	r2, r2, r1
    dfa2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    dfa6:	9801      	ldr	r0, [sp, #4]
    dfa8:	f000 f846 	bl	e038 <am_hal_interrupt_master_set>
    dfac:	4620      	mov	r0, r4
    dfae:	b003      	add	sp, #12
    dfb0:	bd30      	pop	{r4, r5, pc}
    dfb2:	2405      	movs	r4, #5
    dfb4:	4620      	mov	r0, r4
    dfb6:	b003      	add	sp, #12
    dfb8:	bd30      	pop	{r4, r5, pc}
    dfba:	2406      	movs	r4, #6
    dfbc:	4620      	mov	r0, r4
    dfbe:	b003      	add	sp, #12
    dfc0:	bd30      	pop	{r4, r5, pc}
    dfc2:	bf00      	nop
    dfc4:	40010000 	.word	0x40010000

0000dfc8 <am_hal_gpio_interrupt_clear>:
    dfc8:	b530      	push	{r4, r5, lr}
    dfca:	b083      	sub	sp, #12
    dfcc:	b330      	cbz	r0, e01c <am_hal_gpio_interrupt_clear+0x54>
    dfce:	6884      	ldr	r4, [r0, #8]
    dfd0:	f424 747f 	bic.w	r4, r4, #1020	; 0x3fc
    dfd4:	f024 0403 	bic.w	r4, r4, #3
    dfd8:	4605      	mov	r5, r0
    dfda:	b9dc      	cbnz	r4, e014 <am_hal_gpio_interrupt_clear+0x4c>
    dfdc:	f000 f828 	bl	e030 <am_hal_interrupt_master_disable>
    dfe0:	4b10      	ldr	r3, [pc, #64]	; (e024 <am_hal_gpio_interrupt_clear+0x5c>)
    dfe2:	9001      	str	r0, [sp, #4]
    dfe4:	6829      	ldr	r1, [r5, #0]
    dfe6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    dfea:	430a      	orrs	r2, r1
    dfec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    dff0:	6869      	ldr	r1, [r5, #4]
    dff2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
    dff6:	430a      	orrs	r2, r1
    dff8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    dffc:	68a9      	ldr	r1, [r5, #8]
    dffe:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
    e002:	430a      	orrs	r2, r1
    e004:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
    e008:	9801      	ldr	r0, [sp, #4]
    e00a:	f000 f815 	bl	e038 <am_hal_interrupt_master_set>
    e00e:	4620      	mov	r0, r4
    e010:	b003      	add	sp, #12
    e012:	bd30      	pop	{r4, r5, pc}
    e014:	2405      	movs	r4, #5
    e016:	4620      	mov	r0, r4
    e018:	b003      	add	sp, #12
    e01a:	bd30      	pop	{r4, r5, pc}
    e01c:	2406      	movs	r4, #6
    e01e:	4620      	mov	r0, r4
    e020:	b003      	add	sp, #12
    e022:	bd30      	pop	{r4, r5, pc}
    e024:	40010000 	.word	0x40010000

0000e028 <am_hal_interrupt_master_enable>:
    e028:	f3ef 8010 	mrs	r0, PRIMASK
    e02c:	b662      	cpsie	i
    e02e:	4770      	bx	lr

0000e030 <am_hal_interrupt_master_disable>:
    e030:	f3ef 8010 	mrs	r0, PRIMASK
    e034:	b672      	cpsid	i
    e036:	4770      	bx	lr

0000e038 <am_hal_interrupt_master_set>:
    e038:	f380 8810 	msr	PRIMASK, r0
    e03c:	4770      	bx	lr
    e03e:	bf00      	nop

0000e040 <am_hal_pwrctrl_periph_enable>:
    e040:	b570      	push	{r4, r5, r6, lr}
    e042:	b082      	sub	sp, #8
    e044:	4604      	mov	r4, r0
    e046:	f7ff fff3 	bl	e030 <am_hal_interrupt_master_disable>
    e04a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e04e:	4e0f      	ldr	r6, [pc, #60]	; (e08c <am_hal_pwrctrl_periph_enable+0x4c>)
    e050:	4d0f      	ldr	r5, [pc, #60]	; (e090 <am_hal_pwrctrl_periph_enable+0x50>)
    e052:	9001      	str	r0, [sp, #4]
    e054:	00a4      	lsls	r4, r4, #2
    e056:	68b3      	ldr	r3, [r6, #8]
    e058:	592a      	ldr	r2, [r5, r4]
    e05a:	4313      	orrs	r3, r2
    e05c:	60b3      	str	r3, [r6, #8]
    e05e:	9801      	ldr	r0, [sp, #4]
    e060:	442c      	add	r4, r5
    e062:	f7ff ffe9 	bl	e038 <am_hal_interrupt_master_set>
    e066:	20a0      	movs	r0, #160	; 0xa0
    e068:	f7ff fdb6 	bl	dbd8 <am_hal_flash_delay>
    e06c:	69b3      	ldr	r3, [r6, #24]
    e06e:	6864      	ldr	r4, [r4, #4]
    e070:	4223      	tst	r3, r4
    e072:	d103      	bne.n	e07c <am_hal_pwrctrl_periph_enable+0x3c>
    e074:	20a0      	movs	r0, #160	; 0xa0
    e076:	f7ff fdaf 	bl	dbd8 <am_hal_flash_delay>
    e07a:	69b3      	ldr	r3, [r6, #24]
    e07c:	4b03      	ldr	r3, [pc, #12]	; (e08c <am_hal_pwrctrl_periph_enable+0x4c>)
    e07e:	699b      	ldr	r3, [r3, #24]
    e080:	4223      	tst	r3, r4
    e082:	bf0c      	ite	eq
    e084:	2001      	moveq	r0, #1
    e086:	2000      	movne	r0, #0
    e088:	b002      	add	sp, #8
    e08a:	bd70      	pop	{r4, r5, r6, pc}
    e08c:	40021000 	.word	0x40021000
    e090:	0000f188 	.word	0x0000f188

0000e094 <am_hal_pwrctrl_periph_disable>:
    e094:	b570      	push	{r4, r5, r6, lr}
    e096:	b082      	sub	sp, #8
    e098:	4604      	mov	r4, r0
    e09a:	f7ff ffc9 	bl	e030 <am_hal_interrupt_master_disable>
    e09e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e0a2:	4e10      	ldr	r6, [pc, #64]	; (e0e4 <am_hal_pwrctrl_periph_disable+0x50>)
    e0a4:	4d10      	ldr	r5, [pc, #64]	; (e0e8 <am_hal_pwrctrl_periph_disable+0x54>)
    e0a6:	9001      	str	r0, [sp, #4]
    e0a8:	00a4      	lsls	r4, r4, #2
    e0aa:	68b3      	ldr	r3, [r6, #8]
    e0ac:	592a      	ldr	r2, [r5, r4]
    e0ae:	ea23 0302 	bic.w	r3, r3, r2
    e0b2:	60b3      	str	r3, [r6, #8]
    e0b4:	9801      	ldr	r0, [sp, #4]
    e0b6:	442c      	add	r4, r5
    e0b8:	f7ff ffbe 	bl	e038 <am_hal_interrupt_master_set>
    e0bc:	20a0      	movs	r0, #160	; 0xa0
    e0be:	f7ff fd8b 	bl	dbd8 <am_hal_flash_delay>
    e0c2:	69b3      	ldr	r3, [r6, #24]
    e0c4:	6864      	ldr	r4, [r4, #4]
    e0c6:	4223      	tst	r3, r4
    e0c8:	d003      	beq.n	e0d2 <am_hal_pwrctrl_periph_disable+0x3e>
    e0ca:	20a0      	movs	r0, #160	; 0xa0
    e0cc:	f7ff fd84 	bl	dbd8 <am_hal_flash_delay>
    e0d0:	69b3      	ldr	r3, [r6, #24]
    e0d2:	4b04      	ldr	r3, [pc, #16]	; (e0e4 <am_hal_pwrctrl_periph_disable+0x50>)
    e0d4:	699b      	ldr	r3, [r3, #24]
    e0d6:	4223      	tst	r3, r4
    e0d8:	bf14      	ite	ne
    e0da:	2001      	movne	r0, #1
    e0dc:	2000      	moveq	r0, #0
    e0de:	b002      	add	sp, #8
    e0e0:	bd70      	pop	{r4, r5, r6, pc}
    e0e2:	bf00      	nop
    e0e4:	40021000 	.word	0x40021000
    e0e8:	0000f188 	.word	0x0000f188

0000e0ec <am_hal_pwrctrl_blebuck_trim>:
    e0ec:	b510      	push	{r4, lr}
    e0ee:	4c12      	ldr	r4, [pc, #72]	; (e138 <am_hal_pwrctrl_blebuck_trim+0x4c>)
    e0f0:	68e3      	ldr	r3, [r4, #12]
    e0f2:	b2db      	uxtb	r3, r3
    e0f4:	2b11      	cmp	r3, #17
    e0f6:	b082      	sub	sp, #8
    e0f8:	d801      	bhi.n	e0fe <am_hal_pwrctrl_blebuck_trim+0x12>
    e0fa:	b002      	add	sp, #8
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	f7ff ff97 	bl	e030 <am_hal_interrupt_master_disable>
    e102:	9001      	str	r0, [sp, #4]
    e104:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e108:	2219      	movs	r2, #25
    e10a:	f362 138b 	bfi	r3, r2, #6, #6
    e10e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e112:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e116:	230c      	movs	r3, #12
    e118:	f363 0205 	bfi	r2, r3, #0, #6
    e11c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e120:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e126:	f36f 5296 	bfc	r2, #22, #1
    e12a:	63da      	str	r2, [r3, #60]	; 0x3c
    e12c:	9801      	ldr	r0, [sp, #4]
    e12e:	b002      	add	sp, #8
    e130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e134:	f7ff bf80 	b.w	e038 <am_hal_interrupt_master_set>
    e138:	40020000 	.word	0x40020000

0000e13c <am_hal_reset_control>:
    e13c:	2803      	cmp	r0, #3
    e13e:	d819      	bhi.n	e174 <am_hal_reset_control+0x38>
    e140:	e8df f000 	tbb	[pc, r0]
    e144:	02140e08 	.word	0x02140e08
    e148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e14c:	2201      	movs	r2, #1
    e14e:	615a      	str	r2, [r3, #20]
    e150:	2000      	movs	r0, #0
    e152:	4770      	bx	lr
    e154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e158:	22d4      	movs	r2, #212	; 0xd4
    e15a:	609a      	str	r2, [r3, #8]
    e15c:	2000      	movs	r0, #0
    e15e:	4770      	bx	lr
    e160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e164:	221b      	movs	r2, #27
    e166:	605a      	str	r2, [r3, #4]
    e168:	2000      	movs	r0, #0
    e16a:	4770      	bx	lr
    e16c:	4b02      	ldr	r3, [pc, #8]	; (e178 <am_hal_reset_control+0x3c>)
    e16e:	2000      	movs	r0, #0
    e170:	6018      	str	r0, [r3, #0]
    e172:	4770      	bx	lr
    e174:	2006      	movs	r0, #6
    e176:	4770      	bx	lr
    e178:	4ffff000 	.word	0x4ffff000

0000e17c <am_hal_stimer_config>:
    e17c:	4a03      	ldr	r2, [pc, #12]	; (e18c <am_hal_stimer_config+0x10>)
    e17e:	4603      	mov	r3, r0
    e180:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e188:	4770      	bx	lr
    e18a:	bf00      	nop
    e18c:	40008000 	.word	0x40008000

0000e190 <am_hal_stimer_counter_get>:
    e190:	4b01      	ldr	r3, [pc, #4]	; (e198 <am_hal_stimer_counter_get+0x8>)
    e192:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    e196:	4770      	bx	lr
    e198:	40008000 	.word	0x40008000

0000e19c <am_hal_stimer_int_enable>:
    e19c:	4a03      	ldr	r2, [pc, #12]	; (e1ac <am_hal_stimer_int_enable+0x10>)
    e19e:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e1a2:	4318      	orrs	r0, r3
    e1a4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e1a8:	4770      	bx	lr
    e1aa:	bf00      	nop
    e1ac:	40008000 	.word	0x40008000

0000e1b0 <am_hal_stimer_int_disable>:
    e1b0:	4a03      	ldr	r2, [pc, #12]	; (e1c0 <am_hal_stimer_int_disable+0x10>)
    e1b2:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e1b6:	ea23 0000 	bic.w	r0, r3, r0
    e1ba:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e1be:	4770      	bx	lr
    e1c0:	40008000 	.word	0x40008000

0000e1c4 <am_hal_stimer_int_clear>:
    e1c4:	4b01      	ldr	r3, [pc, #4]	; (e1cc <am_hal_stimer_int_clear+0x8>)
    e1c6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e1ca:	4770      	bx	lr
    e1cc:	40008000 	.word	0x40008000

0000e1d0 <am_hal_sysctrl_sleep>:
    e1d0:	b530      	push	{r4, r5, lr}
    e1d2:	b083      	sub	sp, #12
    e1d4:	4604      	mov	r4, r0
    e1d6:	f7ff ff2b 	bl	e030 <am_hal_interrupt_master_disable>
    e1da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1de:	9001      	str	r0, [sp, #4]
    e1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e1e2:	075a      	lsls	r2, r3, #29
    e1e4:	f3c3 0580 	ubfx	r5, r3, #2, #1
    e1e8:	d42e      	bmi.n	e248 <am_hal_sysctrl_sleep+0x78>
    e1ea:	b9e4      	cbnz	r4, e226 <am_hal_sysctrl_sleep+0x56>
    e1ec:	4a1c      	ldr	r2, [pc, #112]	; (e260 <am_hal_sysctrl_sleep+0x90>)
    e1ee:	6913      	ldr	r3, [r2, #16]
    e1f0:	f023 0304 	bic.w	r3, r3, #4
    e1f4:	6113      	str	r3, [r2, #16]
    e1f6:	f3bf 8f4f 	dsb	sy
    e1fa:	4a1a      	ldr	r2, [pc, #104]	; (e264 <am_hal_sysctrl_sleep+0x94>)
    e1fc:	4b1a      	ldr	r3, [pc, #104]	; (e268 <am_hal_sysctrl_sleep+0x98>)
    e1fe:	6812      	ldr	r2, [r2, #0]
    e200:	601a      	str	r2, [r3, #0]
    e202:	bf30      	wfi
    e204:	f3bf 8f6f 	isb	sy
    e208:	b925      	cbnz	r5, e214 <am_hal_sysctrl_sleep+0x44>
    e20a:	9801      	ldr	r0, [sp, #4]
    e20c:	f7ff ff14 	bl	e038 <am_hal_interrupt_master_set>
    e210:	b003      	add	sp, #12
    e212:	bd30      	pop	{r4, r5, pc}
    e214:	f10d 0003 	add.w	r0, sp, #3
    e218:	f7ff fb68 	bl	d8ec <am_hal_burst_mode_enable>
    e21c:	9801      	ldr	r0, [sp, #4]
    e21e:	f7ff ff0b 	bl	e038 <am_hal_interrupt_master_set>
    e222:	b003      	add	sp, #12
    e224:	bd30      	pop	{r4, r5, pc}
    e226:	4b11      	ldr	r3, [pc, #68]	; (e26c <am_hal_sysctrl_sleep+0x9c>)
    e228:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e22c:	07db      	lsls	r3, r3, #31
    e22e:	d4dd      	bmi.n	e1ec <am_hal_sysctrl_sleep+0x1c>
    e230:	4b0f      	ldr	r3, [pc, #60]	; (e270 <am_hal_sysctrl_sleep+0xa0>)
    e232:	681a      	ldr	r2, [r3, #0]
    e234:	b912      	cbnz	r2, e23c <am_hal_sysctrl_sleep+0x6c>
    e236:	4a0f      	ldr	r2, [pc, #60]	; (e274 <am_hal_sysctrl_sleep+0xa4>)
    e238:	6812      	ldr	r2, [r2, #0]
    e23a:	601a      	str	r2, [r3, #0]
    e23c:	4a08      	ldr	r2, [pc, #32]	; (e260 <am_hal_sysctrl_sleep+0x90>)
    e23e:	6913      	ldr	r3, [r2, #16]
    e240:	f043 0304 	orr.w	r3, r3, #4
    e244:	6113      	str	r3, [r2, #16]
    e246:	e7d6      	b.n	e1f6 <am_hal_sysctrl_sleep+0x26>
    e248:	f10d 0003 	add.w	r0, sp, #3
    e24c:	f7ff fb7e 	bl	d94c <am_hal_burst_mode_disable>
    e250:	b100      	cbz	r0, e254 <am_hal_sysctrl_sleep+0x84>
    e252:	e7fe      	b.n	e252 <am_hal_sysctrl_sleep+0x82>
    e254:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e258:	2b01      	cmp	r3, #1
    e25a:	d0c6      	beq.n	e1ea <am_hal_sysctrl_sleep+0x1a>
    e25c:	e7f9      	b.n	e252 <am_hal_sysctrl_sleep+0x82>
    e25e:	bf00      	nop
    e260:	e000ed00 	.word	0xe000ed00
    e264:	5fff0000 	.word	0x5fff0000
    e268:	10000a70 	.word	0x10000a70
    e26c:	40020000 	.word	0x40020000
    e270:	10000a6c 	.word	0x10000a6c
    e274:	4ffff000 	.word	0x4ffff000

0000e278 <am_hal_uart_initialize>:
    e278:	2801      	cmp	r0, #1
    e27a:	d819      	bhi.n	e2b0 <am_hal_uart_initialize+0x38>
    e27c:	b1e9      	cbz	r1, e2ba <am_hal_uart_initialize+0x42>
    e27e:	b4f0      	push	{r4, r5, r6, r7}
    e280:	2264      	movs	r2, #100	; 0x64
    e282:	4d0f      	ldr	r5, [pc, #60]	; (e2c0 <am_hal_uart_initialize+0x48>)
    e284:	fb02 f200 	mul.w	r2, r2, r0
    e288:	18ac      	adds	r4, r5, r2
    e28a:	78e3      	ldrb	r3, [r4, #3]
    e28c:	f3c3 0700 	ubfx	r7, r3, #0, #1
    e290:	f013 0301 	ands.w	r3, r3, #1
    e294:	d10e      	bne.n	e2b4 <am_hal_uart_initialize+0x3c>
    e296:	6260      	str	r0, [r4, #36]	; 0x24
    e298:	58ae      	ldr	r6, [r5, r2]
    e29a:	480a      	ldr	r0, [pc, #40]	; (e2c4 <am_hal_uart_initialize+0x4c>)
    e29c:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
    e2a0:	4330      	orrs	r0, r6
    e2a2:	50a8      	str	r0, [r5, r2]
    e2a4:	7127      	strb	r7, [r4, #4]
    e2a6:	6623      	str	r3, [r4, #96]	; 0x60
    e2a8:	4618      	mov	r0, r3
    e2aa:	600c      	str	r4, [r1, #0]
    e2ac:	bcf0      	pop	{r4, r5, r6, r7}
    e2ae:	4770      	bx	lr
    e2b0:	2005      	movs	r0, #5
    e2b2:	4770      	bx	lr
    e2b4:	2007      	movs	r0, #7
    e2b6:	bcf0      	pop	{r4, r5, r6, r7}
    e2b8:	4770      	bx	lr
    e2ba:	2006      	movs	r0, #6
    e2bc:	4770      	bx	lr
    e2be:	bf00      	nop
    e2c0:	10000a78 	.word	0x10000a78
    e2c4:	01ea9e06 	.word	0x01ea9e06

0000e2c8 <am_hal_uart_power_control>:
    e2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2ca:	4604      	mov	r4, r0
    e2cc:	6800      	ldr	r0, [r0, #0]
    e2ce:	4b39      	ldr	r3, [pc, #228]	; (e3b4 <am_hal_uart_power_control+0xec>)
    e2d0:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e2d4:	429e      	cmp	r6, r3
    e2d6:	b085      	sub	sp, #20
    e2d8:	d13f      	bne.n	e35a <am_hal_uart_power_control+0x92>
    e2da:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e2dc:	f105 0008 	add.w	r0, r5, #8
    e2e0:	b2c7      	uxtb	r7, r0
    e2e2:	b1a1      	cbz	r1, e30e <am_hal_uart_power_control+0x46>
    e2e4:	3901      	subs	r1, #1
    e2e6:	2901      	cmp	r1, #1
    e2e8:	d80e      	bhi.n	e308 <am_hal_uart_power_control+0x40>
    e2ea:	2a00      	cmp	r2, #0
    e2ec:	d138      	bne.n	e360 <am_hal_uart_power_control+0x98>
    e2ee:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e2f2:	351c      	adds	r5, #28
    e2f4:	032d      	lsls	r5, r5, #12
    e2f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2fa:	646b      	str	r3, [r5, #68]	; 0x44
    e2fc:	4638      	mov	r0, r7
    e2fe:	f7ff fec9 	bl	e094 <am_hal_pwrctrl_periph_disable>
    e302:	2000      	movs	r0, #0
    e304:	b005      	add	sp, #20
    e306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e308:	2006      	movs	r0, #6
    e30a:	b005      	add	sp, #20
    e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e30e:	2a00      	cmp	r2, #0
    e310:	d047      	beq.n	e3a2 <am_hal_uart_power_control+0xda>
    e312:	7923      	ldrb	r3, [r4, #4]
    e314:	2b00      	cmp	r3, #0
    e316:	d04b      	beq.n	e3b0 <am_hal_uart_power_control+0xe8>
    e318:	4638      	mov	r0, r7
    e31a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e31e:	9101      	str	r1, [sp, #4]
    e320:	351c      	adds	r5, #28
    e322:	f7ff fe8d 	bl	e040 <am_hal_pwrctrl_periph_enable>
    e326:	f7ff fe83 	bl	e030 <am_hal_interrupt_master_disable>
    e32a:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
    e32e:	032d      	lsls	r5, r5, #12
    e330:	9002      	str	r0, [sp, #8]
    e332:	6922      	ldr	r2, [r4, #16]
    e334:	622b      	str	r3, [r5, #32]
    e336:	6963      	ldr	r3, [r4, #20]
    e338:	69a0      	ldr	r0, [r4, #24]
    e33a:	626e      	str	r6, [r5, #36]	; 0x24
    e33c:	62aa      	str	r2, [r5, #40]	; 0x28
    e33e:	69e2      	ldr	r2, [r4, #28]
    e340:	62eb      	str	r3, [r5, #44]	; 0x2c
    e342:	6a23      	ldr	r3, [r4, #32]
    e344:	9901      	ldr	r1, [sp, #4]
    e346:	6328      	str	r0, [r5, #48]	; 0x30
    e348:	636a      	str	r2, [r5, #52]	; 0x34
    e34a:	63ab      	str	r3, [r5, #56]	; 0x38
    e34c:	9802      	ldr	r0, [sp, #8]
    e34e:	7121      	strb	r1, [r4, #4]
    e350:	f7ff fe72 	bl	e038 <am_hal_interrupt_master_set>
    e354:	9901      	ldr	r1, [sp, #4]
    e356:	4608      	mov	r0, r1
    e358:	e7d7      	b.n	e30a <am_hal_uart_power_control+0x42>
    e35a:	2002      	movs	r0, #2
    e35c:	b005      	add	sp, #20
    e35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e360:	f7ff fe66 	bl	e030 <am_hal_interrupt_master_disable>
    e364:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e368:	351c      	adds	r5, #28
    e36a:	032d      	lsls	r5, r5, #12
    e36c:	9003      	str	r0, [sp, #12]
    e36e:	6a2a      	ldr	r2, [r5, #32]
    e370:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e372:	60a2      	str	r2, [r4, #8]
    e374:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e376:	60e3      	str	r3, [r4, #12]
    e378:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e37a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e37c:	6163      	str	r3, [r4, #20]
    e37e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e380:	6122      	str	r2, [r4, #16]
    e382:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e384:	61e3      	str	r3, [r4, #28]
    e386:	2301      	movs	r3, #1
    e388:	7123      	strb	r3, [r4, #4]
    e38a:	9803      	ldr	r0, [sp, #12]
    e38c:	61a1      	str	r1, [r4, #24]
    e38e:	6222      	str	r2, [r4, #32]
    e390:	f7ff fe52 	bl	e038 <am_hal_interrupt_master_set>
    e394:	6823      	ldr	r3, [r4, #0]
    e396:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e39a:	42b3      	cmp	r3, r6
    e39c:	d1ae      	bne.n	e2fc <am_hal_uart_power_control+0x34>
    e39e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e3a0:	e7a5      	b.n	e2ee <am_hal_uart_power_control+0x26>
    e3a2:	4638      	mov	r0, r7
    e3a4:	9201      	str	r2, [sp, #4]
    e3a6:	f7ff fe4b 	bl	e040 <am_hal_pwrctrl_periph_enable>
    e3aa:	9a01      	ldr	r2, [sp, #4]
    e3ac:	4610      	mov	r0, r2
    e3ae:	e7ac      	b.n	e30a <am_hal_uart_power_control+0x42>
    e3b0:	2007      	movs	r0, #7
    e3b2:	e7aa      	b.n	e30a <am_hal_uart_power_control+0x42>
    e3b4:	01ea9e06 	.word	0x01ea9e06

0000e3b8 <am_hal_uart_configure>:
    e3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e3bc:	6802      	ldr	r2, [r0, #0]
    e3be:	4b72      	ldr	r3, [pc, #456]	; (e588 <am_hal_uart_configure+0x1d0>)
    e3c0:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e3c4:	4598      	cmp	r8, r3
    e3c6:	b085      	sub	sp, #20
    e3c8:	d003      	beq.n	e3d2 <am_hal_uart_configure+0x1a>
    e3ca:	2002      	movs	r0, #2
    e3cc:	b005      	add	sp, #20
    e3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e3d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e3d4:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e3d8:	341c      	adds	r4, #28
    e3da:	0324      	lsls	r4, r4, #12
    e3dc:	f04f 0900 	mov.w	r9, #0
    e3e0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    e3e4:	460e      	mov	r6, r1
    e3e6:	4605      	mov	r5, r0
    e3e8:	f7ff fe22 	bl	e030 <am_hal_interrupt_master_disable>
    e3ec:	9001      	str	r0, [sp, #4]
    e3ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3f0:	f043 0308 	orr.w	r3, r3, #8
    e3f4:	8623      	strh	r3, [r4, #48]	; 0x30
    e3f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3f8:	2701      	movs	r7, #1
    e3fa:	f367 1306 	bfi	r3, r7, #4, #3
    e3fe:	8623      	strh	r3, [r4, #48]	; 0x30
    e400:	9801      	ldr	r0, [sp, #4]
    e402:	f7ff fe19 	bl	e038 <am_hal_interrupt_master_set>
    e406:	f7ff fe13 	bl	e030 <am_hal_interrupt_master_disable>
    e40a:	9002      	str	r0, [sp, #8]
    e40c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e40e:	f369 0300 	bfi	r3, r9, #0, #1
    e412:	8623      	strh	r3, [r4, #48]	; 0x30
    e414:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e416:	f369 2349 	bfi	r3, r9, #9, #1
    e41a:	8623      	strh	r3, [r4, #48]	; 0x30
    e41c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e41e:	f369 2308 	bfi	r3, r9, #8, #1
    e422:	8623      	strh	r3, [r4, #48]	; 0x30
    e424:	9802      	ldr	r0, [sp, #8]
    e426:	f7ff fe07 	bl	e038 <am_hal_interrupt_master_set>
    e42a:	6832      	ldr	r2, [r6, #0]
    e42c:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e430:	d876      	bhi.n	e520 <am_hal_uart_configure+0x168>
    e432:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e434:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e438:	3b01      	subs	r3, #1
    e43a:	b2db      	uxtb	r3, r3
    e43c:	2b03      	cmp	r3, #3
    e43e:	d869      	bhi.n	e514 <am_hal_uart_configure+0x15c>
    e440:	4952      	ldr	r1, [pc, #328]	; (e58c <am_hal_uart_configure+0x1d4>)
    e442:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e446:	0112      	lsls	r2, r2, #4
    e448:	4291      	cmp	r1, r2
    e44a:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e44e:	fbb1 f0f2 	udiv	r0, r1, r2
    e452:	fbb3 f3f2 	udiv	r3, r3, r2
    e456:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e45a:	d357      	bcc.n	e50c <am_hal_uart_configure+0x154>
    e45c:	089a      	lsrs	r2, r3, #2
    e45e:	6260      	str	r0, [r4, #36]	; 0x24
    e460:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    e464:	6260      	str	r0, [r4, #36]	; 0x24
    e466:	fbb1 f1f2 	udiv	r1, r1, r2
    e46a:	62a3      	str	r3, [r4, #40]	; 0x28
    e46c:	6629      	str	r1, [r5, #96]	; 0x60
    e46e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e470:	f369 338e 	bfi	r3, r9, #14, #1
    e474:	8623      	strh	r3, [r4, #48]	; 0x30
    e476:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e478:	f369 33cf 	bfi	r3, r9, #15, #1
    e47c:	8623      	strh	r3, [r4, #48]	; 0x30
    e47e:	e9d6 1002 	ldrd	r1, r0, [r6, #8]
    e482:	6873      	ldr	r3, [r6, #4]
    e484:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e486:	4303      	orrs	r3, r0
    e488:	4319      	orrs	r1, r3
    e48a:	6933      	ldr	r3, [r6, #16]
    e48c:	f041 0110 	orr.w	r1, r1, #16
    e490:	431a      	orrs	r2, r3
    e492:	6973      	ldr	r3, [r6, #20]
    e494:	6322      	str	r2, [r4, #48]	; 0x30
    e496:	6363      	str	r3, [r4, #52]	; 0x34
    e498:	62e1      	str	r1, [r4, #44]	; 0x2c
    e49a:	f7ff fdc9 	bl	e030 <am_hal_interrupt_master_disable>
    e49e:	9003      	str	r0, [sp, #12]
    e4a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e4a2:	f043 0301 	orr.w	r3, r3, #1
    e4a6:	8623      	strh	r3, [r4, #48]	; 0x30
    e4a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e4ae:	8623      	strh	r3, [r4, #48]	; 0x30
    e4b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e4b6:	8623      	strh	r3, [r4, #48]	; 0x30
    e4b8:	9803      	ldr	r0, [sp, #12]
    e4ba:	f7ff fdbd 	bl	e038 <am_hal_interrupt_master_set>
    e4be:	682b      	ldr	r3, [r5, #0]
    e4c0:	f023 497e 	bic.w	r9, r3, #4261412864	; 0xfe000000
    e4c4:	45c1      	cmp	r9, r8
    e4c6:	d11d      	bne.n	e504 <am_hal_uart_configure+0x14c>
    e4c8:	69b1      	ldr	r1, [r6, #24]
    e4ca:	e9d6 4808 	ldrd	r4, r8, [r6, #32]
    e4ce:	b109      	cbz	r1, e4d4 <am_hal_uart_configure+0x11c>
    e4d0:	69f3      	ldr	r3, [r6, #28]
    e4d2:	bb4b      	cbnz	r3, e528 <am_hal_uart_configure+0x170>
    e4d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e4d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e4da:	331c      	adds	r3, #28
    e4dc:	031b      	lsls	r3, r3, #12
    e4de:	2100      	movs	r1, #0
    e4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4e2:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
    e4e6:	f022 0220 	bic.w	r2, r2, #32
    e4ea:	639a      	str	r2, [r3, #56]	; 0x38
    e4ec:	b114      	cbz	r4, e4f4 <am_hal_uart_configure+0x13c>
    e4ee:	f1b8 0f00 	cmp.w	r8, #0
    e4f2:	d12f      	bne.n	e554 <am_hal_uart_configure+0x19c>
    e4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4f6:	2000      	movs	r0, #0
    e4f8:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e4fc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e500:	639a      	str	r2, [r3, #56]	; 0x38
    e502:	e763      	b.n	e3cc <am_hal_uart_configure+0x14>
    e504:	2000      	movs	r0, #0
    e506:	b005      	add	sp, #20
    e508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e50c:	4820      	ldr	r0, [pc, #128]	; (e590 <am_hal_uart_configure+0x1d8>)
    e50e:	f8c5 9060 	str.w	r9, [r5, #96]	; 0x60
    e512:	e75b      	b.n	e3cc <am_hal_uart_configure+0x14>
    e514:	481f      	ldr	r0, [pc, #124]	; (e594 <am_hal_uart_configure+0x1dc>)
    e516:	f8c5 9060 	str.w	r9, [r5, #96]	; 0x60
    e51a:	b005      	add	sp, #20
    e51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e520:	481b      	ldr	r0, [pc, #108]	; (e590 <am_hal_uart_configure+0x1d8>)
    e522:	b005      	add	sp, #20
    e524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e528:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    e52c:	463a      	mov	r2, r7
    e52e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e532:	f000 fb13 	bl	eb5c <am_hal_queue_init>
    e536:	682b      	ldr	r3, [r5, #0]
    e538:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e53c:	454b      	cmp	r3, r9
    e53e:	d1e1      	bne.n	e504 <am_hal_uart_configure+0x14c>
    e540:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e542:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e546:	331c      	adds	r3, #28
    e548:	031b      	lsls	r3, r3, #12
    e54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e54c:	f042 0220 	orr.w	r2, r2, #32
    e550:	639a      	str	r2, [r3, #56]	; 0x38
    e552:	e7cb      	b.n	e4ec <am_hal_uart_configure+0x134>
    e554:	2201      	movs	r2, #1
    e556:	4643      	mov	r3, r8
    e558:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e55c:	4621      	mov	r1, r4
    e55e:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e562:	f000 fafb 	bl	eb5c <am_hal_queue_init>
    e566:	682b      	ldr	r3, [r5, #0]
    e568:	4a07      	ldr	r2, [pc, #28]	; (e588 <am_hal_uart_configure+0x1d0>)
    e56a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e56e:	4293      	cmp	r3, r2
    e570:	d1c8      	bne.n	e504 <am_hal_uart_configure+0x14c>
    e572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e574:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e578:	331c      	adds	r3, #28
    e57a:	031b      	lsls	r3, r3, #12
    e57c:	2000      	movs	r0, #0
    e57e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e580:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e584:	639a      	str	r2, [r3, #56]	; 0x38
    e586:	e721      	b.n	e3cc <am_hal_uart_configure+0x14>
    e588:	01ea9e06 	.word	0x01ea9e06
    e58c:	0000f254 	.word	0x0000f254
    e590:	08000003 	.word	0x08000003
    e594:	08000002 	.word	0x08000002

0000e598 <am_hal_uart_transfer>:
    e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e59c:	ed2d 8b02 	vpush	{d8}
    e5a0:	680d      	ldr	r5, [r1, #0]
    e5a2:	b091      	sub	sp, #68	; 0x44
    e5a4:	4604      	mov	r4, r0
    e5a6:	b14d      	cbz	r5, e5bc <am_hal_uart_transfer+0x24>
    e5a8:	2d01      	cmp	r5, #1
    e5aa:	f000 8091 	beq.w	e6d0 <am_hal_uart_transfer+0x138>
    e5ae:	2507      	movs	r5, #7
    e5b0:	4628      	mov	r0, r5
    e5b2:	b011      	add	sp, #68	; 0x44
    e5b4:	ecbd 8b02 	vpop	{d8}
    e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5bc:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e5c0:	684b      	ldr	r3, [r1, #4]
    e5c2:	690a      	ldr	r2, [r1, #16]
    e5c4:	688e      	ldr	r6, [r1, #8]
    e5c6:	9301      	str	r3, [sp, #4]
    e5c8:	9203      	str	r2, [sp, #12]
    e5ca:	f1b9 0f00 	cmp.w	r9, #0
    e5ce:	f000 8113 	beq.w	e7f8 <am_hal_uart_transfer+0x260>
    e5d2:	2e00      	cmp	r6, #0
    e5d4:	f000 8179 	beq.w	e8ca <am_hal_uart_transfer+0x332>
    e5d8:	2800      	cmp	r0, #0
    e5da:	f000 8168 	beq.w	e8ae <am_hal_uart_transfer+0x316>
    e5de:	46aa      	mov	sl, r5
    e5e0:	462f      	mov	r7, r5
    e5e2:	9502      	str	r5, [sp, #8]
    e5e4:	4605      	mov	r5, r0
    e5e6:	4619      	mov	r1, r3
    e5e8:	682a      	ldr	r2, [r5, #0]
    e5ea:	4bb4      	ldr	r3, [pc, #720]	; (e8bc <am_hal_uart_transfer+0x324>)
    e5ec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e5f0:	429a      	cmp	r2, r3
    e5f2:	d12f      	bne.n	e654 <am_hal_uart_transfer+0xbc>
    e5f4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e5f8:	2a00      	cmp	r2, #0
    e5fa:	d133      	bne.n	e664 <am_hal_uart_transfer+0xcc>
    e5fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e5fe:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e602:	301c      	adds	r0, #28
    e604:	3901      	subs	r1, #1
    e606:	0300      	lsls	r0, r0, #12
    e608:	e005      	b.n	e616 <am_hal_uart_transfer+0x7e>
    e60a:	3201      	adds	r2, #1
    e60c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e610:	6003      	str	r3, [r0, #0]
    e612:	42b2      	cmp	r2, r6
    e614:	d023      	beq.n	e65e <am_hal_uart_transfer+0xc6>
    e616:	6983      	ldr	r3, [r0, #24]
    e618:	069c      	lsls	r4, r3, #26
    e61a:	d5f6      	bpl.n	e60a <am_hal_uart_transfer+0x72>
    e61c:	4417      	add	r7, r2
    e61e:	1ab6      	subs	r6, r6, r2
    e620:	b936      	cbnz	r6, e630 <am_hal_uart_transfer+0x98>
    e622:	9d02      	ldr	r5, [sp, #8]
    e624:	9b03      	ldr	r3, [sp, #12]
    e626:	2b00      	cmp	r3, #0
    e628:	f000 808d 	beq.w	e746 <am_hal_uart_transfer+0x1ae>
    e62c:	601f      	str	r7, [r3, #0]
    e62e:	e7bf      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e630:	2010      	movs	r0, #16
    e632:	f7ff fad1 	bl	dbd8 <am_hal_flash_delay>
    e636:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e63a:	bf18      	it	ne
    e63c:	f10a 0a01 	addne.w	sl, sl, #1
    e640:	45d1      	cmp	r9, sl
    e642:	d9ee      	bls.n	e622 <am_hal_uart_transfer+0x8a>
    e644:	9b01      	ldr	r3, [sp, #4]
    e646:	682a      	ldr	r2, [r5, #0]
    e648:	19d9      	adds	r1, r3, r7
    e64a:	4b9c      	ldr	r3, [pc, #624]	; (e8bc <am_hal_uart_transfer+0x324>)
    e64c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e650:	429a      	cmp	r2, r3
    e652:	d0cf      	beq.n	e5f4 <am_hal_uart_transfer+0x5c>
    e654:	9b03      	ldr	r3, [sp, #12]
    e656:	b103      	cbz	r3, e65a <am_hal_uart_transfer+0xc2>
    e658:	601f      	str	r7, [r3, #0]
    e65a:	2502      	movs	r5, #2
    e65c:	e7a8      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e65e:	9d02      	ldr	r5, [sp, #8]
    e660:	4417      	add	r7, r2
    e662:	e7df      	b.n	e624 <am_hal_uart_transfer+0x8c>
    e664:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e668:	eba2 0b00 	sub.w	fp, r2, r0
    e66c:	45b3      	cmp	fp, r6
    e66e:	bf28      	it	cs
    e670:	46b3      	movcs	fp, r6
    e672:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e676:	465a      	mov	r2, fp
    e678:	4620      	mov	r0, r4
    e67a:	f000 fa7b 	bl	eb74 <am_hal_queue_item_add>
    e67e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    e682:	f7ff fcd5 	bl	e030 <am_hal_interrupt_master_disable>
    e686:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
    e68a:	f108 081c 	add.w	r8, r8, #28
    e68e:	ea4f 3808 	mov.w	r8, r8, lsl #12
    e692:	9008      	str	r0, [sp, #32]
    e694:	e00d      	b.n	e6b2 <am_hal_uart_transfer+0x11a>
    e696:	f000 faab 	bl	ebf0 <am_hal_queue_item_get>
    e69a:	b190      	cbz	r0, e6c2 <am_hal_uart_transfer+0x12a>
    e69c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e69e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e6a2:	331c      	adds	r3, #28
    e6a4:	031b      	lsls	r3, r3, #12
    e6a6:	699a      	ldr	r2, [r3, #24]
    e6a8:	0692      	lsls	r2, r2, #26
    e6aa:	bf5c      	itt	pl
    e6ac:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e6b0:	601a      	strpl	r2, [r3, #0]
    e6b2:	f8d8 3018 	ldr.w	r3, [r8, #24]
    e6b6:	069b      	lsls	r3, r3, #26
    e6b8:	f04f 0201 	mov.w	r2, #1
    e6bc:	a907      	add	r1, sp, #28
    e6be:	4620      	mov	r0, r4
    e6c0:	d5e9      	bpl.n	e696 <am_hal_uart_transfer+0xfe>
    e6c2:	9808      	ldr	r0, [sp, #32]
    e6c4:	445f      	add	r7, fp
    e6c6:	eba6 060b 	sub.w	r6, r6, fp
    e6ca:	f7ff fcb5 	bl	e038 <am_hal_interrupt_master_set>
    e6ce:	e7a7      	b.n	e620 <am_hal_uart_transfer+0x88>
    e6d0:	68cd      	ldr	r5, [r1, #12]
    e6d2:	690b      	ldr	r3, [r1, #16]
    e6d4:	9301      	str	r3, [sp, #4]
    e6d6:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e6da:	2d00      	cmp	r5, #0
    e6dc:	f000 80b8 	beq.w	e850 <am_hal_uart_transfer+0x2b8>
    e6e0:	2f00      	cmp	r7, #0
    e6e2:	f000 8123 	beq.w	e92c <am_hal_uart_transfer+0x394>
    e6e6:	2800      	cmp	r0, #0
    e6e8:	f000 80ec 	beq.w	e8c4 <am_hal_uart_transfer+0x32c>
    e6ec:	6822      	ldr	r2, [r4, #0]
    e6ee:	f8df a1cc 	ldr.w	sl, [pc, #460]	; e8bc <am_hal_uart_transfer+0x324>
    e6f2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e6f6:	f04f 0900 	mov.w	r9, #0
    e6fa:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e6fe:	4552      	cmp	r2, sl
    e700:	ee08 3a10 	vmov	s16, r3
    e704:	46c8      	mov	r8, r9
    e706:	465e      	mov	r6, fp
    e708:	d134      	bne.n	e774 <am_hal_uart_transfer+0x1dc>
    e70a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e70e:	2a00      	cmp	r2, #0
    e710:	d138      	bne.n	e784 <am_hal_uart_transfer+0x1ec>
    e712:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e714:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e718:	311c      	adds	r1, #28
    e71a:	1e73      	subs	r3, r6, #1
    e71c:	0309      	lsls	r1, r1, #12
    e71e:	e008      	b.n	e732 <am_hal_uart_transfer+0x19a>
    e720:	6808      	ldr	r0, [r1, #0]
    e722:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e726:	d163      	bne.n	e7f0 <am_hal_uart_transfer+0x258>
    e728:	3201      	adds	r2, #1
    e72a:	42ba      	cmp	r2, r7
    e72c:	f803 0f01 	strb.w	r0, [r3, #1]!
    e730:	d056      	beq.n	e7e0 <am_hal_uart_transfer+0x248>
    e732:	6988      	ldr	r0, [r1, #24]
    e734:	06c0      	lsls	r0, r0, #27
    e736:	d5f3      	bpl.n	e720 <am_hal_uart_transfer+0x188>
    e738:	4490      	add	r8, r2
    e73a:	1abf      	subs	r7, r7, r2
    e73c:	b957      	cbnz	r7, e754 <am_hal_uart_transfer+0x1bc>
    e73e:	9b01      	ldr	r3, [sp, #4]
    e740:	b10b      	cbz	r3, e746 <am_hal_uart_transfer+0x1ae>
    e742:	f8c3 8000 	str.w	r8, [r3]
    e746:	2500      	movs	r5, #0
    e748:	4628      	mov	r0, r5
    e74a:	b011      	add	sp, #68	; 0x44
    e74c:	ecbd 8b02 	vpop	{d8}
    e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e754:	2010      	movs	r0, #16
    e756:	f7ff fa3f 	bl	dbd8 <am_hal_flash_delay>
    e75a:	1c6b      	adds	r3, r5, #1
    e75c:	bf18      	it	ne
    e75e:	f109 0901 	addne.w	r9, r9, #1
    e762:	454d      	cmp	r5, r9
    e764:	d9eb      	bls.n	e73e <am_hal_uart_transfer+0x1a6>
    e766:	6822      	ldr	r2, [r4, #0]
    e768:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e76c:	4552      	cmp	r2, sl
    e76e:	eb0b 0608 	add.w	r6, fp, r8
    e772:	d0ca      	beq.n	e70a <am_hal_uart_transfer+0x172>
    e774:	2502      	movs	r5, #2
    e776:	9b01      	ldr	r3, [sp, #4]
    e778:	2b00      	cmp	r3, #0
    e77a:	f43f af19 	beq.w	e5b0 <am_hal_uart_transfer+0x18>
    e77e:	f8c3 8000 	str.w	r8, [r3]
    e782:	e715      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e784:	f7ff fc54 	bl	e030 <am_hal_interrupt_master_disable>
    e788:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e78a:	9007      	str	r0, [sp, #28]
    e78c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e790:	321c      	adds	r2, #28
    e792:	0310      	lsls	r0, r2, #12
    e794:	f10d 0c20 	add.w	ip, sp, #32
    e798:	2200      	movs	r2, #0
    e79a:	6983      	ldr	r3, [r0, #24]
    e79c:	06db      	lsls	r3, r3, #27
    e79e:	d409      	bmi.n	e7b4 <am_hal_uart_transfer+0x21c>
    e7a0:	6803      	ldr	r3, [r0, #0]
    e7a2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e7a6:	f102 0201 	add.w	r2, r2, #1
    e7aa:	d11b      	bne.n	e7e4 <am_hal_uart_transfer+0x24c>
    e7ac:	2a20      	cmp	r2, #32
    e7ae:	f80c 3b01 	strb.w	r3, [ip], #1
    e7b2:	d1f2      	bne.n	e79a <am_hal_uart_transfer+0x202>
    e7b4:	ee18 0a10 	vmov	r0, s16
    e7b8:	a908      	add	r1, sp, #32
    e7ba:	f000 f9db 	bl	eb74 <am_hal_queue_item_add>
    e7be:	2800      	cmp	r0, #0
    e7c0:	d077      	beq.n	e8b2 <am_hal_uart_transfer+0x31a>
    e7c2:	9807      	ldr	r0, [sp, #28]
    e7c4:	f7ff fc38 	bl	e038 <am_hal_interrupt_master_set>
    e7c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e7ca:	42ba      	cmp	r2, r7
    e7cc:	bf28      	it	cs
    e7ce:	463a      	movcs	r2, r7
    e7d0:	ee18 0a10 	vmov	r0, s16
    e7d4:	4631      	mov	r1, r6
    e7d6:	4490      	add	r8, r2
    e7d8:	1abf      	subs	r7, r7, r2
    e7da:	f000 fa09 	bl	ebf0 <am_hal_queue_item_get>
    e7de:	e7ad      	b.n	e73c <am_hal_uart_transfer+0x1a4>
    e7e0:	4490      	add	r8, r2
    e7e2:	e7ac      	b.n	e73e <am_hal_uart_transfer+0x1a6>
    e7e4:	9807      	ldr	r0, [sp, #28]
    e7e6:	f7ff fc27 	bl	e038 <am_hal_interrupt_master_set>
    e7ea:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e7ee:	e7c2      	b.n	e776 <am_hal_uart_transfer+0x1de>
    e7f0:	4490      	add	r8, r2
    e7f2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e7f6:	e7be      	b.n	e776 <am_hal_uart_transfer+0x1de>
    e7f8:	2800      	cmp	r0, #0
    e7fa:	f43f af2e 	beq.w	e65a <am_hal_uart_transfer+0xc2>
    e7fe:	6803      	ldr	r3, [r0, #0]
    e800:	4a2e      	ldr	r2, [pc, #184]	; (e8bc <am_hal_uart_transfer+0x324>)
    e802:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e806:	4293      	cmp	r3, r2
    e808:	f47f af27 	bne.w	e65a <am_hal_uart_transfer+0xc2>
    e80c:	9b03      	ldr	r3, [sp, #12]
    e80e:	b10b      	cbz	r3, e814 <am_hal_uart_transfer+0x27c>
    e810:	f8c3 9000 	str.w	r9, [r3]
    e814:	2e00      	cmp	r6, #0
    e816:	d096      	beq.n	e746 <am_hal_uart_transfer+0x1ae>
    e818:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e81c:	2d00      	cmp	r5, #0
    e81e:	d156      	bne.n	e8ce <am_hal_uart_transfer+0x336>
    e820:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e822:	9b01      	ldr	r3, [sp, #4]
    e824:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e828:	321c      	adds	r2, #28
    e82a:	0312      	lsls	r2, r2, #12
    e82c:	3b01      	subs	r3, #1
    e82e:	e005      	b.n	e83c <am_hal_uart_transfer+0x2a4>
    e830:	3501      	adds	r5, #1
    e832:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e836:	6011      	str	r1, [r2, #0]
    e838:	42ae      	cmp	r6, r5
    e83a:	d002      	beq.n	e842 <am_hal_uart_transfer+0x2aa>
    e83c:	6991      	ldr	r1, [r2, #24]
    e83e:	0689      	lsls	r1, r1, #26
    e840:	d5f6      	bpl.n	e830 <am_hal_uart_transfer+0x298>
    e842:	9b03      	ldr	r3, [sp, #12]
    e844:	2b00      	cmp	r3, #0
    e846:	f43f af7e 	beq.w	e746 <am_hal_uart_transfer+0x1ae>
    e84a:	601d      	str	r5, [r3, #0]
    e84c:	2500      	movs	r5, #0
    e84e:	e6af      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e850:	2800      	cmp	r0, #0
    e852:	f43f af02 	beq.w	e65a <am_hal_uart_transfer+0xc2>
    e856:	6802      	ldr	r2, [r0, #0]
    e858:	4918      	ldr	r1, [pc, #96]	; (e8bc <am_hal_uart_transfer+0x324>)
    e85a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e85e:	428a      	cmp	r2, r1
    e860:	f47f aefb 	bne.w	e65a <am_hal_uart_transfer+0xc2>
    e864:	b103      	cbz	r3, e868 <am_hal_uart_transfer+0x2d0>
    e866:	601d      	str	r5, [r3, #0]
    e868:	2f00      	cmp	r7, #0
    e86a:	f43f af6c 	beq.w	e746 <am_hal_uart_transfer+0x1ae>
    e86e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e872:	2a00      	cmp	r2, #0
    e874:	d15c      	bne.n	e930 <am_hal_uart_transfer+0x398>
    e876:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e878:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e87c:	301c      	adds	r0, #28
    e87e:	0300      	lsls	r0, r0, #12
    e880:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    e884:	4614      	mov	r4, r2
    e886:	e009      	b.n	e89c <am_hal_uart_transfer+0x304>
    e888:	6801      	ldr	r1, [r0, #0]
    e88a:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
    e88e:	f040 8080 	bne.w	e992 <am_hal_uart_transfer+0x3fa>
    e892:	3401      	adds	r4, #1
    e894:	42a7      	cmp	r7, r4
    e896:	f803 1f01 	strb.w	r1, [r3, #1]!
    e89a:	d07d      	beq.n	e998 <am_hal_uart_transfer+0x400>
    e89c:	6982      	ldr	r2, [r0, #24]
    e89e:	06d2      	lsls	r2, r2, #27
    e8a0:	d5f2      	bpl.n	e888 <am_hal_uart_transfer+0x2f0>
    e8a2:	9b01      	ldr	r3, [sp, #4]
    e8a4:	2b00      	cmp	r3, #0
    e8a6:	f43f ae83 	beq.w	e5b0 <am_hal_uart_transfer+0x18>
    e8aa:	601c      	str	r4, [r3, #0]
    e8ac:	e680      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e8ae:	4607      	mov	r7, r0
    e8b0:	e6d0      	b.n	e654 <am_hal_uart_transfer+0xbc>
    e8b2:	9807      	ldr	r0, [sp, #28]
    e8b4:	4d02      	ldr	r5, [pc, #8]	; (e8c0 <am_hal_uart_transfer+0x328>)
    e8b6:	f7ff fbbf 	bl	e038 <am_hal_interrupt_master_set>
    e8ba:	e75c      	b.n	e776 <am_hal_uart_transfer+0x1de>
    e8bc:	01ea9e06 	.word	0x01ea9e06
    e8c0:	08000001 	.word	0x08000001
    e8c4:	4680      	mov	r8, r0
    e8c6:	2502      	movs	r5, #2
    e8c8:	e755      	b.n	e776 <am_hal_uart_transfer+0x1de>
    e8ca:	462f      	mov	r7, r5
    e8cc:	e6aa      	b.n	e624 <am_hal_uart_transfer+0x8c>
    e8ce:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
    e8d2:	1b5d      	subs	r5, r3, r5
    e8d4:	42b5      	cmp	r5, r6
    e8d6:	bf28      	it	cs
    e8d8:	4635      	movcs	r5, r6
    e8da:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e8de:	9901      	ldr	r1, [sp, #4]
    e8e0:	462a      	mov	r2, r5
    e8e2:	4638      	mov	r0, r7
    e8e4:	f000 f946 	bl	eb74 <am_hal_queue_item_add>
    e8e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e8ea:	f7ff fba1 	bl	e030 <am_hal_interrupt_master_disable>
    e8ee:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e8f2:	361c      	adds	r6, #28
    e8f4:	0336      	lsls	r6, r6, #12
    e8f6:	9005      	str	r0, [sp, #20]
    e8f8:	e00d      	b.n	e916 <am_hal_uart_transfer+0x37e>
    e8fa:	f000 f979 	bl	ebf0 <am_hal_queue_item_get>
    e8fe:	b188      	cbz	r0, e924 <am_hal_uart_transfer+0x38c>
    e900:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e902:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e906:	321c      	adds	r2, #28
    e908:	0312      	lsls	r2, r2, #12
    e90a:	6993      	ldr	r3, [r2, #24]
    e90c:	0699      	lsls	r1, r3, #26
    e90e:	bf5c      	itt	pl
    e910:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e914:	6013      	strpl	r3, [r2, #0]
    e916:	69b3      	ldr	r3, [r6, #24]
    e918:	069b      	lsls	r3, r3, #26
    e91a:	f04f 0201 	mov.w	r2, #1
    e91e:	a908      	add	r1, sp, #32
    e920:	4638      	mov	r0, r7
    e922:	d5ea      	bpl.n	e8fa <am_hal_uart_transfer+0x362>
    e924:	9805      	ldr	r0, [sp, #20]
    e926:	f7ff fb87 	bl	e038 <am_hal_interrupt_master_set>
    e92a:	e78a      	b.n	e842 <am_hal_uart_transfer+0x2aa>
    e92c:	46b8      	mov	r8, r7
    e92e:	e706      	b.n	e73e <am_hal_uart_transfer+0x1a6>
    e930:	f7ff fb7e 	bl	e030 <am_hal_interrupt_master_disable>
    e934:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e936:	9006      	str	r0, [sp, #24]
    e938:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e93c:	321c      	adds	r2, #28
    e93e:	0310      	lsls	r0, r2, #12
    e940:	ae08      	add	r6, sp, #32
    e942:	2200      	movs	r2, #0
    e944:	6983      	ldr	r3, [r0, #24]
    e946:	06d9      	lsls	r1, r3, #27
    e948:	d409      	bmi.n	e95e <am_hal_uart_transfer+0x3c6>
    e94a:	6803      	ldr	r3, [r0, #0]
    e94c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e950:	f102 0201 	add.w	r2, r2, #1
    e954:	d117      	bne.n	e986 <am_hal_uart_transfer+0x3ee>
    e956:	2a20      	cmp	r2, #32
    e958:	f806 3b01 	strb.w	r3, [r6], #1
    e95c:	d1f2      	bne.n	e944 <am_hal_uart_transfer+0x3ac>
    e95e:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e962:	a908      	add	r1, sp, #32
    e964:	4630      	mov	r0, r6
    e966:	f000 f905 	bl	eb74 <am_hal_queue_item_add>
    e96a:	b1b8      	cbz	r0, e99c <am_hal_uart_transfer+0x404>
    e96c:	9806      	ldr	r0, [sp, #24]
    e96e:	f7ff fb63 	bl	e038 <am_hal_interrupt_master_set>
    e972:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e974:	42bc      	cmp	r4, r7
    e976:	bf28      	it	cs
    e978:	463c      	movcs	r4, r7
    e97a:	4659      	mov	r1, fp
    e97c:	4630      	mov	r0, r6
    e97e:	4622      	mov	r2, r4
    e980:	f000 f936 	bl	ebf0 <am_hal_queue_item_get>
    e984:	e78d      	b.n	e8a2 <am_hal_uart_transfer+0x30a>
    e986:	9806      	ldr	r0, [sp, #24]
    e988:	f7ff fb56 	bl	e038 <am_hal_interrupt_master_set>
    e98c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e990:	e60e      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e992:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e996:	e784      	b.n	e8a2 <am_hal_uart_transfer+0x30a>
    e998:	4615      	mov	r5, r2
    e99a:	e782      	b.n	e8a2 <am_hal_uart_transfer+0x30a>
    e99c:	9806      	ldr	r0, [sp, #24]
    e99e:	4d02      	ldr	r5, [pc, #8]	; (e9a8 <am_hal_uart_transfer+0x410>)
    e9a0:	f7ff fb4a 	bl	e038 <am_hal_interrupt_master_set>
    e9a4:	e604      	b.n	e5b0 <am_hal_uart_transfer+0x18>
    e9a6:	bf00      	nop
    e9a8:	08000001 	.word	0x08000001

0000e9ac <am_hal_uart_interrupt_service>:
    e9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9b0:	4604      	mov	r4, r0
    e9b2:	4847      	ldr	r0, [pc, #284]	; (ead0 <am_hal_uart_interrupt_service+0x124>)
    e9b4:	6823      	ldr	r3, [r4, #0]
    e9b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9ba:	4283      	cmp	r3, r0
    e9bc:	b08a      	sub	sp, #40	; 0x28
    e9be:	d124      	bne.n	ea0a <am_hal_uart_interrupt_service+0x5e>
    e9c0:	f011 0f50 	tst.w	r1, #80	; 0x50
    e9c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e9c6:	460d      	mov	r5, r1
    e9c8:	4616      	mov	r6, r2
    e9ca:	d002      	beq.n	e9d2 <am_hal_uart_interrupt_service+0x26>
    e9cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e9d0:	bb63      	cbnz	r3, ea2c <am_hal_uart_interrupt_service+0x80>
    e9d2:	06a9      	lsls	r1, r5, #26
    e9d4:	d409      	bmi.n	e9ea <am_hal_uart_interrupt_service+0x3e>
    e9d6:	b126      	cbz	r6, e9e2 <am_hal_uart_interrupt_service+0x36>
    e9d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e9dc:	b15b      	cbz	r3, e9f6 <am_hal_uart_interrupt_service+0x4a>
    e9de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e9e0:	b1bb      	cbz	r3, ea12 <am_hal_uart_interrupt_service+0x66>
    e9e2:	2000      	movs	r0, #0
    e9e4:	b00a      	add	sp, #40	; 0x28
    e9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e9ee:	2b00      	cmp	r3, #0
    e9f0:	d13d      	bne.n	ea6e <am_hal_uart_interrupt_service+0xc2>
    e9f2:	2e00      	cmp	r6, #0
    e9f4:	d0f5      	beq.n	e9e2 <am_hal_uart_interrupt_service+0x36>
    e9f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9fa:	371c      	adds	r7, #28
    e9fc:	033f      	lsls	r7, r7, #12
    e9fe:	69bb      	ldr	r3, [r7, #24]
    ea00:	071b      	lsls	r3, r3, #28
    ea02:	d40e      	bmi.n	ea22 <am_hal_uart_interrupt_service+0x76>
    ea04:	2301      	movs	r3, #1
    ea06:	6033      	str	r3, [r6, #0]
    ea08:	e7eb      	b.n	e9e2 <am_hal_uart_interrupt_service+0x36>
    ea0a:	2002      	movs	r0, #2
    ea0c:	b00a      	add	sp, #40	; 0x28
    ea0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea12:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ea16:	371c      	adds	r7, #28
    ea18:	033f      	lsls	r7, r7, #12
    ea1a:	69bb      	ldr	r3, [r7, #24]
    ea1c:	071a      	lsls	r2, r3, #28
    ea1e:	d4e0      	bmi.n	e9e2 <am_hal_uart_interrupt_service+0x36>
    ea20:	e7f0      	b.n	ea04 <am_hal_uart_interrupt_service+0x58>
    ea22:	2000      	movs	r0, #0
    ea24:	6030      	str	r0, [r6, #0]
    ea26:	b00a      	add	sp, #40	; 0x28
    ea28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea2c:	f7ff fb00 	bl	e030 <am_hal_interrupt_master_disable>
    ea30:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ea32:	9001      	str	r0, [sp, #4]
    ea34:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea38:	311c      	adds	r1, #28
    ea3a:	0309      	lsls	r1, r1, #12
    ea3c:	a802      	add	r0, sp, #8
    ea3e:	2200      	movs	r2, #0
    ea40:	698b      	ldr	r3, [r1, #24]
    ea42:	06db      	lsls	r3, r3, #27
    ea44:	d409      	bmi.n	ea5a <am_hal_uart_interrupt_service+0xae>
    ea46:	680b      	ldr	r3, [r1, #0]
    ea48:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ea4c:	f102 0201 	add.w	r2, r2, #1
    ea50:	d132      	bne.n	eab8 <am_hal_uart_interrupt_service+0x10c>
    ea52:	2a20      	cmp	r2, #32
    ea54:	f800 3b01 	strb.w	r3, [r0], #1
    ea58:	d1f2      	bne.n	ea40 <am_hal_uart_interrupt_service+0x94>
    ea5a:	a902      	add	r1, sp, #8
    ea5c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ea60:	f000 f888 	bl	eb74 <am_hal_queue_item_add>
    ea64:	b370      	cbz	r0, eac4 <am_hal_uart_interrupt_service+0x118>
    ea66:	9801      	ldr	r0, [sp, #4]
    ea68:	f7ff fae6 	bl	e038 <am_hal_interrupt_master_set>
    ea6c:	e7b1      	b.n	e9d2 <am_hal_uart_interrupt_service+0x26>
    ea6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ea70:	f7ff fade 	bl	e030 <am_hal_interrupt_master_disable>
    ea74:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea78:	351c      	adds	r5, #28
    ea7a:	032d      	lsls	r5, r5, #12
    ea7c:	9002      	str	r0, [sp, #8]
    ea7e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    ea82:	e00d      	b.n	eaa0 <am_hal_uart_interrupt_service+0xf4>
    ea84:	f000 f8b4 	bl	ebf0 <am_hal_queue_item_get>
    ea88:	b190      	cbz	r0, eab0 <am_hal_uart_interrupt_service+0x104>
    ea8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea8c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea90:	331c      	adds	r3, #28
    ea92:	031b      	lsls	r3, r3, #12
    ea94:	699a      	ldr	r2, [r3, #24]
    ea96:	0692      	lsls	r2, r2, #26
    ea98:	bf5c      	itt	pl
    ea9a:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
    ea9e:	601a      	strpl	r2, [r3, #0]
    eaa0:	69ab      	ldr	r3, [r5, #24]
    eaa2:	069b      	lsls	r3, r3, #26
    eaa4:	f04f 0201 	mov.w	r2, #1
    eaa8:	f10d 0103 	add.w	r1, sp, #3
    eaac:	4640      	mov	r0, r8
    eaae:	d5e9      	bpl.n	ea84 <am_hal_uart_interrupt_service+0xd8>
    eab0:	9802      	ldr	r0, [sp, #8]
    eab2:	f7ff fac1 	bl	e038 <am_hal_interrupt_master_set>
    eab6:	e78e      	b.n	e9d6 <am_hal_uart_interrupt_service+0x2a>
    eab8:	9801      	ldr	r0, [sp, #4]
    eaba:	f7ff fabd 	bl	e038 <am_hal_interrupt_master_set>
    eabe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    eac2:	e78f      	b.n	e9e4 <am_hal_uart_interrupt_service+0x38>
    eac4:	9801      	ldr	r0, [sp, #4]
    eac6:	f7ff fab7 	bl	e038 <am_hal_interrupt_master_set>
    eaca:	4802      	ldr	r0, [pc, #8]	; (ead4 <am_hal_uart_interrupt_service+0x128>)
    eacc:	e78a      	b.n	e9e4 <am_hal_uart_interrupt_service+0x38>
    eace:	bf00      	nop
    ead0:	01ea9e06 	.word	0x01ea9e06
    ead4:	08000001 	.word	0x08000001

0000ead8 <am_hal_uart_interrupt_enable>:
    ead8:	6803      	ldr	r3, [r0, #0]
    eada:	4a08      	ldr	r2, [pc, #32]	; (eafc <am_hal_uart_interrupt_enable+0x24>)
    eadc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eae0:	4293      	cmp	r3, r2
    eae2:	d109      	bne.n	eaf8 <am_hal_uart_interrupt_enable+0x20>
    eae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eae6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eaea:	331c      	adds	r3, #28
    eaec:	031b      	lsls	r3, r3, #12
    eaee:	2000      	movs	r0, #0
    eaf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eaf2:	4311      	orrs	r1, r2
    eaf4:	6399      	str	r1, [r3, #56]	; 0x38
    eaf6:	4770      	bx	lr
    eaf8:	2002      	movs	r0, #2
    eafa:	4770      	bx	lr
    eafc:	01ea9e06 	.word	0x01ea9e06

0000eb00 <am_hal_uart_interrupt_clear>:
    eb00:	6803      	ldr	r3, [r0, #0]
    eb02:	4a07      	ldr	r2, [pc, #28]	; (eb20 <am_hal_uart_interrupt_clear+0x20>)
    eb04:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb08:	4293      	cmp	r3, r2
    eb0a:	d107      	bne.n	eb1c <am_hal_uart_interrupt_clear+0x1c>
    eb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eb0e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eb12:	331c      	adds	r3, #28
    eb14:	031b      	lsls	r3, r3, #12
    eb16:	2000      	movs	r0, #0
    eb18:	6459      	str	r1, [r3, #68]	; 0x44
    eb1a:	4770      	bx	lr
    eb1c:	2002      	movs	r0, #2
    eb1e:	4770      	bx	lr
    eb20:	01ea9e06 	.word	0x01ea9e06

0000eb24 <am_hal_uart_interrupt_status_get>:
    eb24:	6803      	ldr	r3, [r0, #0]
    eb26:	b410      	push	{r4}
    eb28:	4c0b      	ldr	r4, [pc, #44]	; (eb58 <am_hal_uart_interrupt_status_get+0x34>)
    eb2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb2e:	42a3      	cmp	r3, r4
    eb30:	d10d      	bne.n	eb4e <am_hal_uart_interrupt_status_get+0x2a>
    eb32:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eb34:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eb38:	331c      	adds	r3, #28
    eb3a:	031b      	lsls	r3, r3, #12
    eb3c:	b92a      	cbnz	r2, eb4a <am_hal_uart_interrupt_status_get+0x26>
    eb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eb40:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb44:	600b      	str	r3, [r1, #0]
    eb46:	2000      	movs	r0, #0
    eb48:	4770      	bx	lr
    eb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eb4c:	e7f8      	b.n	eb40 <am_hal_uart_interrupt_status_get+0x1c>
    eb4e:	2002      	movs	r0, #2
    eb50:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb54:	4770      	bx	lr
    eb56:	bf00      	nop
    eb58:	01ea9e06 	.word	0x01ea9e06

0000eb5c <am_hal_queue_init>:
    eb5c:	b410      	push	{r4}
    eb5e:	2400      	movs	r4, #0
    eb60:	e9c0 4400 	strd	r4, r4, [r0]
    eb64:	6084      	str	r4, [r0, #8]
    eb66:	e9c0 2104 	strd	r2, r1, [r0, #16]
    eb6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb6e:	60c3      	str	r3, [r0, #12]
    eb70:	4770      	bx	lr
    eb72:	bf00      	nop

0000eb74 <am_hal_queue_item_add>:
    eb74:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb76:	6906      	ldr	r6, [r0, #16]
    eb78:	b083      	sub	sp, #12
    eb7a:	4604      	mov	r4, r0
    eb7c:	fb06 f602 	mul.w	r6, r6, r2
    eb80:	460d      	mov	r5, r1
    eb82:	f7ff fa55 	bl	e030 <am_hal_interrupt_master_disable>
    eb86:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    eb8a:	1a53      	subs	r3, r2, r1
    eb8c:	42b3      	cmp	r3, r6
    eb8e:	9001      	str	r0, [sp, #4]
    eb90:	d31c      	bcc.n	ebcc <am_hal_queue_item_add+0x58>
    eb92:	b196      	cbz	r6, ebba <am_hal_queue_item_add+0x46>
    eb94:	6823      	ldr	r3, [r4, #0]
    eb96:	b305      	cbz	r5, ebda <am_hal_queue_item_add+0x66>
    eb98:	1e68      	subs	r0, r5, #1
    eb9a:	1987      	adds	r7, r0, r6
    eb9c:	6962      	ldr	r2, [r4, #20]
    eb9e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    eba2:	54d1      	strb	r1, [r2, r3]
    eba4:	6823      	ldr	r3, [r4, #0]
    eba6:	68e5      	ldr	r5, [r4, #12]
    eba8:	1c59      	adds	r1, r3, #1
    ebaa:	4287      	cmp	r7, r0
    ebac:	fbb1 f3f5 	udiv	r3, r1, r5
    ebb0:	fb05 1313 	mls	r3, r5, r3, r1
    ebb4:	6023      	str	r3, [r4, #0]
    ebb6:	d1f1      	bne.n	eb9c <am_hal_queue_item_add+0x28>
    ebb8:	68a1      	ldr	r1, [r4, #8]
    ebba:	9801      	ldr	r0, [sp, #4]
    ebbc:	440e      	add	r6, r1
    ebbe:	60a6      	str	r6, [r4, #8]
    ebc0:	f7ff fa3a 	bl	e038 <am_hal_interrupt_master_set>
    ebc4:	2401      	movs	r4, #1
    ebc6:	4620      	mov	r0, r4
    ebc8:	b003      	add	sp, #12
    ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebcc:	9801      	ldr	r0, [sp, #4]
    ebce:	f7ff fa33 	bl	e038 <am_hal_interrupt_master_set>
    ebd2:	2400      	movs	r4, #0
    ebd4:	4620      	mov	r0, r4
    ebd6:	b003      	add	sp, #12
    ebd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebda:	4628      	mov	r0, r5
    ebdc:	3001      	adds	r0, #1
    ebde:	3301      	adds	r3, #1
    ebe0:	4286      	cmp	r6, r0
    ebe2:	fbb3 f5f2 	udiv	r5, r3, r2
    ebe6:	fb02 3315 	mls	r3, r2, r5, r3
    ebea:	d1f7      	bne.n	ebdc <am_hal_queue_item_add+0x68>
    ebec:	6023      	str	r3, [r4, #0]
    ebee:	e7e4      	b.n	ebba <am_hal_queue_item_add+0x46>

0000ebf0 <am_hal_queue_item_get>:
    ebf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebf2:	6906      	ldr	r6, [r0, #16]
    ebf4:	4604      	mov	r4, r0
    ebf6:	b083      	sub	sp, #12
    ebf8:	fb06 f602 	mul.w	r6, r6, r2
    ebfc:	460d      	mov	r5, r1
    ebfe:	f7ff fa17 	bl	e030 <am_hal_interrupt_master_disable>
    ec02:	68a2      	ldr	r2, [r4, #8]
    ec04:	9001      	str	r0, [sp, #4]
    ec06:	42b2      	cmp	r2, r6
    ec08:	d31c      	bcc.n	ec44 <am_hal_queue_item_get+0x54>
    ec0a:	b196      	cbz	r6, ec32 <am_hal_queue_item_get+0x42>
    ec0c:	6863      	ldr	r3, [r4, #4]
    ec0e:	b305      	cbz	r5, ec52 <am_hal_queue_item_get+0x62>
    ec10:	1e68      	subs	r0, r5, #1
    ec12:	1987      	adds	r7, r0, r6
    ec14:	6962      	ldr	r2, [r4, #20]
    ec16:	5cd3      	ldrb	r3, [r2, r3]
    ec18:	f800 3f01 	strb.w	r3, [r0, #1]!
    ec1c:	6863      	ldr	r3, [r4, #4]
    ec1e:	68e5      	ldr	r5, [r4, #12]
    ec20:	1c59      	adds	r1, r3, #1
    ec22:	4287      	cmp	r7, r0
    ec24:	fbb1 f3f5 	udiv	r3, r1, r5
    ec28:	fb05 1313 	mls	r3, r5, r3, r1
    ec2c:	6063      	str	r3, [r4, #4]
    ec2e:	d1f1      	bne.n	ec14 <am_hal_queue_item_get+0x24>
    ec30:	68a2      	ldr	r2, [r4, #8]
    ec32:	9801      	ldr	r0, [sp, #4]
    ec34:	1b92      	subs	r2, r2, r6
    ec36:	60a2      	str	r2, [r4, #8]
    ec38:	f7ff f9fe 	bl	e038 <am_hal_interrupt_master_set>
    ec3c:	2401      	movs	r4, #1
    ec3e:	4620      	mov	r0, r4
    ec40:	b003      	add	sp, #12
    ec42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec44:	9801      	ldr	r0, [sp, #4]
    ec46:	f7ff f9f7 	bl	e038 <am_hal_interrupt_master_set>
    ec4a:	2400      	movs	r4, #0
    ec4c:	4620      	mov	r0, r4
    ec4e:	b003      	add	sp, #12
    ec50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec52:	68e1      	ldr	r1, [r4, #12]
    ec54:	4628      	mov	r0, r5
    ec56:	3001      	adds	r0, #1
    ec58:	3301      	adds	r3, #1
    ec5a:	42b0      	cmp	r0, r6
    ec5c:	fbb3 f5f1 	udiv	r5, r3, r1
    ec60:	fb01 3315 	mls	r3, r1, r5, r3
    ec64:	d1f7      	bne.n	ec56 <am_hal_queue_item_get+0x66>
    ec66:	6063      	str	r3, [r4, #4]
    ec68:	e7e3      	b.n	ec32 <am_hal_queue_item_get+0x42>
    ec6a:	bf00      	nop

0000ec6c <__init_array_end>:
    ec6c:	72410a0a 	.word	0x72410a0a
    ec70:	696d6574 	.word	0x696d6574
    ec74:	56532073 	.word	0x56532073
    ec78:	6f42204c 	.word	0x6f42204c
    ec7c:	6f6c746f 	.word	0x6f6c746f
    ec80:	72656461 	.word	0x72656461
    ec84:	44202d20 	.word	0x44202d20
    ec88:	47554245 	.word	0x47554245
    ec8c:	00000a0a 	.word	0x00000a0a
    ec90:	73616870 	.word	0x73616870
    ec94:	63093a65 	.word	0x63093a65
    ec98:	69666e6f 	.word	0x69666e6f
    ec9c:	62206d72 	.word	0x62206d72
    eca0:	6c746f6f 	.word	0x6c746f6f
    eca4:	6964616f 	.word	0x6964616f
    eca8:	6520676e 	.word	0x6520676e
    ecac:	7972746e 	.word	0x7972746e
    ecb0:	0000000a 	.word	0x0000000a
    ecb4:	6e657309 	.word	0x6e657309
    ecb8:	676e6964 	.word	0x676e6964
    ecbc:	74724120 	.word	0x74724120
    ecc0:	73696d65 	.word	0x73696d65
    ecc4:	4c565320 	.word	0x4c565320
    ecc8:	72657620 	.word	0x72657620
    eccc:	6e6f6973 	.word	0x6e6f6973
    ecd0:	63617020 	.word	0x63617020
    ecd4:	0a74656b 	.word	0x0a74656b
    ecd8:	00000000 	.word	0x00000000
    ecdc:	69617709 	.word	0x69617709
    ece0:	676e6974 	.word	0x676e6974
    ece4:	726f6620 	.word	0x726f6620
    ece8:	6f6f6220 	.word	0x6f6f6220
    ecec:	616f6c74 	.word	0x616f6c74
    ecf0:	20726564 	.word	0x20726564
    ecf4:	666e6f63 	.word	0x666e6f63
    ecf8:	616d7269 	.word	0x616d7269
    ecfc:	6e6f6974 	.word	0x6e6f6974
    ed00:	0000000a 	.word	0x0000000a
    ed04:	206f6e09 	.word	0x206f6e09
    ed08:	666e6f63 	.word	0x666e6f63
    ed0c:	616d7269 	.word	0x616d7269
    ed10:	6e6f6974 	.word	0x6e6f6974
    ed14:	63657220 	.word	0x63657220
    ed18:	65766965 	.word	0x65766965
    ed1c:	00000a64 	.word	0x00000a64
    ed20:	746e6509 	.word	0x746e6509
    ed24:	6e697265 	.word	0x6e697265
    ed28:	6f622067 	.word	0x6f622067
    ed2c:	6f6c746f 	.word	0x6f6c746f
    ed30:	72656461 	.word	0x72656461
    ed34:	00000a0a 	.word	0x00000a0a
    ed38:	4f525245 	.word	0x4f525245
    ed3c:	202d2052 	.word	0x202d2052
    ed40:	6f6e7572 	.word	0x6f6e7572
    ed44:	00006666 	.word	0x00006666
    ed48:	73616870 	.word	0x73616870
    ed4c:	64093a65 	.word	0x64093a65
    ed50:	63657465 	.word	0x63657465
    ed54:	61622074 	.word	0x61622074
    ed58:	72206475 	.word	0x72206475
    ed5c:	0a657461 	.word	0x0a657461
    ed60:	00000000 	.word	0x00000000
    ed64:	75616209 	.word	0x75616209
    ed68:	61722064 	.word	0x61722064
    ed6c:	6e206574 	.word	0x6e206574
    ed70:	6420746f 	.word	0x6420746f
    ed74:	63657465 	.word	0x63657465
    ed78:	2e646574 	.word	0x2e646574
    ed7c:	7209090a 	.word	0x7209090a
    ed80:	6e697369 	.word	0x6e697369
    ed84:	64652067 	.word	0x64652067
    ed88:	3a736567 	.word	0x3a736567
    ed8c:	0a642509 	.word	0x0a642509
    ed90:	69740909 	.word	0x69740909
    ed94:	2064656d 	.word	0x2064656d
    ed98:	3a74756f 	.word	0x3a74756f
    ed9c:	0a642509 	.word	0x0a642509
    eda0:	0000000a 	.word	0x0000000a
    eda4:	74656409 	.word	0x74656409
    eda8:	65746365 	.word	0x65746365
    edac:	61762064 	.word	0x61762064
    edb0:	2064696c 	.word	0x2064696c
    edb4:	64756162 	.word	0x64756162
    edb8:	74617220 	.word	0x74617220
    edbc:	25093a65 	.word	0x25093a65
    edc0:	000a0a64 	.word	0x000a0a64
    edc4:	73616870 	.word	0x73616870
    edc8:	62093a65 	.word	0x62093a65
    edcc:	6c746f6f 	.word	0x6c746f6f
    edd0:	0a64616f 	.word	0x0a64616f
    edd4:	00000000 	.word	0x00000000
    edd8:	71657209 	.word	0x71657209
    eddc:	74736575 	.word	0x74736575
    ede0:	20676e69 	.word	0x20676e69
    ede4:	72746572 	.word	0x72746572
    ede8:	6d736e61 	.word	0x6d736e61
    edec:	69737369 	.word	0x69737369
    edf0:	000a6e6f 	.word	0x000a6e6f
    edf4:	71657209 	.word	0x71657209
    edf8:	74736575 	.word	0x74736575
    edfc:	20676e69 	.word	0x20676e69
    ee00:	7478656e 	.word	0x7478656e
    ee04:	70706120 	.word	0x70706120
    ee08:	61726620 	.word	0x61726620
    ee0c:	000a656d 	.word	0x000a656d
    ee10:	72650909 	.word	0x72650909
    ee14:	20726f72 	.word	0x20726f72
    ee18:	65636572 	.word	0x65636572
    ee1c:	6e697669 	.word	0x6e697669
    ee20:	61702067 	.word	0x61702067
    ee24:	74656b63 	.word	0x74656b63
    ee28:	64252820 	.word	0x64252820
    ee2c:	00000a29 	.word	0x00000a29
    ee30:	65720909 	.word	0x65720909
    ee34:	76696563 	.word	0x76696563
    ee38:	61206465 	.word	0x61206465
    ee3c:	7061206e 	.word	0x7061206e
    ee40:	72662070 	.word	0x72662070
    ee44:	0a656d61 	.word	0x0a656d61
    ee48:	00000000 	.word	0x00000000
    ee4c:	65720909 	.word	0x65720909
    ee50:	76696563 	.word	0x76696563
    ee54:	64206465 	.word	0x64206465
    ee58:	20656e6f 	.word	0x20656e6f
    ee5c:	6e676973 	.word	0x6e676973
    ee60:	0a216c61 	.word	0x0a216c61
    ee64:	0000000a 	.word	0x0000000a
    ee68:	746f6f62 	.word	0x746f6f62
    ee6c:	64616f6c 	.word	0x64616f6c
    ee70:	72726520 	.word	0x72726520
    ee74:	2d20726f 	.word	0x2d20726f
    ee78:	6b6e7520 	.word	0x6b6e7520
    ee7c:	6e776f6e 	.word	0x6e776f6e
    ee80:	6d6f6320 	.word	0x6d6f6320
    ee84:	646e616d 	.word	0x646e616d
    ee88:	0000000a 	.word	0x0000000a
    ee8c:	00000004 	.word	0x00000004
    ee90:	1000023c 	.word	0x1000023c
    ee94:	08000800 	.word	0x08000800
    ee98:	72660909 	.word	0x72660909
    ee9c:	5f656d61 	.word	0x5f656d61
    eea0:	72646461 	.word	0x72646461
    eea4:	20737365 	.word	0x20737365
    eea8:	7830203d 	.word	0x7830203d
    eeac:	58383025 	.word	0x58383025
    eeb0:	756e202c 	.word	0x756e202c
    eeb4:	6f775f6d 	.word	0x6f775f6d
    eeb8:	20736472 	.word	0x20736472
    eebc:	6425203d 	.word	0x6425203d
    eec0:	0000000a 	.word	0x0000000a
    eec4:	6f727245 	.word	0x6f727245
    eec8:	66203a72 	.word	0x66203a72
    eecc:	656d6172 	.word	0x656d6172
    eed0:	63617020 	.word	0x63617020
    eed4:	2074656b 	.word	0x2074656b
    eed8:	20746f6e 	.word	0x20746f6e
    eedc:	65746e69 	.word	0x65746e69
    eee0:	20726567 	.word	0x20726567
    eee4:	746c756d 	.word	0x746c756d
    eee8:	656c7069 	.word	0x656c7069
    eeec:	20666f20 	.word	0x20666f20
    eef0:	64726f77 	.word	0x64726f77
    eef4:	34282073 	.word	0x34282073
    eef8:	74796220 	.word	0x74796220
    eefc:	70207365 	.word	0x70207365
    ef00:	77207265 	.word	0x77207265
    ef04:	2964726f 	.word	0x2964726f
    ef08:	0000000a 	.word	0x0000000a
    ef0c:	53414c46 	.word	0x53414c46
    ef10:	414d5f48 	.word	0x414d5f48
    ef14:	455f5353 	.word	0x455f5353
    ef18:	45534152 	.word	0x45534152
    ef1c:	32336920 	.word	0x32336920
    ef20:	75746552 	.word	0x75746552
    ef24:	6f436e72 	.word	0x6f436e72
    ef28:	3d206564 	.word	0x3d206564
    ef2c:	25783020 	.word	0x25783020
    ef30:	0d0a2e78 	.word	0x0d0a2e78
    ef34:	00000000 	.word	0x00000000
    ef38:	53414c46 	.word	0x53414c46
    ef3c:	52575f48 	.word	0x52575f48
    ef40:	20455449 	.word	0x20455449
    ef44:	6f727265 	.word	0x6f727265
    ef48:	203d2072 	.word	0x203d2072
    ef4c:	78257830 	.word	0x78257830
    ef50:	000d0a2e 	.word	0x000d0a2e
    ef54:	6d754a0a 	.word	0x6d754a0a
    ef58:	6f742070 	.word	0x6f742070
    ef5c:	70704120 	.word	0x70704120
    ef60:	20746120 	.word	0x20746120
    ef64:	30257830 	.word	0x30257830
    ef68:	0a0a5838 	.word	0x0a0a5838
    ef6c:	00000000 	.word	0x00000000

0000ef70 <am_hal_cachectrl_defaults>:
    ef70:	00000308                                ....

0000ef74 <g_AM_HAL_GPIO_DISABLE>:
    ef74:	00000003                                ....

0000ef78 <g_AM_HAL_GPIO_INPUT_PULLUP>:
    ef78:	00001023                                #...

0000ef7c <g_ui8Bit76Capabilities>:
    ef7c:	02800101 80010180 80800101 80808080     ................
    ef8c:	80808080 80808008 01800180 80808080     ................
    ef9c:	80808080 01800402 01010401 80808080     ................
    efac:	80800101 80808080 80808080 80808080     ................
    efbc:	80808080 80808080 00008080              ............

0000efc8 <g_ui8Inpen>:
    efc8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    efd8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    efe8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    eff8:	01003130 01010101 01010101 a050a001     01............P.
    f008:	01010101 a0a0a001 000050a0              .........P..

0000f014 <g_ui8NCEtable>:
    f014:	0112a4a3 a4a2a1a0 92b502b3 82858483     ................
    f024:	91019493 ffffffff ffffffff 00951201     ................
    f034:	80028483 b2b5b401 0011a4a3 83828180     ................
    f044:	10850283 90959493 a4a212a0 00b2b101     ................
    f054:	85b20280 94029190 a3a2a102 00b311b0     ................
    f064:	92950012 0102a4a3 02b5b4b3 84828180     ................
    f074:	95920190 a0a501a3 b1b5b4b3 81008402     ................
    f084:	00959493 a1a512a3 b002b400 84820201     ................
    f094:	1001b190 a59211a0 11b202b0 02828101     ................
    f0a4:	10959493 00a5a493 b512b1b0 ffffffff     ................
    f0b4:	ffffffff 10119102 85820180 10029190     ................
    f0c4:	a5a200a0 b185b4b3 10020183 93928111     ................
    f0d4:	12a2a101 81b211b0 80b20201 809291a4     ................
    f0e4:	9200a190 8202b1a0 83858402 84950083     ................
    f0f4:	10a5b4a3 90b5b400 b50081b3 00929111     ................
    f104:	b0a2a110 0102b100 11858410 00029401     ................
    f114:	10a5a480 93a50090 94828101 95b291b0     ................
    f124:	a0a20083 0100b193 118502a3 a1b094b3     ................
    f134:	a2010200 02b5b401                       ........

0000f13c <g_ui8nCEpins>:
    f13c:	02070707 00080802 01020202 01010101     ................
    f14c:	01010101 01010101 01010101 01010101     ................
    f15c:	01010101 08010101 01010008 01010101     ................
    f16c:	01010101 01010101 01010101 01010101     ................
    f17c:	01010101 01010101 00000101              ............

0000f188 <am_hal_pwrctrl_peripheral_control>:
	...
    f194:	00000001 00000004 00000004 00000002     ................
    f1a4:	00000008 00000008 00000004 00000008     ................
    f1b4:	00000008 00000008 00000008 00000008     ................
    f1c4:	00000010 00000010 00000010 00000020     ............ ...
    f1d4:	00000010 00000010 00000040 00000010     ........@.......
    f1e4:	00000010 00000080 00000004 00000004     ................
    f1f4:	00000100 00000004 00000004 00000200     ................
    f204:	00000020 00000020 00000400 00000004      ... ...........
    f214:	00000004 00000800 00000040 00000040     ........@...@...
    f224:	00001000 00000040 00000040 00002000     ....@...@.... ..
    f234:	00000040 00000040 00004000 00000080     @...@....@......
    f244:	00000080 00008000 00000100 00000100     ................

0000f254 <CSWTCH.20>:
    f254:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
