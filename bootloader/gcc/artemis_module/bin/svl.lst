
../gcc/artemis_module/bin/svl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	f8 ff 05 10 31 ce 00 00 b5 ce 00 00 bb ce 00 00     ....1...........
    c010:	bb ce 00 00 bb ce 00 00 bb ce 00 00 00 00 00 00     ................
	...
    c02c:	c1 ce 00 00 c1 ce 00 00 00 00 00 00 c1 ce 00 00     ................
    c03c:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c04c:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c05c:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c06c:	c1 ce 00 00 c1 ce 00 00 2d cd 00 00 c1 ce 00 00     ........-.......
    c07c:	ad cc 00 00 1d cd 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c08c:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 99 cd 00 00     ................
    c09c:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c0ac:	c1 ce 00 00 c1 ce 00 00 c1 ce 00 00 c1 ce 00 00     ................
    c0bc:	c1 ce 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_uldivmod>:
    c100:	b953      	cbnz	r3, c118 <__aeabi_uldivmod+0x18>
    c102:	b94a      	cbnz	r2, c118 <__aeabi_uldivmod+0x18>
    c104:	2900      	cmp	r1, #0
    c106:	bf08      	it	eq
    c108:	2800      	cmpeq	r0, #0
    c10a:	bf1c      	itt	ne
    c10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c114:	f000 b974 	b.w	c400 <__aeabi_idiv0>
    c118:	f1ad 0c08 	sub.w	ip, sp, #8
    c11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c120:	f000 f806 	bl	c130 <__udivmoddi4>
    c124:	f8dd e004 	ldr.w	lr, [sp, #4]
    c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c12c:	b004      	add	sp, #16
    c12e:	4770      	bx	lr

0000c130 <__udivmoddi4>:
    c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c134:	9e08      	ldr	r6, [sp, #32]
    c136:	4604      	mov	r4, r0
    c138:	4688      	mov	r8, r1
    c13a:	2b00      	cmp	r3, #0
    c13c:	f040 8085 	bne.w	c24a <__udivmoddi4+0x11a>
    c140:	428a      	cmp	r2, r1
    c142:	4615      	mov	r5, r2
    c144:	d948      	bls.n	c1d8 <__udivmoddi4+0xa8>
    c146:	fab2 f282 	clz	r2, r2
    c14a:	b14a      	cbz	r2, c160 <__udivmoddi4+0x30>
    c14c:	f1c2 0720 	rsb	r7, r2, #32
    c150:	fa01 f302 	lsl.w	r3, r1, r2
    c154:	fa20 f707 	lsr.w	r7, r0, r7
    c158:	4095      	lsls	r5, r2
    c15a:	ea47 0803 	orr.w	r8, r7, r3
    c15e:	4094      	lsls	r4, r2
    c160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c164:	0c23      	lsrs	r3, r4, #16
    c166:	fbb8 f7fe 	udiv	r7, r8, lr
    c16a:	fa1f fc85 	uxth.w	ip, r5
    c16e:	fb0e 8817 	mls	r8, lr, r7, r8
    c172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    c176:	fb07 f10c 	mul.w	r1, r7, ip
    c17a:	4299      	cmp	r1, r3
    c17c:	d909      	bls.n	c192 <__udivmoddi4+0x62>
    c17e:	18eb      	adds	r3, r5, r3
    c180:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    c184:	f080 80e3 	bcs.w	c34e <__udivmoddi4+0x21e>
    c188:	4299      	cmp	r1, r3
    c18a:	f240 80e0 	bls.w	c34e <__udivmoddi4+0x21e>
    c18e:	3f02      	subs	r7, #2
    c190:	442b      	add	r3, r5
    c192:	1a5b      	subs	r3, r3, r1
    c194:	b2a4      	uxth	r4, r4
    c196:	fbb3 f0fe 	udiv	r0, r3, lr
    c19a:	fb0e 3310 	mls	r3, lr, r0, r3
    c19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c1a2:	fb00 fc0c 	mul.w	ip, r0, ip
    c1a6:	45a4      	cmp	ip, r4
    c1a8:	d909      	bls.n	c1be <__udivmoddi4+0x8e>
    c1aa:	192c      	adds	r4, r5, r4
    c1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c1b0:	f080 80cb 	bcs.w	c34a <__udivmoddi4+0x21a>
    c1b4:	45a4      	cmp	ip, r4
    c1b6:	f240 80c8 	bls.w	c34a <__udivmoddi4+0x21a>
    c1ba:	3802      	subs	r0, #2
    c1bc:	442c      	add	r4, r5
    c1be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    c1c2:	eba4 040c 	sub.w	r4, r4, ip
    c1c6:	2700      	movs	r7, #0
    c1c8:	b11e      	cbz	r6, c1d2 <__udivmoddi4+0xa2>
    c1ca:	40d4      	lsrs	r4, r2
    c1cc:	2300      	movs	r3, #0
    c1ce:	e9c6 4300 	strd	r4, r3, [r6]
    c1d2:	4639      	mov	r1, r7
    c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1d8:	2a00      	cmp	r2, #0
    c1da:	d053      	beq.n	c284 <__udivmoddi4+0x154>
    c1dc:	fab2 f282 	clz	r2, r2
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	f040 80b6 	bne.w	c352 <__udivmoddi4+0x222>
    c1e6:	1b49      	subs	r1, r1, r5
    c1e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c1ec:	fa1f f885 	uxth.w	r8, r5
    c1f0:	2701      	movs	r7, #1
    c1f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c1f6:	0c23      	lsrs	r3, r4, #16
    c1f8:	fb0e 111c 	mls	r1, lr, ip, r1
    c1fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c200:	fb08 f10c 	mul.w	r1, r8, ip
    c204:	4299      	cmp	r1, r3
    c206:	d907      	bls.n	c218 <__udivmoddi4+0xe8>
    c208:	18eb      	adds	r3, r5, r3
    c20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c20e:	d202      	bcs.n	c216 <__udivmoddi4+0xe6>
    c210:	4299      	cmp	r1, r3
    c212:	f200 80ec 	bhi.w	c3ee <__udivmoddi4+0x2be>
    c216:	4684      	mov	ip, r0
    c218:	1a59      	subs	r1, r3, r1
    c21a:	b2a3      	uxth	r3, r4
    c21c:	fbb1 f0fe 	udiv	r0, r1, lr
    c220:	fb0e 1410 	mls	r4, lr, r0, r1
    c224:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    c228:	fb08 f800 	mul.w	r8, r8, r0
    c22c:	45a0      	cmp	r8, r4
    c22e:	d907      	bls.n	c240 <__udivmoddi4+0x110>
    c230:	192c      	adds	r4, r5, r4
    c232:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c236:	d202      	bcs.n	c23e <__udivmoddi4+0x10e>
    c238:	45a0      	cmp	r8, r4
    c23a:	f200 80dc 	bhi.w	c3f6 <__udivmoddi4+0x2c6>
    c23e:	4618      	mov	r0, r3
    c240:	eba4 0408 	sub.w	r4, r4, r8
    c244:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c248:	e7be      	b.n	c1c8 <__udivmoddi4+0x98>
    c24a:	428b      	cmp	r3, r1
    c24c:	d908      	bls.n	c260 <__udivmoddi4+0x130>
    c24e:	2e00      	cmp	r6, #0
    c250:	d078      	beq.n	c344 <__udivmoddi4+0x214>
    c252:	2700      	movs	r7, #0
    c254:	e9c6 0100 	strd	r0, r1, [r6]
    c258:	4638      	mov	r0, r7
    c25a:	4639      	mov	r1, r7
    c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c260:	fab3 f783 	clz	r7, r3
    c264:	b97f      	cbnz	r7, c286 <__udivmoddi4+0x156>
    c266:	428b      	cmp	r3, r1
    c268:	d302      	bcc.n	c270 <__udivmoddi4+0x140>
    c26a:	4282      	cmp	r2, r0
    c26c:	f200 80bd 	bhi.w	c3ea <__udivmoddi4+0x2ba>
    c270:	1a84      	subs	r4, r0, r2
    c272:	eb61 0303 	sbc.w	r3, r1, r3
    c276:	2001      	movs	r0, #1
    c278:	4698      	mov	r8, r3
    c27a:	2e00      	cmp	r6, #0
    c27c:	d0a9      	beq.n	c1d2 <__udivmoddi4+0xa2>
    c27e:	e9c6 4800 	strd	r4, r8, [r6]
    c282:	e7a6      	b.n	c1d2 <__udivmoddi4+0xa2>
    c284:	deff      	udf	#255	; 0xff
    c286:	f1c7 0520 	rsb	r5, r7, #32
    c28a:	40bb      	lsls	r3, r7
    c28c:	fa22 fc05 	lsr.w	ip, r2, r5
    c290:	ea4c 0c03 	orr.w	ip, ip, r3
    c294:	fa01 f407 	lsl.w	r4, r1, r7
    c298:	fa20 f805 	lsr.w	r8, r0, r5
    c29c:	fa21 f305 	lsr.w	r3, r1, r5
    c2a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    c2a4:	ea48 0404 	orr.w	r4, r8, r4
    c2a8:	fbb3 f9fe 	udiv	r9, r3, lr
    c2ac:	0c21      	lsrs	r1, r4, #16
    c2ae:	fb0e 3319 	mls	r3, lr, r9, r3
    c2b2:	fa1f f88c 	uxth.w	r8, ip
    c2b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    c2ba:	fb09 fa08 	mul.w	sl, r9, r8
    c2be:	459a      	cmp	sl, r3
    c2c0:	fa02 f207 	lsl.w	r2, r2, r7
    c2c4:	fa00 f107 	lsl.w	r1, r0, r7
    c2c8:	d90b      	bls.n	c2e2 <__udivmoddi4+0x1b2>
    c2ca:	eb1c 0303 	adds.w	r3, ip, r3
    c2ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c2d2:	f080 8088 	bcs.w	c3e6 <__udivmoddi4+0x2b6>
    c2d6:	459a      	cmp	sl, r3
    c2d8:	f240 8085 	bls.w	c3e6 <__udivmoddi4+0x2b6>
    c2dc:	f1a9 0902 	sub.w	r9, r9, #2
    c2e0:	4463      	add	r3, ip
    c2e2:	eba3 030a 	sub.w	r3, r3, sl
    c2e6:	b2a4      	uxth	r4, r4
    c2e8:	fbb3 f0fe 	udiv	r0, r3, lr
    c2ec:	fb0e 3310 	mls	r3, lr, r0, r3
    c2f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c2f4:	fb00 f808 	mul.w	r8, r0, r8
    c2f8:	45a0      	cmp	r8, r4
    c2fa:	d908      	bls.n	c30e <__udivmoddi4+0x1de>
    c2fc:	eb1c 0404 	adds.w	r4, ip, r4
    c300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c304:	d26b      	bcs.n	c3de <__udivmoddi4+0x2ae>
    c306:	45a0      	cmp	r8, r4
    c308:	d969      	bls.n	c3de <__udivmoddi4+0x2ae>
    c30a:	3802      	subs	r0, #2
    c30c:	4464      	add	r4, ip
    c30e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    c312:	eba4 0408 	sub.w	r4, r4, r8
    c316:	fba0 8902 	umull	r8, r9, r0, r2
    c31a:	454c      	cmp	r4, r9
    c31c:	46c6      	mov	lr, r8
    c31e:	464b      	mov	r3, r9
    c320:	d354      	bcc.n	c3cc <__udivmoddi4+0x29c>
    c322:	d051      	beq.n	c3c8 <__udivmoddi4+0x298>
    c324:	2e00      	cmp	r6, #0
    c326:	d069      	beq.n	c3fc <__udivmoddi4+0x2cc>
    c328:	ebb1 020e 	subs.w	r2, r1, lr
    c32c:	eb64 0403 	sbc.w	r4, r4, r3
    c330:	fa04 f505 	lsl.w	r5, r4, r5
    c334:	fa22 f307 	lsr.w	r3, r2, r7
    c338:	40fc      	lsrs	r4, r7
    c33a:	431d      	orrs	r5, r3
    c33c:	e9c6 5400 	strd	r5, r4, [r6]
    c340:	2700      	movs	r7, #0
    c342:	e746      	b.n	c1d2 <__udivmoddi4+0xa2>
    c344:	4637      	mov	r7, r6
    c346:	4630      	mov	r0, r6
    c348:	e743      	b.n	c1d2 <__udivmoddi4+0xa2>
    c34a:	4618      	mov	r0, r3
    c34c:	e737      	b.n	c1be <__udivmoddi4+0x8e>
    c34e:	4607      	mov	r7, r0
    c350:	e71f      	b.n	c192 <__udivmoddi4+0x62>
    c352:	f1c2 0320 	rsb	r3, r2, #32
    c356:	fa20 f703 	lsr.w	r7, r0, r3
    c35a:	4095      	lsls	r5, r2
    c35c:	fa01 f002 	lsl.w	r0, r1, r2
    c360:	fa21 f303 	lsr.w	r3, r1, r3
    c364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c368:	4338      	orrs	r0, r7
    c36a:	0c01      	lsrs	r1, r0, #16
    c36c:	fbb3 f7fe 	udiv	r7, r3, lr
    c370:	fa1f f885 	uxth.w	r8, r5
    c374:	fb0e 3317 	mls	r3, lr, r7, r3
    c378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c37c:	fb07 f308 	mul.w	r3, r7, r8
    c380:	428b      	cmp	r3, r1
    c382:	fa04 f402 	lsl.w	r4, r4, r2
    c386:	d907      	bls.n	c398 <__udivmoddi4+0x268>
    c388:	1869      	adds	r1, r5, r1
    c38a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    c38e:	d228      	bcs.n	c3e2 <__udivmoddi4+0x2b2>
    c390:	428b      	cmp	r3, r1
    c392:	d926      	bls.n	c3e2 <__udivmoddi4+0x2b2>
    c394:	3f02      	subs	r7, #2
    c396:	4429      	add	r1, r5
    c398:	1acb      	subs	r3, r1, r3
    c39a:	b281      	uxth	r1, r0
    c39c:	fbb3 f0fe 	udiv	r0, r3, lr
    c3a0:	fb0e 3310 	mls	r3, lr, r0, r3
    c3a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c3a8:	fb00 f308 	mul.w	r3, r0, r8
    c3ac:	428b      	cmp	r3, r1
    c3ae:	d907      	bls.n	c3c0 <__udivmoddi4+0x290>
    c3b0:	1869      	adds	r1, r5, r1
    c3b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    c3b6:	d210      	bcs.n	c3da <__udivmoddi4+0x2aa>
    c3b8:	428b      	cmp	r3, r1
    c3ba:	d90e      	bls.n	c3da <__udivmoddi4+0x2aa>
    c3bc:	3802      	subs	r0, #2
    c3be:	4429      	add	r1, r5
    c3c0:	1ac9      	subs	r1, r1, r3
    c3c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c3c6:	e714      	b.n	c1f2 <__udivmoddi4+0xc2>
    c3c8:	4541      	cmp	r1, r8
    c3ca:	d2ab      	bcs.n	c324 <__udivmoddi4+0x1f4>
    c3cc:	ebb8 0e02 	subs.w	lr, r8, r2
    c3d0:	eb69 020c 	sbc.w	r2, r9, ip
    c3d4:	3801      	subs	r0, #1
    c3d6:	4613      	mov	r3, r2
    c3d8:	e7a4      	b.n	c324 <__udivmoddi4+0x1f4>
    c3da:	4660      	mov	r0, ip
    c3dc:	e7f0      	b.n	c3c0 <__udivmoddi4+0x290>
    c3de:	4618      	mov	r0, r3
    c3e0:	e795      	b.n	c30e <__udivmoddi4+0x1de>
    c3e2:	4667      	mov	r7, ip
    c3e4:	e7d8      	b.n	c398 <__udivmoddi4+0x268>
    c3e6:	4681      	mov	r9, r0
    c3e8:	e77b      	b.n	c2e2 <__udivmoddi4+0x1b2>
    c3ea:	4638      	mov	r0, r7
    c3ec:	e745      	b.n	c27a <__udivmoddi4+0x14a>
    c3ee:	f1ac 0c02 	sub.w	ip, ip, #2
    c3f2:	442b      	add	r3, r5
    c3f4:	e710      	b.n	c218 <__udivmoddi4+0xe8>
    c3f6:	3802      	subs	r0, #2
    c3f8:	442c      	add	r4, r5
    c3fa:	e721      	b.n	c240 <__udivmoddi4+0x110>
    c3fc:	4637      	mov	r7, r6
    c3fe:	e6e8      	b.n	c1d2 <__udivmoddi4+0xa2>

0000c400 <__aeabi_idiv0>:
    c400:	4770      	bx	lr
    c402:	bf00      	nop

0000c404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c404:	b480      	push	{r7}
    c406:	b083      	sub	sp, #12
    c408:	af00      	add	r7, sp, #0
    c40a:	4603      	mov	r3, r0
    c40c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c412:	2b00      	cmp	r3, #0
    c414:	db0b      	blt.n	c42e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c416:	79fb      	ldrb	r3, [r7, #7]
    c418:	f003 021f 	and.w	r2, r3, #31
    c41c:	4907      	ldr	r1, [pc, #28]	; (c43c <__NVIC_EnableIRQ+0x38>)
    c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c422:	095b      	lsrs	r3, r3, #5
    c424:	2001      	movs	r0, #1
    c426:	fa00 f202 	lsl.w	r2, r0, r2
    c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c42e:	bf00      	nop
    c430:	370c      	adds	r7, #12
    c432:	46bd      	mov	sp, r7
    c434:	f85d 7b04 	ldr.w	r7, [sp], #4
    c438:	4770      	bx	lr
    c43a:	bf00      	nop
    c43c:	e000e100 	.word	0xe000e100

0000c440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c440:	b480      	push	{r7}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c44e:	2b00      	cmp	r3, #0
    c450:	db10      	blt.n	c474 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c452:	79fb      	ldrb	r3, [r7, #7]
    c454:	f003 021f 	and.w	r2, r3, #31
    c458:	4909      	ldr	r1, [pc, #36]	; (c480 <__NVIC_DisableIRQ+0x40>)
    c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c45e:	095b      	lsrs	r3, r3, #5
    c460:	2001      	movs	r0, #1
    c462:	fa00 f202 	lsl.w	r2, r0, r2
    c466:	3320      	adds	r3, #32
    c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c46c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c470:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c474:	bf00      	nop
    c476:	370c      	adds	r7, #12
    c478:	46bd      	mov	sp, r7
    c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c47e:	4770      	bx	lr
    c480:	e000e100 	.word	0xe000e100

0000c484 <main>:
//
// Main
//
//*****************************************************************************
int main(void)
{
    c484:	b580      	push	{r7, lr}
    c486:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
    c48a:	af00      	add	r7, sp, #0

    bool baud_valid = false;
    c48c:	2300      	movs	r3, #0
    c48e:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    uint32_t bl_baud = 0x00;
    c492:	2300      	movs	r3, #0
    c494:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
    uint8_t bl_buffer[BL_UART_BUF_LEN] = {0};
    c498:	f107 0320 	add.w	r3, r7, #32
    c49c:	4618      	mov	r0, r3
    c49e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    c4a2:	461a      	mov	r2, r3
    c4a4:	2100      	movs	r1, #0
    c4a6:	f001 f9a3 	bl	d7f0 <memset>

#define PLLEN_VER 1
    uint8_t packet_ver_buf[PLLEN_VER] = {SVL_VERSION_NUMBER};
    c4aa:	f107 031c 	add.w	r3, r7, #28
    c4ae:	2207      	movs	r2, #7
    c4b0:	701a      	strb	r2, [r3, #0]
    svl_packet_t svl_packet_version = {CMD_VERSION, packet_ver_buf, PLLEN_VER, PLLEN_VER};
    c4b2:	f107 0310 	add.w	r3, r7, #16
    c4b6:	2201      	movs	r2, #1
    c4b8:	701a      	strb	r2, [r3, #0]
    c4ba:	f107 0310 	add.w	r3, r7, #16
    c4be:	f107 021c 	add.w	r2, r7, #28
    c4c2:	605a      	str	r2, [r3, #4]
    c4c4:	f107 0310 	add.w	r3, r7, #16
    c4c8:	2201      	movs	r2, #1
    c4ca:	811a      	strh	r2, [r3, #8]
    c4cc:	f107 0310 	add.w	r3, r7, #16
    c4d0:	2201      	movs	r2, #1
    c4d2:	815a      	strh	r2, [r3, #10]
    svl_packet_t svl_packet_blmode = {CMD_BLMODE, NULL, 0, 0};
    c4d4:	1d3b      	adds	r3, r7, #4
    c4d6:	2202      	movs	r2, #2
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	1d3b      	adds	r3, r7, #4
    c4dc:	2200      	movs	r2, #0
    c4de:	605a      	str	r2, [r3, #4]
    c4e0:	1d3b      	adds	r3, r7, #4
    c4e2:	2200      	movs	r2, #0
    c4e4:	811a      	strh	r2, [r3, #8]
    c4e6:	1d3b      	adds	r3, r7, #4
    c4e8:	2200      	movs	r2, #0
    c4ea:	815a      	strh	r2, [r3, #10]

    art_svl_ringbuf_init(&bl_rx_ringbuf, bl_buffer, BL_UART_BUF_LEN);
    c4ec:	f107 0320 	add.w	r3, r7, #32
    c4f0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    c4f4:	4619      	mov	r1, r3
    c4f6:	4827      	ldr	r0, [pc, #156]	; (c594 <main+0x110>)
    c4f8:	f000 ff82 	bl	d400 <art_svl_ringbuf_init>
    setup();
    c4fc:	f000 f85a 	bl	c5b4 <setup>

    debug_printf("\n\nArtemis SVL Bootloader - DEBUG\n\n");
    c500:	4825      	ldr	r0, [pc, #148]	; (c598 <main+0x114>)
    c502:	f000 fbc9 	bl	cc98 <debug_printf>

    baud_valid = detect_baud_rate(&bl_baud); // Detects the baud rate. Returns true if a valid baud rate was found
    c506:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
    c50a:	4618      	mov	r0, r3
    c50c:	f000 f888 	bl	c620 <detect_baud_rate>
    c510:	4603      	mov	r3, r0
    c512:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    if (baud_valid == false)
    c516:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
    c51a:	f083 0301 	eor.w	r3, r3, #1
    c51e:	b2db      	uxtb	r3, r3
    c520:	2b00      	cmp	r3, #0
    c522:	d001      	beq.n	c528 <main+0xa4>
    {
        app_start(); // w/o valid baud rate jump t the app
    c524:	f000 fba0 	bl	cc68 <app_start>
    }

    start_uart_bl(bl_baud); // This will create a 23 us wide low 'blip' on the TX line (until possibly fixed)
    c528:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
    c52c:	4618      	mov	r0, r3
    c52e:	f000 fa03 	bl	c938 <start_uart_bl>
    am_util_delay_us(200);  // At the minimum baud rate of 115200 one byte (10 bits with start/stop) takes 10/115200 or 87 us. 87+23 = 100, double to be safe
    c532:	20c8      	movs	r0, #200	; 0xc8
    c534:	f000 fc5e 	bl	cdf4 <am_util_delay_us>

    debug_printf("phase:\tconfirm bootloading entry\n");
    c538:	4818      	ldr	r0, [pc, #96]	; (c59c <main+0x118>)
    c53a:	f000 fbad 	bl	cc98 <debug_printf>
    debug_printf("\tsending Artemis SVL version packet\n");
    c53e:	4818      	ldr	r0, [pc, #96]	; (c5a0 <main+0x11c>)
    c540:	f000 fbaa 	bl	cc98 <debug_printf>
    svl_packet_send(&svl_packet_version); // when baud rate is determined send the version packet
    c544:	f107 0310 	add.w	r3, r7, #16
    c548:	4618      	mov	r0, r3
    c54a:	f000 fd0f 	bl	cf6c <svl_packet_send>

    debug_printf("\twaiting for bootloader confirmation\n");
    c54e:	4815      	ldr	r0, [pc, #84]	; (c5a4 <main+0x120>)
    c550:	f000 fba2 	bl	cc98 <debug_printf>
    if (svl_packet_wait(&svl_packet_blmode) != 0)
    c554:	1d3b      	adds	r3, r7, #4
    c556:	4618      	mov	r0, r3
    c558:	f000 fdfc 	bl	d154 <svl_packet_wait>
    c55c:	4603      	mov	r3, r0
    c55e:	2b00      	cmp	r3, #0
    c560:	d004      	beq.n	c56c <main+0xe8>
    { // wait for the bootloader to confirm bootloader mode entry
        debug_printf("\tno confirmation received\n");
    c562:	4811      	ldr	r0, [pc, #68]	; (c5a8 <main+0x124>)
    c564:	f000 fb98 	bl	cc98 <debug_printf>
        app_start(); // break to app
    c568:	f000 fb7e 	bl	cc68 <app_start>
    }
    debug_printf("\tentering bootloader\n\n");
    c56c:	480f      	ldr	r0, [pc, #60]	; (c5ac <main+0x128>)
    c56e:	f000 fb93 	bl	cc98 <debug_printf>

    enter_bootload(); // Now we are locked in
    c572:	f000 fa4b 	bl	ca0c <enter_bootload>
    am_util_delay_ms(10);
    c576:	200a      	movs	r0, #10
    c578:	f000 fc1e 	bl	cdb8 <am_util_delay_ms>

    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0); //Cause a system Power On Init to release as much of the stack as possible
    c57c:	2100      	movs	r1, #0
    c57e:	2001      	movs	r0, #1
    c580:	f001 fdc0 	bl	e104 <am_hal_reset_control>

    debug_printf("ERROR - runoff");
    c584:	480a      	ldr	r0, [pc, #40]	; (c5b0 <main+0x12c>)
    c586:	f000 fb87 	bl	cc98 <debug_printf>
    while (1)
    {                                                    // Loop forever while sleeping.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP); // Go to Deep Sleep.
    c58a:	2001      	movs	r0, #1
    c58c:	f001 fe04 	bl	e198 <am_hal_sysctrl_sleep>
    c590:	e7fb      	b.n	c58a <main+0x106>
    c592:	bf00      	nop
    c594:	10000210 	.word	0x10000210
    c598:	0000ec18 	.word	0x0000ec18
    c59c:	0000ec3c 	.word	0x0000ec3c
    c5a0:	0000ec60 	.word	0x0000ec60
    c5a4:	0000ec88 	.word	0x0000ec88
    c5a8:	0000ecb0 	.word	0x0000ecb0
    c5ac:	0000eccc 	.word	0x0000eccc
    c5b0:	0000ece4 	.word	0x0000ece4

0000c5b4 <setup>:
//
// Setup
//
//*****************************************************************************
void setup(void)
{
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5b8:	2100      	movs	r1, #0
    c5ba:	2000      	movs	r0, #0
    c5bc:	f001 fa34 	bl	da28 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c5c0:	480b      	ldr	r0, [pc, #44]	; (c5f0 <setup+0x3c>)
    c5c2:	f001 fa03 	bl	d9cc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c5c6:	f001 fa25 	bl	da14 <am_hal_cachectrl_enable>

    // Configure the stimer
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
    c5ca:	f44f 7080 	mov.w	r0, #256	; 0x100
    c5ce:	f001 fdc9 	bl	e164 <am_hal_stimer_int_enable>
    NVIC_EnableIRQ(STIMER_IRQn);
    c5d2:	2016      	movs	r0, #22
    c5d4:	f7ff ff16 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c5d8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c5dc:	f001 fdb2 	bl	e144 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
    c5e0:	2001      	movs	r0, #1
    c5e2:	f001 fdaf 	bl	e144 <am_hal_stimer_config>
#ifdef DEBUG
    start_uart_debug();
#endif

    // Enable interrupts.
    am_hal_interrupt_master_enable();
    c5e6:	f001 fd03 	bl	dff0 <am_hal_interrupt_master_enable>
}
    c5ea:	bf00      	nop
    c5ec:	bd80      	pop	{r7, pc}
    c5ee:	bf00      	nop
    c5f0:	0000ef1c 	.word	0x0000ef1c

0000c5f4 <unsetup>:
//
// Un-set-up
//
//*****************************************************************************
void unsetup(void)
{
    c5f4:	b580      	push	{r7, lr}
    c5f6:	af00      	add	r7, sp, #0
    disable_burst_mode();
    c5f8:	f001 f880 	bl	d6fc <disable_burst_mode>

    // Deconfigure the stimer
    am_hal_stimer_int_disable(AM_HAL_STIMER_INT_OVERFLOW);
    c5fc:	f44f 7080 	mov.w	r0, #256	; 0x100
    c600:	f001 fdba 	bl	e178 <am_hal_stimer_int_disable>
    NVIC_DisableIRQ(STIMER_IRQn);
    c604:	2016      	movs	r0, #22
    c606:	f7ff ff1b 	bl	c440 <__NVIC_DisableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c60a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c60e:	f001 fd99 	bl	e144 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_NO_CLK);
    c612:	2000      	movs	r0, #0
    c614:	f001 fd96 	bl	e144 <am_hal_stimer_config>
#ifdef DEBUG
    stop_uart_debug();
#endif

    // Disable interrupts.
    am_hal_interrupt_master_disable();
    c618:	f001 fcee 	bl	dff8 <am_hal_interrupt_master_disable>
}
    c61c:	bf00      	nop
    c61e:	bd80      	pop	{r7, pc}

0000c620 <detect_baud_rate>:
//
// Baud Rate Detect Phase
//
// ****************************************
bool detect_baud_rate(uint32_t *baud)
{
    c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c624:	b08d      	sub	sp, #52	; 0x34
    c626:	af00      	add	r7, sp, #0
    c628:	60f8      	str	r0, [r7, #12]
    uint32_t bl_entry_timeout_ms = 200;
    c62a:	23c8      	movs	r3, #200	; 0xc8
    c62c:	623b      	str	r3, [r7, #32]
    uint32_t bl_entry_timeout_start = millis();
    c62e:	f001 f837 	bl	d6a0 <millis>
    c632:	61f8      	str	r0, [r7, #28]
    bool baud_is_valid = false;
    c634:	2300      	movs	r3, #0
    c636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool timed_out = true;
    c63a:	2301      	movs	r3, #1
    c63c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    debug_printf("phase:\tdetect baud rate\n");
    c640:	48b3      	ldr	r0, [pc, #716]	; (c910 <detect_baud_rate+0x2f0>)
    c642:	f000 fb29 	bl	cc98 <debug_printf>

    enable_burst_mode();
    c646:	f001 f83f 	bl	d6c8 <enable_burst_mode>

    am_hal_gpio_pinconfig(BL_RX_PAD, g_AM_HAL_GPIO_INPUT_PULLUP);
    c64a:	4bb2      	ldr	r3, [pc, #712]	; (c914 <detect_baud_rate+0x2f4>)
    c64c:	6819      	ldr	r1, [r3, #0]
    c64e:	2031      	movs	r0, #49	; 0x31
    c650:	f001 fb26 	bl	dca0 <am_hal_gpio_pinconfig>
    AM_HAL_GPIO_MASKCREATE(BL_RX_PAD_Mask);
    c654:	f04f 0200 	mov.w	r2, #0
    c658:	f04f 0300 	mov.w	r3, #0
    c65c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ap3_gpio_enable_interrupts(BL_RX_PAD, AM_HAL_GPIO_PIN_INTDIR_LO2HI);
    c660:	2100      	movs	r1, #0
    c662:	2031      	movs	r0, #49	; 0x31
    c664:	f001 f860 	bl	d728 <ap3_gpio_enable_interrupts>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c668:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    c66c:	f04f 0000 	mov.w	r0, #0
    c670:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c674:	ea42 0600 	orr.w	r6, r2, r0
    c678:	603e      	str	r6, [r7, #0]
    c67a:	430b      	orrs	r3, r1
    c67c:	607b      	str	r3, [r7, #4]
    c67e:	e9d7 2300 	ldrd	r2, r3, [r7]
    c682:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c686:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    c68a:	f001 fc93 	bl	dfb4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c68e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    c692:	f04f 0000 	mov.w	r0, #0
    c696:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c69a:	ea42 0a00 	orr.w	sl, r2, r0
    c69e:	ea43 0b01 	orr.w	fp, r3, r1
    c6a2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    c6a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    c6aa:	f001 fc39 	bl	df20 <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c6ae:	200d      	movs	r0, #13
    c6b0:	f7ff fea8 	bl	c404 <__NVIC_EnableIRQ>

    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c6b4:	e0dd      	b.n	c872 <detect_baud_rate+0x252>
    {
        // try to detect baud rate

        // debug_printf("\ttime (ms):\t%d\n", millis());

        if (bl_baud_ticks_index == BL_BAUD_SAMPLES)
    c6b6:	4b98      	ldr	r3, [pc, #608]	; (c918 <detect_baud_rate+0x2f8>)
    c6b8:	781b      	ldrb	r3, [r3, #0]
    c6ba:	b2db      	uxtb	r3, r3
    c6bc:	2b05      	cmp	r3, #5
    c6be:	f040 80d8 	bne.w	c872 <detect_baud_rate+0x252>
        {

            // compute differences between samples
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6c2:	2300      	movs	r3, #0
    c6c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    c6c8:	e015      	b.n	c6f6 <detect_baud_rate+0xd6>
            {
                bl_baud_ticks[indi] = bl_baud_ticks[indi + 1] - bl_baud_ticks[indi];
    c6ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6ce:	3301      	adds	r3, #1
    c6d0:	4a92      	ldr	r2, [pc, #584]	; (c91c <detect_baud_rate+0x2fc>)
    c6d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c6d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6da:	4a90      	ldr	r2, [pc, #576]	; (c91c <detect_baud_rate+0x2fc>)
    c6dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c6e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6e4:	1a8a      	subs	r2, r1, r2
    c6e6:	498d      	ldr	r1, [pc, #564]	; (c91c <detect_baud_rate+0x2fc>)
    c6e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6f0:	3301      	adds	r3, #1
    c6f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    c6f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    c6fa:	2b03      	cmp	r3, #3
    c6fc:	d9e5      	bls.n	c6ca <detect_baud_rate+0xaa>
            }

            float mean = 0.0;
    c6fe:	f04f 0300 	mov.w	r3, #0
    c702:	62bb      	str	r3, [r7, #40]	; 0x28
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c704:	2300      	movs	r3, #0
    c706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c70a:	e013      	b.n	c734 <detect_baud_rate+0x114>
            {
                mean += bl_baud_ticks[indi];
    c70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c710:	4a82      	ldr	r2, [pc, #520]	; (c91c <detect_baud_rate+0x2fc>)
    c712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c716:	ee07 3a90 	vmov	s15, r3
    c71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c71e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    c722:	ee77 7a27 	vadd.f32	s15, s14, s15
    c726:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c72a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c72e:	3301      	adds	r3, #1
    c730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c738:	2b03      	cmp	r3, #3
    c73a:	d9e7      	bls.n	c70c <detect_baud_rate+0xec>
            }
            mean /= (BL_BAUD_SAMPLES - 1);
    c73c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
    c740:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    c744:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c748:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            if (mean < 3)
    c74c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c750:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c754:	eef4 7ac7 	vcmpe.f32	s15, s14
    c758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c75c:	f100 8081 	bmi.w	c862 <detect_baud_rate+0x242>
            {
                // invalid
            }
            else if ((mean >= 4) && (mean <= 8))
    c760:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c764:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    c768:	eef4 7ac7 	vcmpe.f32	s15, s14
    c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c770:	db10      	blt.n	c794 <detect_baud_rate+0x174>
    c772:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c776:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    c77a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c782:	d807      	bhi.n	c794 <detect_baud_rate+0x174>
            {
                *baud = 921600;
    c784:	68fb      	ldr	r3, [r7, #12]
    c786:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    c78a:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c78c:	2301      	movs	r3, #1
    c78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c792:	e066      	b.n	c862 <detect_baud_rate+0x242>
            }
            else if ((mean >= 10) && (mean <= 14))
    c794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c798:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c79c:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7a4:	db10      	blt.n	c7c8 <detect_baud_rate+0x1a8>
    c7a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7aa:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    c7ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7b6:	d807      	bhi.n	c7c8 <detect_baud_rate+0x1a8>
            {
                *baud = 460800;
    c7b8:	68fb      	ldr	r3, [r7, #12]
    c7ba:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
    c7be:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7c0:	2301      	movs	r3, #1
    c7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c7c6:	e04c      	b.n	c862 <detect_baud_rate+0x242>
            }
            else if ((mean >= 25) && (mean <= 30))
    c7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7cc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    c7d0:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7d8:	db10      	blt.n	c7fc <detect_baud_rate+0x1dc>
    c7da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c7de:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    c7e2:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7ea:	d807      	bhi.n	c7fc <detect_baud_rate+0x1dc>
            {
                *baud = 230400;
    c7ec:	68fb      	ldr	r3, [r7, #12]
    c7ee:	f44f 3261 	mov.w	r2, #230400	; 0x38400
    c7f2:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7f4:	2301      	movs	r3, #1
    c7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c7fa:	e032      	b.n	c862 <detect_baud_rate+0x242>
            }
            else if ((mean >= 45) && (mean <= 55))
    c7fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c800:	ed9f 7a47 	vldr	s14, [pc, #284]	; c920 <detect_baud_rate+0x300>
    c804:	eef4 7ac7 	vcmpe.f32	s15, s14
    c808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c80c:	db10      	blt.n	c830 <detect_baud_rate+0x210>
    c80e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c812:	ed9f 7a44 	vldr	s14, [pc, #272]	; c924 <detect_baud_rate+0x304>
    c816:	eef4 7ac7 	vcmpe.f32	s15, s14
    c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c81e:	d807      	bhi.n	c830 <detect_baud_rate+0x210>
            {
                *baud = 115200;
    c820:	68fb      	ldr	r3, [r7, #12]
    c822:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    c826:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c828:	2301      	movs	r3, #1
    c82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    c82e:	e018      	b.n	c862 <detect_baud_rate+0x242>
            }
            else if ((mean >= 91) && (mean <= 111))
    c830:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c834:	ed9f 7a3c 	vldr	s14, [pc, #240]	; c928 <detect_baud_rate+0x308>
    c838:	eef4 7ac7 	vcmpe.f32	s15, s14
    c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c840:	db0f      	blt.n	c862 <detect_baud_rate+0x242>
    c842:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    c846:	ed9f 7a39 	vldr	s14, [pc, #228]	; c92c <detect_baud_rate+0x30c>
    c84a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c852:	d806      	bhi.n	c862 <detect_baud_rate+0x242>
            {
                *baud = 57600;
    c854:	68fb      	ldr	r3, [r7, #12]
    c856:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    c85a:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c85c:	2301      	movs	r3, #1
    c85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
            {
                // invalid
            }

            if (baud_is_valid)
    c862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    c866:	2b00      	cmp	r3, #0
    c868:	d00d      	beq.n	c886 <detect_baud_rate+0x266>
            {
                timed_out = false;
    c86a:	2300      	movs	r3, #0
    c86c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }

            break; // exit the timeout loop
    c870:	e009      	b.n	c886 <detect_baud_rate+0x266>
    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c872:	f000 ff15 	bl	d6a0 <millis>
    c876:	4602      	mov	r2, r0
    c878:	69fb      	ldr	r3, [r7, #28]
    c87a:	1ad3      	subs	r3, r2, r3
    c87c:	6a3a      	ldr	r2, [r7, #32]
    c87e:	429a      	cmp	r2, r3
    c880:	f63f af19 	bhi.w	c6b6 <detect_baud_rate+0x96>
    c884:	e000      	b.n	c888 <detect_baud_rate+0x268>
            break; // exit the timeout loop
    c886:	bf00      	nop
        }
    }

    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c888:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    c88c:	f04f 0000 	mov.w	r0, #0
    c890:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c894:	ea42 0800 	orr.w	r8, r2, r0
    c898:	ea43 0901 	orr.w	r9, r3, r1
    c89c:	e9c7 8904 	strd	r8, r9, [r7, #16]
    c8a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    c8a4:	f001 fb60 	bl	df68 <am_hal_gpio_interrupt_disable>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    c8a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    c8ac:	f04f 0000 	mov.w	r0, #0
    c8b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c8b4:	ea42 0400 	orr.w	r4, r2, r0
    c8b8:	ea43 0501 	orr.w	r5, r3, r1
    c8bc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    c8c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    c8c4:	f001 fb76 	bl	dfb4 <am_hal_gpio_interrupt_clear>
    NVIC_DisableIRQ(GPIO_IRQn);
    c8c8:	200d      	movs	r0, #13
    c8ca:	f7ff fdb9 	bl	c440 <__NVIC_DisableIRQ>

    disable_burst_mode();
    c8ce:	f000 ff15 	bl	d6fc <disable_burst_mode>
        }
    }
    debug_printf("}\n");
#endif // DEBUG

    if (!baud_is_valid)
    c8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    c8d6:	f083 0301 	eor.w	r3, r3, #1
    c8da:	b2db      	uxtb	r3, r3
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d00a      	beq.n	c8f6 <detect_baud_rate+0x2d6>
    {
        debug_printf("\tbaud rate not detected.\n\t\trising edges:\t%d\n\t\ttimed out:\t%d\n\n", bl_baud_ticks_index, timed_out);
    c8e0:	4b0d      	ldr	r3, [pc, #52]	; (c918 <detect_baud_rate+0x2f8>)
    c8e2:	781b      	ldrb	r3, [r3, #0]
    c8e4:	b2db      	uxtb	r3, r3
    c8e6:	4619      	mov	r1, r3
    c8e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    c8ec:	461a      	mov	r2, r3
    c8ee:	4810      	ldr	r0, [pc, #64]	; (c930 <detect_baud_rate+0x310>)
    c8f0:	f000 f9d2 	bl	cc98 <debug_printf>
    c8f4:	e005      	b.n	c902 <detect_baud_rate+0x2e2>
    }
    else
    {
        debug_printf("\tdetected valid baud rate:\t%d\n\n", *baud);
    c8f6:	68fb      	ldr	r3, [r7, #12]
    c8f8:	681b      	ldr	r3, [r3, #0]
    c8fa:	4619      	mov	r1, r3
    c8fc:	480d      	ldr	r0, [pc, #52]	; (c934 <detect_baud_rate+0x314>)
    c8fe:	f000 f9cb 	bl	cc98 <debug_printf>
    }

    return baud_is_valid;
    c902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
    c906:	4618      	mov	r0, r3
    c908:	3734      	adds	r7, #52	; 0x34
    c90a:	46bd      	mov	sp, r7
    c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c910:	0000ecf4 	.word	0x0000ecf4
    c914:	0000ef24 	.word	0x0000ef24
    c918:	10000224 	.word	0x10000224
    c91c:	10000228 	.word	0x10000228
    c920:	42340000 	.word	0x42340000
    c924:	425c0000 	.word	0x425c0000
    c928:	42b60000 	.word	0x42b60000
    c92c:	42de0000 	.word	0x42de0000
    c930:	0000ed10 	.word	0x0000ed10
    c934:	0000ed50 	.word	0x0000ed50

0000c938 <start_uart_bl>:
//
// Start BL UART at desired baud
//
//*****************************************************************************
void start_uart_bl(uint32_t baud)
{
    c938:	b580      	push	{r7, lr}
    c93a:	b08e      	sub	sp, #56	; 0x38
    c93c:	af00      	add	r7, sp, #0
    c93e:	6078      	str	r0, [r7, #4]
    const am_hal_gpio_pincfg_t bl_uart_tx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, TX, BL_TX_PAD);
    c940:	2300      	movs	r3, #0
    c942:	637b      	str	r3, [r7, #52]	; 0x34
    const am_hal_gpio_pincfg_t bl_uart_rx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, RX, BL_RX_PAD);
    c944:	2300      	movs	r3, #0
    c946:	633b      	str	r3, [r7, #48]	; 0x30
    am_hal_uart_config_t bl_uart_config =
    c948:	687b      	ldr	r3, [r7, #4]
    c94a:	60bb      	str	r3, [r7, #8]
    c94c:	2360      	movs	r3, #96	; 0x60
    c94e:	60fb      	str	r3, [r7, #12]
    c950:	2300      	movs	r3, #0
    c952:	613b      	str	r3, [r7, #16]
    c954:	2300      	movs	r3, #0
    c956:	617b      	str	r3, [r7, #20]
    c958:	2300      	movs	r3, #0
    c95a:	61bb      	str	r3, [r7, #24]
    c95c:	2312      	movs	r3, #18
    c95e:	61fb      	str	r3, [r7, #28]
    c960:	2300      	movs	r3, #0
    c962:	623b      	str	r3, [r7, #32]
    c964:	2300      	movs	r3, #0
    c966:	627b      	str	r3, [r7, #36]	; 0x24
    c968:	2300      	movs	r3, #0
    c96a:	62bb      	str	r3, [r7, #40]	; 0x28
    c96c:	2300      	movs	r3, #0
    c96e:	62fb      	str	r3, [r7, #44]	; 0x2c
            .pui8RxBuffer = NULL,
            .ui32RxBufferSize = 0,
        };

    // Initialize the printf interface for UART output.
    am_hal_uart_initialize(BL_UART_INST, &hUART_bl);
    c970:	491f      	ldr	r1, [pc, #124]	; (c9f0 <start_uart_bl+0xb8>)
    c972:	2000      	movs	r0, #0
    c974:	f001 fc48 	bl	e208 <am_hal_uart_initialize>
    am_hal_uart_power_control(hUART_bl, AM_HAL_SYSCTRL_WAKE, false);
    c978:	4b1d      	ldr	r3, [pc, #116]	; (c9f0 <start_uart_bl+0xb8>)
    c97a:	681b      	ldr	r3, [r3, #0]
    c97c:	2200      	movs	r2, #0
    c97e:	2100      	movs	r1, #0
    c980:	4618      	mov	r0, r3
    c982:	f001 fc69 	bl	e258 <am_hal_uart_power_control>
    am_hal_uart_configure(hUART_bl, &bl_uart_config);
    c986:	4b1a      	ldr	r3, [pc, #104]	; (c9f0 <start_uart_bl+0xb8>)
    c988:	681b      	ldr	r3, [r3, #0]
    c98a:	f107 0208 	add.w	r2, r7, #8
    c98e:	4611      	mov	r1, r2
    c990:	4618      	mov	r0, r3
    c992:	f001 fcd9 	bl	e348 <am_hal_uart_configure>

    // Disable that pesky FIFO
    UARTn(BL_UART_INST)->LCRH_b.FEN = 0;
    c996:	4a17      	ldr	r2, [pc, #92]	; (c9f4 <start_uart_bl+0xbc>)
    c998:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    c99c:	f36f 1304 	bfc	r3, #4, #1
    c9a0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

    // Enable the UART pins.
    am_hal_gpio_pinconfig(BL_TX_PAD, bl_uart_tx_pinconfig);
    c9a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    c9a6:	2030      	movs	r0, #48	; 0x30
    c9a8:	f001 f97a 	bl	dca0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(BL_RX_PAD, bl_uart_rx_pinconfig);
    c9ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c9ae:	2031      	movs	r0, #49	; 0x31
    c9b0:	f001 f976 	bl	dca0 <am_hal_gpio_pinconfig>

    // Enable interrupts.
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + BL_UART_INST));
    c9b4:	200f      	movs	r0, #15
    c9b6:	f7ff fd25 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(hUART_bl, (AM_HAL_UART_INT_RX));
    c9ba:	4b0d      	ldr	r3, [pc, #52]	; (c9f0 <start_uart_bl+0xb8>)
    c9bc:	681b      	ldr	r3, [r3, #0]
    c9be:	2110      	movs	r1, #16
    c9c0:	4618      	mov	r0, r3
    c9c2:	f002 f85f 	bl	ea84 <am_hal_uart_interrupt_enable>

    // Provide SVL Packet interfaces
    svl_packet_link_read_fn(art_svl_ringbuf_read, &bl_rx_ringbuf);
    c9c6:	490c      	ldr	r1, [pc, #48]	; (c9f8 <start_uart_bl+0xc0>)
    c9c8:	480c      	ldr	r0, [pc, #48]	; (c9fc <start_uart_bl+0xc4>)
    c9ca:	f000 fa7d 	bl	cec8 <svl_packet_link_read_fn>
    svl_packet_link_avail_fn(art_svl_ringbuf_available, &bl_rx_ringbuf);
    c9ce:	490a      	ldr	r1, [pc, #40]	; (c9f8 <start_uart_bl+0xc0>)
    c9d0:	480b      	ldr	r0, [pc, #44]	; (ca00 <start_uart_bl+0xc8>)
    c9d2:	f000 faa5 	bl	cf20 <svl_packet_link_avail_fn>
    svl_packet_link_millis_fn(millis);
    c9d6:	480b      	ldr	r0, [pc, #44]	; (ca04 <start_uart_bl+0xcc>)
    c9d8:	f000 fab8 	bl	cf4c <svl_packet_link_millis_fn>
    svl_packet_link_write_fn(svl_uart_write_byte, hUART_bl);
    c9dc:	4b04      	ldr	r3, [pc, #16]	; (c9f0 <start_uart_bl+0xb8>)
    c9de:	681b      	ldr	r3, [r3, #0]
    c9e0:	4619      	mov	r1, r3
    c9e2:	4809      	ldr	r0, [pc, #36]	; (ca08 <start_uart_bl+0xd0>)
    c9e4:	f000 fa86 	bl	cef4 <svl_packet_link_write_fn>
}
    c9e8:	bf00      	nop
    c9ea:	3738      	adds	r7, #56	; 0x38
    c9ec:	46bd      	mov	sp, r7
    c9ee:	bd80      	pop	{r7, pc}
    c9f0:	10000220 	.word	0x10000220
    c9f4:	4001c000 	.word	0x4001c000
    c9f8:	10000210 	.word	0x10000210
    c9fc:	0000d54d 	.word	0x0000d54d
    ca00:	0000d443 	.word	0x0000d443
    ca04:	0000d6a1 	.word	0x0000d6a1
    ca08:	0000d625 	.word	0x0000d625

0000ca0c <enter_bootload>:
//
// Bootload phase
//
// ****************************************
void enter_bootload(void)
{
    ca0c:	b580      	push	{r7, lr}
    ca0e:	b08c      	sub	sp, #48	; 0x30
    ca10:	af00      	add	r7, sp, #0
    enable_burst_mode();
    ca12:	f000 fe59 	bl	d6c8 <enable_burst_mode>
    bool done = false;
    ca16:	2300      	movs	r3, #0
    ca18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t frame_address = 0;
    ca1c:	2300      	movs	r3, #0
    ca1e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t last_page_erased = 0;
    ca20:	2300      	movs	r3, #0
    ca22:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t retransmit = 0;
    ca24:	2300      	movs	r3, #0
    ca26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    static uint32_t frame_buffer[FRAME_BUFFER_SIZE];

    svl_packet_t svl_packet_incoming_frame = {CMD_FRAME, (uint8_t *)frame_buffer, sizeof(frame_buffer) / sizeof(uint8_t), sizeof(frame_buffer) / sizeof(uint8_t)};
    ca2a:	4a41      	ldr	r2, [pc, #260]	; (cb30 <enter_bootload+0x124>)
    ca2c:	f107 0318 	add.w	r3, r7, #24
    ca30:	ca07      	ldmia	r2, {r0, r1, r2}
    ca32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    svl_packet_t svl_packet_retry = {CMD_RETRY, NULL, 0, 0};
    ca36:	2305      	movs	r3, #5
    ca38:	733b      	strb	r3, [r7, #12]
    ca3a:	2300      	movs	r3, #0
    ca3c:	613b      	str	r3, [r7, #16]
    ca3e:	2300      	movs	r3, #0
    ca40:	82bb      	strh	r3, [r7, #20]
    ca42:	2300      	movs	r3, #0
    ca44:	82fb      	strh	r3, [r7, #22]
    svl_packet_t svl_packet_next = {CMD_NEXT, NULL, 0, 0};
    ca46:	2303      	movs	r3, #3
    ca48:	703b      	strb	r3, [r7, #0]
    ca4a:	2300      	movs	r3, #0
    ca4c:	607b      	str	r3, [r7, #4]
    ca4e:	2300      	movs	r3, #0
    ca50:	813b      	strh	r3, [r7, #8]
    ca52:	2300      	movs	r3, #0
    ca54:	817b      	strh	r3, [r7, #10]

    debug_printf("phase:\tbootload\n");
    ca56:	4837      	ldr	r0, [pc, #220]	; (cb34 <enter_bootload+0x128>)
    ca58:	f000 f91e 	bl	cc98 <debug_printf>

    while (!done)
    ca5c:	e05c      	b.n	cb18 <enter_bootload+0x10c>
    {

        if (retransmit != 0)
    ca5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    ca62:	2b00      	cmp	r3, #0
    ca64:	d008      	beq.n	ca78 <enter_bootload+0x6c>
        {
            debug_printf("\trequesting retransmission\n");
    ca66:	4834      	ldr	r0, [pc, #208]	; (cb38 <enter_bootload+0x12c>)
    ca68:	f000 f916 	bl	cc98 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_retry); // Ask to retransmit
    ca6c:	f107 030c 	add.w	r3, r7, #12
    ca70:	4618      	mov	r0, r3
    ca72:	f000 fa7b 	bl	cf6c <svl_packet_send>
    ca76:	e006      	b.n	ca86 <enter_bootload+0x7a>
        }
        else
        {
            debug_printf("\trequesting next app frame\n");
    ca78:	4830      	ldr	r0, [pc, #192]	; (cb3c <enter_bootload+0x130>)
    ca7a:	f000 f90d 	bl	cc98 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_next); // Ask for the next frame packet
    ca7e:	463b      	mov	r3, r7
    ca80:	4618      	mov	r0, r3
    ca82:	f000 fa73 	bl	cf6c <svl_packet_send>
        }
        retransmit = 0;
    ca86:	2300      	movs	r3, #0
    ca88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t stat = svl_packet_wait(&svl_packet_incoming_frame);
    ca8c:	f107 0318 	add.w	r3, r7, #24
    ca90:	4618      	mov	r0, r3
    ca92:	f000 fb5f 	bl	d154 <svl_packet_wait>
    ca96:	4603      	mov	r3, r0
    ca98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (stat != 0)
    ca9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    caa0:	2b00      	cmp	r3, #0
    caa2:	d012      	beq.n	caca <enter_bootload+0xbe>
        { // wait for either a frame or the done command
            debug_printf("\t\terror receiving packet (%d)\n", stat);
    caa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    caa8:	4619      	mov	r1, r3
    caaa:	4825      	ldr	r0, [pc, #148]	; (cb40 <enter_bootload+0x134>)
    caac:	f000 f8f4 	bl	cc98 <debug_printf>
            retransmit = 1;
    cab0:	2301      	movs	r3, #1
    cab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            am_util_delay_us(177000); //Worst case: wait 177ms for 2048 byte transfer at 115200bps to complete
    cab6:	4823      	ldr	r0, [pc, #140]	; (cb44 <enter_bootload+0x138>)
    cab8:	f000 f99c 	bl	cdf4 <am_util_delay_us>

            //Flush the buffers to remove any inbound or outbound garbage
            bl_rx_ringbuf.r_offset = 0;
    cabc:	4b22      	ldr	r3, [pc, #136]	; (cb48 <enter_bootload+0x13c>)
    cabe:	2200      	movs	r2, #0
    cac0:	609a      	str	r2, [r3, #8]
            bl_rx_ringbuf.w_offset = 0;
    cac2:	4b21      	ldr	r3, [pc, #132]	; (cb48 <enter_bootload+0x13c>)
    cac4:	2200      	movs	r2, #0
    cac6:	60da      	str	r2, [r3, #12]
            continue;
    cac8:	e026      	b.n	cb18 <enter_bootload+0x10c>
        }

        // debug_printf("Successfully received incoming frame packet (todo: add extra details in debug)\n", stat);

        if (svl_packet_incoming_frame.cmd == CMD_FRAME)
    caca:	7e3b      	ldrb	r3, [r7, #24]
    cacc:	2b04      	cmp	r3, #4
    cace:	d112      	bne.n	caf6 <enter_bootload+0xea>
        {
            debug_printf("\t\treceived an app frame\n");
    cad0:	481e      	ldr	r0, [pc, #120]	; (cb4c <enter_bootload+0x140>)
    cad2:	f000 f8e1 	bl	cc98 <debug_printf>
            if (handle_frame_packet(&svl_packet_incoming_frame, &frame_address, &last_page_erased) != 0)
    cad6:	f107 0226 	add.w	r2, r7, #38	; 0x26
    cada:	f107 0128 	add.w	r1, r7, #40	; 0x28
    cade:	f107 0318 	add.w	r3, r7, #24
    cae2:	4618      	mov	r0, r3
    cae4:	f000 f838 	bl	cb58 <handle_frame_packet>
    cae8:	4603      	mov	r3, r0
    caea:	2b00      	cmp	r3, #0
    caec:	d014      	beq.n	cb18 <enter_bootload+0x10c>
            {
                // debug_printf("\t\t\tbootload error - packet could not be handled\n");
                retransmit = 1;
    caee:	2301      	movs	r3, #1
    caf0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                continue;
    caf4:	e010      	b.n	cb18 <enter_bootload+0x10c>
            }
        }
        else if (svl_packet_incoming_frame.cmd == CMD_DONE)
    caf6:	7e3b      	ldrb	r3, [r7, #24]
    caf8:	2b06      	cmp	r3, #6
    cafa:	d106      	bne.n	cb0a <enter_bootload+0xfe>
        {
            debug_printf("\t\treceived done signal!\n\n");
    cafc:	4814      	ldr	r0, [pc, #80]	; (cb50 <enter_bootload+0x144>)
    cafe:	f000 f8cb 	bl	cc98 <debug_printf>
            done = true;
    cb02:	2301      	movs	r3, #1
    cb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    cb08:	e006      	b.n	cb18 <enter_bootload+0x10c>
        }
        else
        {
            debug_printf("bootload error - unknown command\n");
    cb0a:	4812      	ldr	r0, [pc, #72]	; (cb54 <enter_bootload+0x148>)
    cb0c:	f000 f8c4 	bl	cc98 <debug_printf>
            retransmit = 1;
    cb10:	2301      	movs	r3, #1
    cb12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    cb16:	bf00      	nop
    while (!done)
    cb18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cb1c:	f083 0301 	eor.w	r3, r3, #1
    cb20:	b2db      	uxtb	r3, r3
    cb22:	2b00      	cmp	r3, #0
    cb24:	d19b      	bne.n	ca5e <enter_bootload+0x52>
        }
    }

    // finish bootloading
}
    cb26:	bf00      	nop
    cb28:	3730      	adds	r7, #48	; 0x30
    cb2a:	46bd      	mov	sp, r7
    cb2c:	bd80      	pop	{r7, pc}
    cb2e:	bf00      	nop
    cb30:	0000ee38 	.word	0x0000ee38
    cb34:	0000ed70 	.word	0x0000ed70
    cb38:	0000ed84 	.word	0x0000ed84
    cb3c:	0000eda0 	.word	0x0000eda0
    cb40:	0000edbc 	.word	0x0000edbc
    cb44:	0002b368 	.word	0x0002b368
    cb48:	10000210 	.word	0x10000210
    cb4c:	0000eddc 	.word	0x0000eddc
    cb50:	0000edf8 	.word	0x0000edf8
    cb54:	0000ee14 	.word	0x0000ee14

0000cb58 <handle_frame_packet>:
//
// Handle a frame packet
//
// ****************************************
uint8_t handle_frame_packet(svl_packet_t *packet, uint32_t *p_frame_address, uint16_t *p_last_page_erased)
{
    cb58:	b580      	push	{r7, lr}
    cb5a:	b088      	sub	sp, #32
    cb5c:	af00      	add	r7, sp, #0
    cb5e:	60f8      	str	r0, [r7, #12]
    cb60:	60b9      	str	r1, [r7, #8]
    cb62:	607a      	str	r2, [r7, #4]
    // debug_printf("\t\thandling frame\n");
    static uint16_t last_inst_erased=0; //to keep track of last instance of flash
    uint32_t num_words = (packet->pl_len / 4);
    cb64:	68fb      	ldr	r3, [r7, #12]
    cb66:	891b      	ldrh	r3, [r3, #8]
    cb68:	089b      	lsrs	r3, r3, #2
    cb6a:	b29b      	uxth	r3, r3
    cb6c:	61fb      	str	r3, [r7, #28]

    debug_printf("\t\tframe_address = 0x%08X, num_words = %d\n", *(p_frame_address), num_words);
    cb6e:	68bb      	ldr	r3, [r7, #8]
    cb70:	681b      	ldr	r3, [r3, #0]
    cb72:	69fa      	ldr	r2, [r7, #28]
    cb74:	4619      	mov	r1, r3
    cb76:	4836      	ldr	r0, [pc, #216]	; (cc50 <handle_frame_packet+0xf8>)
    cb78:	f000 f88e 	bl	cc98 <debug_printf>

    // Check payload length is multiple of words
    if ((packet->pl_len % 4))
    cb7c:	68fb      	ldr	r3, [r7, #12]
    cb7e:	891b      	ldrh	r3, [r3, #8]
    cb80:	f003 0303 	and.w	r3, r3, #3
    cb84:	b29b      	uxth	r3, r3
    cb86:	2b00      	cmp	r3, #0
    cb88:	d004      	beq.n	cb94 <handle_frame_packet+0x3c>
    {
        debug_printf("Error: frame packet not integer multiple of words (4 bytes per word)\n");
    cb8a:	4832      	ldr	r0, [pc, #200]	; (cc54 <handle_frame_packet+0xfc>)
    cb8c:	f000 f884 	bl	cc98 <debug_printf>
        return 1;
    cb90:	2301      	movs	r3, #1
    cb92:	e059      	b.n	cc48 <handle_frame_packet+0xf0>
    }

    int32_t i32ReturnCode = 0;
    cb94:	2300      	movs	r3, #0
    cb96:	61bb      	str	r3, [r7, #24]
    uint32_t offset_address = (*(p_frame_address) + USERCODE_OFFSET);
    cb98:	68bb      	ldr	r3, [r7, #8]
    cb9a:	681b      	ldr	r3, [r3, #0]
    cb9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cba0:	617b      	str	r3, [r7, #20]
    //if the last page was less than current page, or we switched into next instance
    if ((*p_last_page_erased) < AM_HAL_FLASH_ADDR2PAGE(offset_address) || (last_inst_erased < AM_HAL_FLASH_ADDR2INST(offset_address)))
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	881b      	ldrh	r3, [r3, #0]
    cba6:	461a      	mov	r2, r3
    cba8:	697b      	ldr	r3, [r7, #20]
    cbaa:	0b5b      	lsrs	r3, r3, #13
    cbac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cbb0:	429a      	cmp	r2, r3
    cbb2:	d308      	bcc.n	cbc6 <handle_frame_packet+0x6e>
    cbb4:	4b28      	ldr	r3, [pc, #160]	; (cc58 <handle_frame_packet+0x100>)
    cbb6:	881b      	ldrh	r3, [r3, #0]
    cbb8:	461a      	mov	r2, r3
    cbba:	697b      	ldr	r3, [r7, #20]
    cbbc:	0cdb      	lsrs	r3, r3, #19
    cbbe:	f003 0301 	and.w	r3, r3, #1
    cbc2:	429a      	cmp	r2, r3
    cbc4:	d223      	bcs.n	cc0e <handle_frame_packet+0xb6>
    { // Prevent erasing partially-filled pages
        // debug_printf("Erasing instance %d, page %d\n\r", AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE(offset_address) );

        //Erase the 8k page for this address
        i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, AM_HAL_FLASH_ADDR2INST(offset_address), AM_HAL_FLASH_ADDR2PAGE(offset_address));
    cbc6:	697b      	ldr	r3, [r7, #20]
    cbc8:	0cdb      	lsrs	r3, r3, #19
    cbca:	f003 0101 	and.w	r1, r3, #1
    cbce:	697b      	ldr	r3, [r7, #20]
    cbd0:	0b5b      	lsrs	r3, r3, #13
    cbd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cbd6:	461a      	mov	r2, r3
    cbd8:	4820      	ldr	r0, [pc, #128]	; (cc5c <handle_frame_packet+0x104>)
    cbda:	f000 ffdf 	bl	db9c <am_hal_flash_page_erase>
    cbde:	61b8      	str	r0, [r7, #24]
        *(p_last_page_erased) = AM_HAL_FLASH_ADDR2PAGE(offset_address);
    cbe0:	697b      	ldr	r3, [r7, #20]
    cbe2:	0b5b      	lsrs	r3, r3, #13
    cbe4:	b29b      	uxth	r3, r3
    cbe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cbea:	b29a      	uxth	r2, r3
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	801a      	strh	r2, [r3, #0]
        last_inst_erased=AM_HAL_FLASH_ADDR2INST(offset_address); //keep track of last instance
    cbf0:	697b      	ldr	r3, [r7, #20]
    cbf2:	0cdb      	lsrs	r3, r3, #19
    cbf4:	b29b      	uxth	r3, r3
    cbf6:	f003 0301 	and.w	r3, r3, #1
    cbfa:	b29a      	uxth	r2, r3
    cbfc:	4b16      	ldr	r3, [pc, #88]	; (cc58 <handle_frame_packet+0x100>)
    cbfe:	801a      	strh	r2, [r3, #0]

        if (i32ReturnCode)
    cc00:	69bb      	ldr	r3, [r7, #24]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d003      	beq.n	cc0e <handle_frame_packet+0xb6>
        {
            debug_printf("FLASH_MASS_ERASE i32ReturnCode = 0x%x.\n\r", i32ReturnCode);
    cc06:	69b9      	ldr	r1, [r7, #24]
    cc08:	4815      	ldr	r0, [pc, #84]	; (cc60 <handle_frame_packet+0x108>)
    cc0a:	f000 f845 	bl	cc98 <debug_printf>
        }
    }

    //Record the array
    //debug_printf("Recording %d words (%d bytes) to memory\n", num_words, 4 * num_words);
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, (uint32_t *)packet->pl, (uint32_t *)(*(p_frame_address) + USERCODE_OFFSET), num_words);
    cc0e:	68fb      	ldr	r3, [r7, #12]
    cc10:	6859      	ldr	r1, [r3, #4]
    cc12:	68bb      	ldr	r3, [r7, #8]
    cc14:	681b      	ldr	r3, [r3, #0]
    cc16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cc1a:	461a      	mov	r2, r3
    cc1c:	69fb      	ldr	r3, [r7, #28]
    cc1e:	480f      	ldr	r0, [pc, #60]	; (cc5c <handle_frame_packet+0x104>)
    cc20:	f000 ffc0 	bl	dba4 <am_hal_flash_program_main>
    cc24:	61b8      	str	r0, [r7, #24]
    if (i32ReturnCode)
    cc26:	69bb      	ldr	r3, [r7, #24]
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d005      	beq.n	cc38 <handle_frame_packet+0xe0>
    {
        debug_printf("FLASH_WRITE error = 0x%x.\n\r", i32ReturnCode);
    cc2c:	69b9      	ldr	r1, [r7, #24]
    cc2e:	480d      	ldr	r0, [pc, #52]	; (cc64 <handle_frame_packet+0x10c>)
    cc30:	f000 f832 	bl	cc98 <debug_printf>
        return 1;
    cc34:	2301      	movs	r3, #1
    cc36:	e007      	b.n	cc48 <handle_frame_packet+0xf0>
    }
    *(p_frame_address) += num_words * 4;
    cc38:	68bb      	ldr	r3, [r7, #8]
    cc3a:	681a      	ldr	r2, [r3, #0]
    cc3c:	69fb      	ldr	r3, [r7, #28]
    cc3e:	009b      	lsls	r3, r3, #2
    cc40:	441a      	add	r2, r3
    cc42:	68bb      	ldr	r3, [r7, #8]
    cc44:	601a      	str	r2, [r3, #0]

    // debug_printf("Array recorded to flash\n");
    return 0;
    cc46:	2300      	movs	r3, #0
}
    cc48:	4618      	mov	r0, r3
    cc4a:	3720      	adds	r7, #32
    cc4c:	46bd      	mov	sp, r7
    cc4e:	bd80      	pop	{r7, pc}
    cc50:	0000ee44 	.word	0x0000ee44
    cc54:	0000ee70 	.word	0x0000ee70
    cc58:	10000a3c 	.word	0x10000a3c
    cc5c:	12344321 	.word	0x12344321
    cc60:	0000eeb8 	.word	0x0000eeb8
    cc64:	0000eee4 	.word	0x0000eee4

0000cc68 <app_start>:
//
// Jump to the application
//
// ****************************************
void app_start(void)
{
    cc68:	b580      	push	{r7, lr}
    cc6a:	b082      	sub	sp, #8
    cc6c:	af00      	add	r7, sp, #0
    //     debug_printf("\n");
    // #endif // APP_PRINT_PRETTY
    // #endif // DEBUG_PRINT_APP
    // #endif // DEBUG

    void *entryPoint = (void *)(*((uint32_t *)(USERCODE_OFFSET + 4)));
    cc6e:	4b08      	ldr	r3, [pc, #32]	; (cc90 <app_start+0x28>)
    cc70:	681b      	ldr	r3, [r3, #0]
    cc72:	607b      	str	r3, [r7, #4]
    debug_printf("\nJump to App at 0x%08X\n\n", (uint32_t)entryPoint);
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	4619      	mov	r1, r3
    cc78:	4806      	ldr	r0, [pc, #24]	; (cc94 <app_start+0x2c>)
    cc7a:	f000 f80d 	bl	cc98 <debug_printf>
    am_util_delay_ms(10); // Wait for prints to complete
    cc7e:	200a      	movs	r0, #10
    cc80:	f000 f89a 	bl	cdb8 <am_util_delay_ms>
    unsetup();            // Undoes configuration to provide users with a clean slate
    cc84:	f7ff fcb6 	bl	c5f4 <unsetup>
    goto *entryPoint;     // Jump to start of user code
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	f043 0301 	orr.w	r3, r3, #1
    cc8e:	4718      	bx	r3
    cc90:	00010004 	.word	0x00010004
    cc94:	0000ef00 	.word	0x0000ef00

0000cc98 <debug_printf>:
//
// Debug printf function
//
// ****************************************
void debug_printf(char *fmt, ...)
{
    cc98:	b40f      	push	{r0, r1, r2, r3}
    cc9a:	b480      	push	{r7}
    cc9c:	af00      	add	r7, sp, #0
    vsnprintf(debug_buffer, DEBUG_UART_BUF_LEN, (const char *)fmt, args);
    va_end(args);

    svl_uart_print(hUART_debug, debug_buffer);
#endif //DEBUG
}
    cc9e:	bf00      	nop
    cca0:	46bd      	mov	sp, r7
    cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cca6:	b004      	add	sp, #16
    cca8:	4770      	bx	lr
	...

0000ccac <am_uart_isr>:
//
// UART interrupt handlers
//
//*****************************************************************************
void am_uart_isr(void)
{
    ccac:	b580      	push	{r7, lr}
    ccae:	b084      	sub	sp, #16
    ccb0:	af00      	add	r7, sp, #0
    // Service the FIFOs as necessary, and clear the interrupts.
#if BL_UART_INST == 0
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(hUART_bl, &ui32Status, true);
    ccb2:	4b18      	ldr	r3, [pc, #96]	; (cd14 <am_uart_isr+0x68>)
    ccb4:	681b      	ldr	r3, [r3, #0]
    ccb6:	f107 010c 	add.w	r1, r7, #12
    ccba:	2201      	movs	r2, #1
    ccbc:	4618      	mov	r0, r3
    ccbe:	f001 ff07 	bl	ead0 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(hUART_bl, ui32Status);
    ccc2:	4b14      	ldr	r3, [pc, #80]	; (cd14 <am_uart_isr+0x68>)
    ccc4:	681b      	ldr	r3, [r3, #0]
    ccc6:	68fa      	ldr	r2, [r7, #12]
    ccc8:	4611      	mov	r1, r2
    ccca:	4618      	mov	r0, r3
    cccc:	f001 feee 	bl	eaac <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(hUART_bl, ui32Status, &ui32Idle);
    ccd0:	4b10      	ldr	r3, [pc, #64]	; (cd14 <am_uart_isr+0x68>)
    ccd2:	681b      	ldr	r3, [r3, #0]
    ccd4:	68f9      	ldr	r1, [r7, #12]
    ccd6:	f107 0208 	add.w	r2, r7, #8
    ccda:	4618      	mov	r0, r3
    ccdc:	f001 fe3c 	bl	e958 <am_hal_uart_interrupt_service>
    if (ui32Status & AM_HAL_UART_INT_RX)
    cce0:	68fb      	ldr	r3, [r7, #12]
    cce2:	f003 0310 	and.w	r3, r3, #16
    cce6:	2b00      	cmp	r3, #0
    cce8:	d010      	beq.n	cd0c <am_uart_isr+0x60>
    {
        uint8_t c = 0x00;
    ccea:	2300      	movs	r3, #0
    ccec:	71fb      	strb	r3, [r7, #7]
        if (svl_uart_read(hUART_bl, (char *)&c, 1) != 0)
    ccee:	4b09      	ldr	r3, [pc, #36]	; (cd14 <am_uart_isr+0x68>)
    ccf0:	681b      	ldr	r3, [r3, #0]
    ccf2:	1df9      	adds	r1, r7, #7
    ccf4:	2201      	movs	r2, #1
    ccf6:	4618      	mov	r0, r3
    ccf8:	f000 fc57 	bl	d5aa <svl_uart_read>
    ccfc:	4603      	mov	r3, r0
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d004      	beq.n	cd0c <am_uart_isr+0x60>
        {
            art_svl_ringbuf_write(&bl_rx_ringbuf, c);
    cd02:	79fb      	ldrb	r3, [r7, #7]
    cd04:	4619      	mov	r1, r3
    cd06:	4804      	ldr	r0, [pc, #16]	; (cd18 <am_uart_isr+0x6c>)
    cd08:	f000 fbf1 	bl	d4ee <art_svl_ringbuf_write>
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cd0c:	bf00      	nop
    cd0e:	3710      	adds	r7, #16
    cd10:	46bd      	mov	sp, r7
    cd12:	bd80      	pop	{r7, pc}
    cd14:	10000220 	.word	0x10000220
    cd18:	10000210 	.word	0x10000210

0000cd1c <am_uart1_isr>:

void am_uart1_isr(void)
{
    cd1c:	b480      	push	{r7}
    cd1e:	af00      	add	r7, sp, #0
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cd20:	bf00      	nop
    cd22:	46bd      	mov	sp, r7
    cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd28:	4770      	bx	lr
	...

0000cd2c <am_gpio_isr>:
//
// GPIO interrupt handler
//
//*****************************************************************************
void am_gpio_isr(void)
{
    cd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd2e:	b083      	sub	sp, #12
    cd30:	af00      	add	r7, sp, #0
    AM_HAL_GPIO_MASKCREATE(BL_RX_PAD_Mask);
    cd32:	f04f 0100 	mov.w	r1, #0
    cd36:	f04f 0200 	mov.w	r2, #0
    cd3a:	e9c7 1200 	strd	r1, r2, [r7]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pBL_RX_PAD_Mask, BL_RX_PAD));
    cd3e:	e9d7 1200 	ldrd	r1, r2, [r7]
    cd42:	f04f 0500 	mov.w	r5, #0
    cd46:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    cd4a:	ea41 0305 	orr.w	r3, r1, r5
    cd4e:	ea42 0406 	orr.w	r4, r2, r6
    cd52:	e9c7 3400 	strd	r3, r4, [r7]
    cd56:	e9d7 0100 	ldrd	r0, r1, [r7]
    cd5a:	f001 f92b 	bl	dfb4 <am_hal_gpio_interrupt_clear>
    if (bl_baud_ticks_index < BL_BAUD_SAMPLES)
    cd5e:	4b0b      	ldr	r3, [pc, #44]	; (cd8c <am_gpio_isr+0x60>)
    cd60:	781b      	ldrb	r3, [r3, #0]
    cd62:	b2db      	uxtb	r3, r3
    cd64:	2b04      	cmp	r3, #4
    cd66:	d80d      	bhi.n	cd84 <am_gpio_isr+0x58>
    {
        bl_baud_ticks[bl_baud_ticks_index++] = CTIMER->STTMR;
    cd68:	4a09      	ldr	r2, [pc, #36]	; (cd90 <am_gpio_isr+0x64>)
    cd6a:	4b08      	ldr	r3, [pc, #32]	; (cd8c <am_gpio_isr+0x60>)
    cd6c:	781b      	ldrb	r3, [r3, #0]
    cd6e:	b2db      	uxtb	r3, r3
    cd70:	1c59      	adds	r1, r3, #1
    cd72:	b2c8      	uxtb	r0, r1
    cd74:	4905      	ldr	r1, [pc, #20]	; (cd8c <am_gpio_isr+0x60>)
    cd76:	7008      	strb	r0, [r1, #0]
    cd78:	4619      	mov	r1, r3
    cd7a:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
    cd7e:	4a05      	ldr	r2, [pc, #20]	; (cd94 <am_gpio_isr+0x68>)
    cd80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
}
    cd84:	bf00      	nop
    cd86:	370c      	adds	r7, #12
    cd88:	46bd      	mov	sp, r7
    cd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd8c:	10000224 	.word	0x10000224
    cd90:	40008000 	.word	0x40008000
    cd94:	10000228 	.word	0x10000228

0000cd98 <am_stimer_isr>:
//
// STimer interrupt handler
//
//*****************************************************************************
void am_stimer_isr(void)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	af00      	add	r7, sp, #0
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
    cd9c:	f44f 7080 	mov.w	r0, #256	; 0x100
    cda0:	f001 f9f4 	bl	e18c <am_hal_stimer_int_clear>
    ap3_stimer_overflows += 1;
    cda4:	4b03      	ldr	r3, [pc, #12]	; (cdb4 <am_stimer_isr+0x1c>)
    cda6:	681b      	ldr	r3, [r3, #0]
    cda8:	3301      	adds	r3, #1
    cdaa:	4a02      	ldr	r2, [pc, #8]	; (cdb4 <am_stimer_isr+0x1c>)
    cdac:	6013      	str	r3, [r2, #0]
    // At the fastest rate (3MHz) the 64 bits of the stimer
    // along with this overflow counter can keep track of
    // the time for ~ 195,000 years without wrapping to 0
    cdae:	bf00      	nop
    cdb0:	bd80      	pop	{r7, pc}
    cdb2:	bf00      	nop
    cdb4:	10000a5c 	.word	0x10000a5c

0000cdb8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    cdb8:	b580      	push	{r7, lr}
    cdba:	b088      	sub	sp, #32
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cdc0:	f107 030c 	add.w	r3, r7, #12
    cdc4:	4618      	mov	r0, r3
    cdc6:	f000 fecb 	bl	db60 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cdca:	68fb      	ldr	r3, [r7, #12]
    cdcc:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cdce:	69fb      	ldr	r3, [r7, #28]
    cdd0:	4a07      	ldr	r2, [pc, #28]	; (cdf0 <am_util_delay_ms+0x38>)
    cdd2:	fba2 2303 	umull	r2, r3, r2, r3
    cdd6:	099a      	lsrs	r2, r3, #6
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	fb02 f303 	mul.w	r3, r2, r3
    cdde:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cde0:	69b8      	ldr	r0, [r7, #24]
    cde2:	f000 ff0d 	bl	dc00 <am_hal_flash_delay>
}
    cde6:	bf00      	nop
    cde8:	3720      	adds	r7, #32
    cdea:	46bd      	mov	sp, r7
    cdec:	bd80      	pop	{r7, pc}
    cdee:	bf00      	nop
    cdf0:	057619f1 	.word	0x057619f1

0000cdf4 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    cdf4:	b580      	push	{r7, lr}
    cdf6:	b088      	sub	sp, #32
    cdf8:	af00      	add	r7, sp, #0
    cdfa:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cdfc:	f107 030c 	add.w	r3, r7, #12
    ce00:	4618      	mov	r0, r3
    ce02:	f000 fead 	bl	db60 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    ce06:	68fb      	ldr	r3, [r7, #12]
    ce08:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    ce0a:	69fb      	ldr	r3, [r7, #28]
    ce0c:	4a07      	ldr	r2, [pc, #28]	; (ce2c <am_util_delay_us+0x38>)
    ce0e:	fba2 2303 	umull	r2, r3, r2, r3
    ce12:	0c9a      	lsrs	r2, r3, #18
    ce14:	687b      	ldr	r3, [r7, #4]
    ce16:	fb02 f303 	mul.w	r3, r2, r3
    ce1a:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    ce1c:	69b8      	ldr	r0, [r7, #24]
    ce1e:	f000 feef 	bl	dc00 <am_hal_flash_delay>
}
    ce22:	bf00      	nop
    ce24:	3720      	adds	r7, #32
    ce26:	46bd      	mov	sp, r7
    ce28:	bd80      	pop	{r7, pc}
    ce2a:	bf00      	nop
    ce2c:	165e9f81 	.word	0x165e9f81

0000ce30 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    ce30:	4818      	ldr	r0, [pc, #96]	; (ce94 <zero_loop+0x2c>)
    ce32:	4919      	ldr	r1, [pc, #100]	; (ce98 <zero_loop+0x30>)
    ce34:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    ce36:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    ce3a:	4818      	ldr	r0, [pc, #96]	; (ce9c <zero_loop+0x34>)
    ce3c:	6801      	ldr	r1, [r0, #0]
    ce3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce42:	6001      	str	r1, [r0, #0]
    ce44:	f3bf 8f4f 	dsb	sy
    ce48:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    ce4c:	4814      	ldr	r0, [pc, #80]	; (cea0 <zero_loop+0x38>)
    ce4e:	4915      	ldr	r1, [pc, #84]	; (cea4 <zero_loop+0x3c>)
    ce50:	4a15      	ldr	r2, [pc, #84]	; (cea8 <zero_loop+0x40>)

0000ce52 <copy_loop>:
    ce52:	4291      	cmp	r1, r2
    ce54:	d004      	beq.n	ce60 <copy_end>
    ce56:	f850 3b04 	ldr.w	r3, [r0], #4
    ce5a:	f841 3b04 	str.w	r3, [r1], #4
    ce5e:	e7f8      	b.n	ce52 <copy_loop>

0000ce60 <copy_end>:
          "copy_end:\n");
    
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    ce60:	4812      	ldr	r0, [pc, #72]	; (ceac <zero_loop+0x44>)
    ce62:	4913      	ldr	r1, [pc, #76]	; (ceb0 <zero_loop+0x48>)
    ce64:	f04f 0200 	mov.w	r2, #0

0000ce68 <zero_loop>:
    ce68:	4288      	cmp	r0, r1
    ce6a:	bfb8      	it	lt
    ce6c:	f840 2b04 	strlt.w	r2, [r0], #4
    ce70:	dbfa      	blt.n	ce68 <zero_loop>
    //
    // Call Global Static Constructors for C++ support
    //
    extern void (*__init_array_start)(void);    // symbols must be
    extern void (*__init_array_end)(void);      // provided by linker
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    ce72:	4c06      	ldr	r4, [pc, #24]	; (ce8c <zero_loop+0x24>)
    ce74:	e002      	b.n	ce7c <zero_loop+0x14>
        (*p)();                                 // Call each function in the list
    ce76:	6823      	ldr	r3, [r4, #0]
    ce78:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    ce7a:	3404      	adds	r4, #4
    ce7c:	4b04      	ldr	r3, [pc, #16]	; (ce90 <zero_loop+0x28>)
    ce7e:	429c      	cmp	r4, r3
    ce80:	d3f9      	bcc.n	ce76 <zero_loop+0xe>
    }

    //
    // Call the application's entry point.
    //
    main();
    ce82:	f7ff faff 	bl	c484 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    ce86:	be00      	bkpt	0x0000
}
    ce88:	bf00      	nop
    ce8a:	bf00      	nop
    ce8c:	0000ec18 	.word	0x0000ec18
    ce90:	0000ec18 	.word	0x0000ec18
    ce94:	e000ed08 	.word	0xe000ed08
    ce98:	0000c000 	.word	0x0000c000
    ce9c:	e000ed88 	.word	0xe000ed88
    cea0:	0000f158 	.word	0x0000f158
    cea4:	10000000 	.word	0x10000000
    cea8:	1000020c 	.word	0x1000020c
    ceac:	10000210 	.word	0x10000210
    ceb0:	10000b40 	.word	0x10000b40

0000ceb4 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    ceb4:	b480      	push	{r7}
    ceb6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ceb8:	e7fe      	b.n	ceb8 <NMI_Handler+0x4>

0000ceba <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
    ceba:	b480      	push	{r7}
    cebc:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cebe:	e7fe      	b.n	cebe <BusFault_Handler+0x4>

0000cec0 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    cec0:	b480      	push	{r7}
    cec2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cec4:	e7fe      	b.n	cec4 <DebugMon_Handler+0x4>
	...

0000cec8 <svl_packet_link_read_fn>:
  }
  return retval;
}

void svl_packet_link_read_fn(svl_packet_read_byte_fn_t fn, void *param)
{
    cec8:	b480      	push	{r7}
    ceca:	b083      	sub	sp, #12
    cecc:	af00      	add	r7, sp, #0
    cece:	6078      	str	r0, [r7, #4]
    ced0:	6039      	str	r1, [r7, #0]
  read_param = param;
    ced2:	4a06      	ldr	r2, [pc, #24]	; (ceec <svl_packet_link_read_fn+0x24>)
    ced4:	683b      	ldr	r3, [r7, #0]
    ced6:	6013      	str	r3, [r2, #0]
  read_fn = fn;
    ced8:	4a05      	ldr	r2, [pc, #20]	; (cef0 <svl_packet_link_read_fn+0x28>)
    ceda:	687b      	ldr	r3, [r7, #4]
    cedc:	6013      	str	r3, [r2, #0]
}
    cede:	bf00      	nop
    cee0:	370c      	adds	r7, #12
    cee2:	46bd      	mov	sp, r7
    cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cee8:	4770      	bx	lr
    ceea:	bf00      	nop
    ceec:	10000a40 	.word	0x10000a40
    cef0:	10000a4c 	.word	0x10000a4c

0000cef4 <svl_packet_link_write_fn>:

void svl_packet_link_write_fn(svl_packet_write_byte_fn_t fn, void *param)
{
    cef4:	b480      	push	{r7}
    cef6:	b083      	sub	sp, #12
    cef8:	af00      	add	r7, sp, #0
    cefa:	6078      	str	r0, [r7, #4]
    cefc:	6039      	str	r1, [r7, #0]
  write_param = param;
    cefe:	4a06      	ldr	r2, [pc, #24]	; (cf18 <svl_packet_link_write_fn+0x24>)
    cf00:	683b      	ldr	r3, [r7, #0]
    cf02:	6013      	str	r3, [r2, #0]
  write_fn = fn;
    cf04:	4a05      	ldr	r2, [pc, #20]	; (cf1c <svl_packet_link_write_fn+0x28>)
    cf06:	687b      	ldr	r3, [r7, #4]
    cf08:	6013      	str	r3, [r2, #0]
}
    cf0a:	bf00      	nop
    cf0c:	370c      	adds	r7, #12
    cf0e:	46bd      	mov	sp, r7
    cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf14:	4770      	bx	lr
    cf16:	bf00      	nop
    cf18:	10000a44 	.word	0x10000a44
    cf1c:	10000a50 	.word	0x10000a50

0000cf20 <svl_packet_link_avail_fn>:

void svl_packet_link_avail_fn(svl_packet_avail_bytes_fn_t fn, void *param)
{
    cf20:	b480      	push	{r7}
    cf22:	b083      	sub	sp, #12
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
    cf28:	6039      	str	r1, [r7, #0]
  avail_param = param;
    cf2a:	4a06      	ldr	r2, [pc, #24]	; (cf44 <svl_packet_link_avail_fn+0x24>)
    cf2c:	683b      	ldr	r3, [r7, #0]
    cf2e:	6013      	str	r3, [r2, #0]
  avail_fn = fn;
    cf30:	4a05      	ldr	r2, [pc, #20]	; (cf48 <svl_packet_link_avail_fn+0x28>)
    cf32:	687b      	ldr	r3, [r7, #4]
    cf34:	6013      	str	r3, [r2, #0]
}
    cf36:	bf00      	nop
    cf38:	370c      	adds	r7, #12
    cf3a:	46bd      	mov	sp, r7
    cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf40:	4770      	bx	lr
    cf42:	bf00      	nop
    cf44:	10000a48 	.word	0x10000a48
    cf48:	10000a54 	.word	0x10000a54

0000cf4c <svl_packet_link_millis_fn>:

void svl_packet_link_millis_fn(svl_packet_millis_fn_t fn)
{
    cf4c:	b480      	push	{r7}
    cf4e:	b083      	sub	sp, #12
    cf50:	af00      	add	r7, sp, #0
    cf52:	6078      	str	r0, [r7, #4]
  millis_fn = fn;
    cf54:	4a04      	ldr	r2, [pc, #16]	; (cf68 <svl_packet_link_millis_fn+0x1c>)
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	6013      	str	r3, [r2, #0]
}
    cf5a:	bf00      	nop
    cf5c:	370c      	adds	r7, #12
    cf5e:	46bd      	mov	sp, r7
    cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf64:	4770      	bx	lr
    cf66:	bf00      	nop
    cf68:	10000a58 	.word	0x10000a58

0000cf6c <svl_packet_send>:

void svl_packet_send(svl_packet_t *packet)
{
    cf6c:	b580      	push	{r7, lr}
    cf6e:	b092      	sub	sp, #72	; 0x48
    cf70:	af00      	add	r7, sp, #0
    cf72:	6078      	str	r0, [r7, #4]
  CRCL = 0;
    cf74:	4b72      	ldr	r3, [pc, #456]	; (d140 <svl_packet_send+0x1d4>)
    cf76:	2200      	movs	r2, #0
    cf78:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    cf7a:	4b72      	ldr	r3, [pc, #456]	; (d144 <svl_packet_send+0x1d8>)
    cf7c:	2200      	movs	r2, #0
    cf7e:	701a      	strb	r2, [r3, #0]
  updateCRC(packet->cmd); //Add this byte to CRC
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint16_t tableAddr = (num ^ CRCH);
    cf88:	4b6e      	ldr	r3, [pc, #440]	; (d144 <svl_packet_send+0x1d8>)
    cf8a:	781a      	ldrb	r2, [r3, #0]
    cf8c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    cf90:	4053      	eors	r3, r2
    cf92:	b2db      	uxtb	r3, r3
    cf94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cf96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cf98:	4a6b      	ldr	r2, [pc, #428]	; (d148 <svl_packet_send+0x1dc>)
    cf9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf9e:	0a1b      	lsrs	r3, r3, #8
    cfa0:	b29b      	uxth	r3, r3
    cfa2:	b2da      	uxtb	r2, r3
    cfa4:	4b66      	ldr	r3, [pc, #408]	; (d140 <svl_packet_send+0x1d4>)
    cfa6:	781b      	ldrb	r3, [r3, #0]
    cfa8:	4053      	eors	r3, r2
    cfaa:	b2da      	uxtb	r2, r3
    cfac:	4b65      	ldr	r3, [pc, #404]	; (d144 <svl_packet_send+0x1d8>)
    cfae:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cfb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cfb2:	4a65      	ldr	r2, [pc, #404]	; (d148 <svl_packet_send+0x1dc>)
    cfb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfb8:	b2da      	uxtb	r2, r3
    cfba:	4b61      	ldr	r3, [pc, #388]	; (d140 <svl_packet_send+0x1d4>)
    cfbc:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cfbe:	2300      	movs	r3, #0
    cfc0:	647b      	str	r3, [r7, #68]	; 0x44
    cfc2:	e024      	b.n	d00e <svl_packet_send+0xa2>
  {
    updateCRC(*(packet->pl + x)); //Add this byte to CRC
    cfc4:	687b      	ldr	r3, [r7, #4]
    cfc6:	685a      	ldr	r2, [r3, #4]
    cfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cfca:	4413      	add	r3, r2
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint16_t tableAddr = (num ^ CRCH);
    cfd2:	4b5c      	ldr	r3, [pc, #368]	; (d144 <svl_packet_send+0x1d8>)
    cfd4:	781a      	ldrb	r2, [r3, #0]
    cfd6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    cfda:	4053      	eors	r3, r2
    cfdc:	b2db      	uxtb	r3, r3
    cfde:	877b      	strh	r3, [r7, #58]	; 0x3a
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cfe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cfe2:	4a59      	ldr	r2, [pc, #356]	; (d148 <svl_packet_send+0x1dc>)
    cfe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfe8:	0a1b      	lsrs	r3, r3, #8
    cfea:	b29b      	uxth	r3, r3
    cfec:	b2da      	uxtb	r2, r3
    cfee:	4b54      	ldr	r3, [pc, #336]	; (d140 <svl_packet_send+0x1d4>)
    cff0:	781b      	ldrb	r3, [r3, #0]
    cff2:	4053      	eors	r3, r2
    cff4:	b2da      	uxtb	r2, r3
    cff6:	4b53      	ldr	r3, [pc, #332]	; (d144 <svl_packet_send+0x1d8>)
    cff8:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cffa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cffc:	4a52      	ldr	r2, [pc, #328]	; (d148 <svl_packet_send+0x1dc>)
    cffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d002:	b2da      	uxtb	r2, r3
    d004:	4b4e      	ldr	r3, [pc, #312]	; (d140 <svl_packet_send+0x1d4>)
    d006:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    d008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d00a:	3301      	adds	r3, #1
    d00c:	647b      	str	r3, [r7, #68]	; 0x44
    d00e:	687b      	ldr	r3, [r7, #4]
    d010:	891b      	ldrh	r3, [r3, #8]
    d012:	461a      	mov	r2, r3
    d014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d016:	4293      	cmp	r3, r2
    d018:	d3d4      	bcc.n	cfc4 <svl_packet_send+0x58>
  }

  svl_packet_write_byte(((packet->pl_len + 3) >> 8));   // len high byte (including command and CRC bytes)
    d01a:	687b      	ldr	r3, [r7, #4]
    d01c:	891b      	ldrh	r3, [r3, #8]
    d01e:	3303      	adds	r3, #3
    d020:	121b      	asrs	r3, r3, #8
    d022:	b2db      	uxtb	r3, r3
    d024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  size_t retval = 0x00;
    d028:	2300      	movs	r3, #0
    d02a:	627b      	str	r3, [r7, #36]	; 0x24
  if (write_fn != NULL)
    d02c:	4b47      	ldr	r3, [pc, #284]	; (d14c <svl_packet_send+0x1e0>)
    d02e:	681b      	ldr	r3, [r3, #0]
    d030:	2b00      	cmp	r3, #0
    d032:	d008      	beq.n	d046 <svl_packet_send+0xda>
    retval = write_fn(write_param, c);
    d034:	4b45      	ldr	r3, [pc, #276]	; (d14c <svl_packet_send+0x1e0>)
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	4a45      	ldr	r2, [pc, #276]	; (d150 <svl_packet_send+0x1e4>)
    d03a:	6812      	ldr	r2, [r2, #0]
    d03c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    d040:	4610      	mov	r0, r2
    d042:	4798      	blx	r3
    d044:	6278      	str	r0, [r7, #36]	; 0x24
  svl_packet_write_byte(((packet->pl_len + 3) & 0xFF)); // len low byte  (including command and CRC bytes)
    d046:	687b      	ldr	r3, [r7, #4]
    d048:	891b      	ldrh	r3, [r3, #8]
    d04a:	b2db      	uxtb	r3, r3
    d04c:	3303      	adds	r3, #3
    d04e:	b2db      	uxtb	r3, r3
    d050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  size_t retval = 0x00;
    d054:	2300      	movs	r3, #0
    d056:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (write_fn != NULL)
    d058:	4b3c      	ldr	r3, [pc, #240]	; (d14c <svl_packet_send+0x1e0>)
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	d008      	beq.n	d072 <svl_packet_send+0x106>
    retval = write_fn(write_param, c);
    d060:	4b3a      	ldr	r3, [pc, #232]	; (d14c <svl_packet_send+0x1e0>)
    d062:	681b      	ldr	r3, [r3, #0]
    d064:	4a3a      	ldr	r2, [pc, #232]	; (d150 <svl_packet_send+0x1e4>)
    d066:	6812      	ldr	r2, [r2, #0]
    d068:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
    d06c:	4610      	mov	r0, r2
    d06e:	4798      	blx	r3
    d070:	62f8      	str	r0, [r7, #44]	; 0x2c

  svl_packet_write_byte((packet->cmd)); // command byte
    d072:	687b      	ldr	r3, [r7, #4]
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  size_t retval = 0x00;
    d07a:	2300      	movs	r3, #0
    d07c:	637b      	str	r3, [r7, #52]	; 0x34
  if (write_fn != NULL)
    d07e:	4b33      	ldr	r3, [pc, #204]	; (d14c <svl_packet_send+0x1e0>)
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	2b00      	cmp	r3, #0
    d084:	d008      	beq.n	d098 <svl_packet_send+0x12c>
    retval = write_fn(write_param, c);
    d086:	4b31      	ldr	r3, [pc, #196]	; (d14c <svl_packet_send+0x1e0>)
    d088:	681b      	ldr	r3, [r3, #0]
    d08a:	4a31      	ldr	r2, [pc, #196]	; (d150 <svl_packet_send+0x1e4>)
    d08c:	6812      	ldr	r2, [r2, #0]
    d08e:	f897 1039 	ldrb.w	r1, [r7, #57]	; 0x39
    d092:	4610      	mov	r0, r2
    d094:	4798      	blx	r3
    d096:	6378      	str	r0, [r7, #52]	; 0x34

  if ((packet->pl != NULL) && (packet->pl_len != 0))
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	685b      	ldr	r3, [r3, #4]
    d09c:	2b00      	cmp	r3, #0
    d09e:	d029      	beq.n	d0f4 <svl_packet_send+0x188>
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	891b      	ldrh	r3, [r3, #8]
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d025      	beq.n	d0f4 <svl_packet_send+0x188>
  {
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    d0a8:	2300      	movs	r3, #0
    d0aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    d0ae:	e01b      	b.n	d0e8 <svl_packet_send+0x17c>
    { // payload
      svl_packet_write_byte(*(packet->pl + indi));
    d0b0:	687b      	ldr	r3, [r7, #4]
    d0b2:	685a      	ldr	r2, [r3, #4]
    d0b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    d0b8:	4413      	add	r3, r2
    d0ba:	781b      	ldrb	r3, [r3, #0]
    d0bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t retval = 0x00;
    d0c0:	2300      	movs	r3, #0
    d0c2:	61fb      	str	r3, [r7, #28]
  if (write_fn != NULL)
    d0c4:	4b21      	ldr	r3, [pc, #132]	; (d14c <svl_packet_send+0x1e0>)
    d0c6:	681b      	ldr	r3, [r3, #0]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d008      	beq.n	d0de <svl_packet_send+0x172>
    retval = write_fn(write_param, c);
    d0cc:	4b1f      	ldr	r3, [pc, #124]	; (d14c <svl_packet_send+0x1e0>)
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	4a1f      	ldr	r2, [pc, #124]	; (d150 <svl_packet_send+0x1e4>)
    d0d2:	6812      	ldr	r2, [r2, #0]
    d0d4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    d0d8:	4610      	mov	r0, r2
    d0da:	4798      	blx	r3
    d0dc:	61f8      	str	r0, [r7, #28]
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    d0de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    d0e2:	3301      	adds	r3, #1
    d0e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	891b      	ldrh	r3, [r3, #8]
    d0ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
    d0f0:	429a      	cmp	r2, r3
    d0f2:	d3dd      	bcc.n	d0b0 <svl_packet_send+0x144>
    }
  }

  svl_packet_write_byte(CRCH); // CRC H
    d0f4:	4b13      	ldr	r3, [pc, #76]	; (d144 <svl_packet_send+0x1d8>)
    d0f6:	781b      	ldrb	r3, [r3, #0]
    d0f8:	74fb      	strb	r3, [r7, #19]
  size_t retval = 0x00;
    d0fa:	2300      	movs	r3, #0
    d0fc:	60fb      	str	r3, [r7, #12]
  if (write_fn != NULL)
    d0fe:	4b13      	ldr	r3, [pc, #76]	; (d14c <svl_packet_send+0x1e0>)
    d100:	681b      	ldr	r3, [r3, #0]
    d102:	2b00      	cmp	r3, #0
    d104:	d007      	beq.n	d116 <svl_packet_send+0x1aa>
    retval = write_fn(write_param, c);
    d106:	4b11      	ldr	r3, [pc, #68]	; (d14c <svl_packet_send+0x1e0>)
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	4a11      	ldr	r2, [pc, #68]	; (d150 <svl_packet_send+0x1e4>)
    d10c:	6812      	ldr	r2, [r2, #0]
    d10e:	7cf9      	ldrb	r1, [r7, #19]
    d110:	4610      	mov	r0, r2
    d112:	4798      	blx	r3
    d114:	60f8      	str	r0, [r7, #12]
  svl_packet_write_byte(CRCL); // CRC L
    d116:	4b0a      	ldr	r3, [pc, #40]	; (d140 <svl_packet_send+0x1d4>)
    d118:	781b      	ldrb	r3, [r3, #0]
    d11a:	76fb      	strb	r3, [r7, #27]
  size_t retval = 0x00;
    d11c:	2300      	movs	r3, #0
    d11e:	617b      	str	r3, [r7, #20]
  if (write_fn != NULL)
    d120:	4b0a      	ldr	r3, [pc, #40]	; (d14c <svl_packet_send+0x1e0>)
    d122:	681b      	ldr	r3, [r3, #0]
    d124:	2b00      	cmp	r3, #0
    d126:	d007      	beq.n	d138 <svl_packet_send+0x1cc>
    retval = write_fn(write_param, c);
    d128:	4b08      	ldr	r3, [pc, #32]	; (d14c <svl_packet_send+0x1e0>)
    d12a:	681b      	ldr	r3, [r3, #0]
    d12c:	4a08      	ldr	r2, [pc, #32]	; (d150 <svl_packet_send+0x1e4>)
    d12e:	6812      	ldr	r2, [r2, #0]
    d130:	7ef9      	ldrb	r1, [r7, #27]
    d132:	4610      	mov	r0, r2
    d134:	4798      	blx	r3
    d136:	6178      	str	r0, [r7, #20]
}
    d138:	bf00      	nop
    d13a:	3748      	adds	r7, #72	; 0x48
    d13c:	46bd      	mov	sp, r7
    d13e:	bd80      	pop	{r7, pc}
    d140:	10000a74 	.word	0x10000a74
    d144:	10000a75 	.word	0x10000a75
    d148:	10000000 	.word	0x10000000
    d14c:	10000a50 	.word	0x10000a50
    d150:	10000a44 	.word	0x10000a44

0000d154 <svl_packet_wait>:

uint8_t svl_packet_wait(svl_packet_t *packet)
{
    d154:	b580      	push	{r7, lr}
    d156:	b08c      	sub	sp, #48	; 0x30
    d158:	af00      	add	r7, sp, #0
    d15a:	6078      	str	r0, [r7, #4]

  // wait for 2 bytes (the length bytes)
  // wait for length bytes to come in
  // make sure that 'length' bytes are enough to satisfy the desired payload length

  if (packet == NULL)
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	2b00      	cmp	r3, #0
    d160:	d101      	bne.n	d166 <svl_packet_wait+0x12>
  {
    return (SVL_PACKET_ERR);
    d162:	2301      	movs	r3, #1
    d164:	e0bf      	b.n	d2e6 <svl_packet_wait+0x192>
  }

  const uint8_t num_bytes_length = 2;
    d166:	2302      	movs	r3, #2
    d168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (svl_packet_wait_bytes(num_bytes_length))
    d16c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d170:	4618      	mov	r0, r3
    d172:	f000 f8ff 	bl	d374 <svl_packet_wait_bytes>
    d176:	4603      	mov	r3, r0
    d178:	2b00      	cmp	r3, #0
    d17a:	d001      	beq.n	d180 <svl_packet_wait+0x2c>
  {
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_LEN);
    d17c:	2382      	movs	r3, #130	; 0x82
    d17e:	e0b2      	b.n	d2e6 <svl_packet_wait+0x192>
  }
  uint16_t len = svl_packet_get_uint16_t();
    d180:	f000 f8c0 	bl	d304 <svl_packet_get_uint16_t>
    d184:	4603      	mov	r3, r0
    d186:	853b      	strh	r3, [r7, #40]	; 0x28

  if (len == 0)
    d188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d18a:	2b00      	cmp	r3, #0
    d18c:	d101      	bne.n	d192 <svl_packet_wait+0x3e>
  {
    return (SVL_PACKET_ERR_ZLP);
    d18e:	2304      	movs	r3, #4
    d190:	e0a9      	b.n	d2e6 <svl_packet_wait+0x192>
  }
  if ((len - 3) > packet->max_pl_len)
    d192:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d194:	3b03      	subs	r3, #3
    d196:	687a      	ldr	r2, [r7, #4]
    d198:	8952      	ldrh	r2, [r2, #10]
    d19a:	4293      	cmp	r3, r2
    d19c:	dd01      	ble.n	d1a2 <svl_packet_wait+0x4e>
  {
    return (SVL_PACKET_ERR_MEM | SVL_PACKET_PL);
    d19e:	2348      	movs	r3, #72	; 0x48
    d1a0:	e0a1      	b.n	d2e6 <svl_packet_wait+0x192>
  }

  //Wait for entire packet to come in
  if (svl_packet_wait_bytes(len))
    d1a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d1a4:	4618      	mov	r0, r3
    d1a6:	f000 f8e5 	bl	d374 <svl_packet_wait_bytes>
    d1aa:	4603      	mov	r3, r0
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d001      	beq.n	d1b4 <svl_packet_wait+0x60>
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_PL);
    d1b0:	2342      	movs	r3, #66	; 0x42
    d1b2:	e098      	b.n	d2e6 <svl_packet_wait+0x192>

  uint8_t incoming;
  CRCL = 0;
    d1b4:	4b4e      	ldr	r3, [pc, #312]	; (d2f0 <svl_packet_wait+0x19c>)
    d1b6:	2200      	movs	r2, #0
    d1b8:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    d1ba:	4b4e      	ldr	r3, [pc, #312]	; (d2f4 <svl_packet_wait+0x1a0>)
    d1bc:	2200      	movs	r2, #0
    d1be:	701a      	strb	r2, [r3, #0]
    d1c0:	f107 030b 	add.w	r3, r7, #11
    d1c4:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d1c6:	2300      	movs	r3, #0
    d1c8:	61bb      	str	r3, [r7, #24]
  if (read_fn != NULL)
    d1ca:	4b4b      	ldr	r3, [pc, #300]	; (d2f8 <svl_packet_wait+0x1a4>)
    d1cc:	681b      	ldr	r3, [r3, #0]
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d007      	beq.n	d1e2 <svl_packet_wait+0x8e>
    retval = read_fn(read_param, c);
    d1d2:	4b49      	ldr	r3, [pc, #292]	; (d2f8 <svl_packet_wait+0x1a4>)
    d1d4:	681b      	ldr	r3, [r3, #0]
    d1d6:	4a49      	ldr	r2, [pc, #292]	; (d2fc <svl_packet_wait+0x1a8>)
    d1d8:	6812      	ldr	r2, [r2, #0]
    d1da:	69f9      	ldr	r1, [r7, #28]
    d1dc:	4610      	mov	r0, r2
    d1de:	4798      	blx	r3
    d1e0:	61b8      	str	r0, [r7, #24]

  //Get command byte
  svl_packet_read_byte(&incoming);
  packet->cmd = incoming;
    d1e2:	7afa      	ldrb	r2, [r7, #11]
    d1e4:	687b      	ldr	r3, [r7, #4]
    d1e6:	701a      	strb	r2, [r3, #0]
  updateCRC(incoming); //Add this byte to CRC
    d1e8:	7afb      	ldrb	r3, [r7, #11]
    d1ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t tableAddr = (num ^ CRCH);
    d1ee:	4b41      	ldr	r3, [pc, #260]	; (d2f4 <svl_packet_wait+0x1a0>)
    d1f0:	781a      	ldrb	r2, [r3, #0]
    d1f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    d1f6:	4053      	eors	r3, r2
    d1f8:	b2db      	uxtb	r3, r3
    d1fa:	843b      	strh	r3, [r7, #32]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d1fc:	8c3b      	ldrh	r3, [r7, #32]
    d1fe:	4a40      	ldr	r2, [pc, #256]	; (d300 <svl_packet_wait+0x1ac>)
    d200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d204:	0a1b      	lsrs	r3, r3, #8
    d206:	b29b      	uxth	r3, r3
    d208:	b2da      	uxtb	r2, r3
    d20a:	4b39      	ldr	r3, [pc, #228]	; (d2f0 <svl_packet_wait+0x19c>)
    d20c:	781b      	ldrb	r3, [r3, #0]
    d20e:	4053      	eors	r3, r2
    d210:	b2da      	uxtb	r2, r3
    d212:	4b38      	ldr	r3, [pc, #224]	; (d2f4 <svl_packet_wait+0x1a0>)
    d214:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d216:	8c3b      	ldrh	r3, [r7, #32]
    d218:	4a39      	ldr	r2, [pc, #228]	; (d300 <svl_packet_wait+0x1ac>)
    d21a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d21e:	b2da      	uxtb	r2, r3
    d220:	4b33      	ldr	r3, [pc, #204]	; (d2f0 <svl_packet_wait+0x19c>)
    d222:	701a      	strb	r2, [r3, #0]

  packet->pl_len = (len - 3);
    d224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d226:	3b03      	subs	r3, #3
    d228:	b29a      	uxth	r2, r3
    d22a:	687b      	ldr	r3, [r7, #4]
    d22c:	811a      	strh	r2, [r3, #8]

  //Now read the data coming in
  if ((packet->pl != NULL) && (packet->max_pl_len != 0))
    d22e:	687b      	ldr	r3, [r7, #4]
    d230:	685b      	ldr	r3, [r3, #4]
    d232:	2b00      	cmp	r3, #0
    d234:	d042      	beq.n	d2bc <svl_packet_wait+0x168>
    d236:	687b      	ldr	r3, [r7, #4]
    d238:	895b      	ldrh	r3, [r3, #10]
    d23a:	2b00      	cmp	r3, #0
    d23c:	d03e      	beq.n	d2bc <svl_packet_wait+0x168>
  {
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d23e:	2300      	movs	r3, #0
    d240:	62fb      	str	r3, [r7, #44]	; 0x2c
    d242:	e035      	b.n	d2b0 <svl_packet_wait+0x15c>
    d244:	f107 030b 	add.w	r3, r7, #11
    d248:	613b      	str	r3, [r7, #16]
  size_t retval = 0x00;
    d24a:	2300      	movs	r3, #0
    d24c:	60fb      	str	r3, [r7, #12]
  if (read_fn != NULL)
    d24e:	4b2a      	ldr	r3, [pc, #168]	; (d2f8 <svl_packet_wait+0x1a4>)
    d250:	681b      	ldr	r3, [r3, #0]
    d252:	2b00      	cmp	r3, #0
    d254:	d007      	beq.n	d266 <svl_packet_wait+0x112>
    retval = read_fn(read_param, c);
    d256:	4b28      	ldr	r3, [pc, #160]	; (d2f8 <svl_packet_wait+0x1a4>)
    d258:	681b      	ldr	r3, [r3, #0]
    d25a:	4a28      	ldr	r2, [pc, #160]	; (d2fc <svl_packet_wait+0x1a8>)
    d25c:	6812      	ldr	r2, [r2, #0]
    d25e:	6939      	ldr	r1, [r7, #16]
    d260:	4610      	mov	r0, r2
    d262:	4798      	blx	r3
    d264:	60f8      	str	r0, [r7, #12]
    {
      svl_packet_read_byte(&incoming);

      updateCRC(incoming); //Add this byte to CRC
    d266:	7afb      	ldrb	r3, [r7, #11]
    d268:	75fb      	strb	r3, [r7, #23]
  uint16_t tableAddr = (num ^ CRCH);
    d26a:	4b22      	ldr	r3, [pc, #136]	; (d2f4 <svl_packet_wait+0x1a0>)
    d26c:	781a      	ldrb	r2, [r3, #0]
    d26e:	7dfb      	ldrb	r3, [r7, #23]
    d270:	4053      	eors	r3, r2
    d272:	b2db      	uxtb	r3, r3
    d274:	82bb      	strh	r3, [r7, #20]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d276:	8abb      	ldrh	r3, [r7, #20]
    d278:	4a21      	ldr	r2, [pc, #132]	; (d300 <svl_packet_wait+0x1ac>)
    d27a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d27e:	0a1b      	lsrs	r3, r3, #8
    d280:	b29b      	uxth	r3, r3
    d282:	b2da      	uxtb	r2, r3
    d284:	4b1a      	ldr	r3, [pc, #104]	; (d2f0 <svl_packet_wait+0x19c>)
    d286:	781b      	ldrb	r3, [r3, #0]
    d288:	4053      	eors	r3, r2
    d28a:	b2da      	uxtb	r2, r3
    d28c:	4b19      	ldr	r3, [pc, #100]	; (d2f4 <svl_packet_wait+0x1a0>)
    d28e:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d290:	8abb      	ldrh	r3, [r7, #20]
    d292:	4a1b      	ldr	r2, [pc, #108]	; (d300 <svl_packet_wait+0x1ac>)
    d294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d298:	b2da      	uxtb	r2, r3
    d29a:	4b15      	ldr	r3, [pc, #84]	; (d2f0 <svl_packet_wait+0x19c>)
    d29c:	701a      	strb	r2, [r3, #0]

      *(packet->pl + x) = incoming; //Fill payload with data
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	685a      	ldr	r2, [r3, #4]
    d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2a4:	4413      	add	r3, r2
    d2a6:	7afa      	ldrb	r2, [r7, #11]
    d2a8:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2ac:	3301      	adds	r3, #1
    d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	891b      	ldrh	r3, [r3, #8]
    d2b4:	461a      	mov	r2, r3
    d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2b8:	4293      	cmp	r3, r2
    d2ba:	d3c3      	bcc.n	d244 <svl_packet_wait+0xf0>
    }
  }

  uint16_t crc = svl_packet_get_uint16_t(); //Read final two bytes into CRC
    d2bc:	f000 f822 	bl	d304 <svl_packet_get_uint16_t>
    d2c0:	4603      	mov	r3, r0
    d2c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t check = ((uint16_t)CRCH << 8) | CRCL;
    d2c4:	4b0b      	ldr	r3, [pc, #44]	; (d2f4 <svl_packet_wait+0x1a0>)
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	021b      	lsls	r3, r3, #8
    d2ca:	b21a      	sxth	r2, r3
    d2cc:	4b08      	ldr	r3, [pc, #32]	; (d2f0 <svl_packet_wait+0x19c>)
    d2ce:	781b      	ldrb	r3, [r3, #0]
    d2d0:	b21b      	sxth	r3, r3
    d2d2:	4313      	orrs	r3, r2
    d2d4:	b21b      	sxth	r3, r3
    d2d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (crc != check)
    d2d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    d2dc:	429a      	cmp	r2, r3
    d2de:	d001      	beq.n	d2e4 <svl_packet_wait+0x190>
  {
    return (SVL_PACKET_ERR_CRC);
    d2e0:	2310      	movs	r3, #16
    d2e2:	e000      	b.n	d2e6 <svl_packet_wait+0x192>
  }

  return (SVL_PACKET_OK);
    d2e4:	2300      	movs	r3, #0
}
    d2e6:	4618      	mov	r0, r3
    d2e8:	3730      	adds	r7, #48	; 0x30
    d2ea:	46bd      	mov	sp, r7
    d2ec:	bd80      	pop	{r7, pc}
    d2ee:	bf00      	nop
    d2f0:	10000a74 	.word	0x10000a74
    d2f4:	10000a75 	.word	0x10000a75
    d2f8:	10000a4c 	.word	0x10000a4c
    d2fc:	10000a40 	.word	0x10000a40
    d300:	10000000 	.word	0x10000000

0000d304 <svl_packet_get_uint16_t>:

uint16_t svl_packet_get_uint16_t(void)
{
    d304:	b580      	push	{r7, lr}
    d306:	b086      	sub	sp, #24
    d308:	af00      	add	r7, sp, #0
  uint8_t h = 0x00;
    d30a:	2300      	movs	r3, #0
    d30c:	71fb      	strb	r3, [r7, #7]
  uint8_t l = 0x00;
    d30e:	2300      	movs	r3, #0
    d310:	71bb      	strb	r3, [r7, #6]
    d312:	1dfb      	adds	r3, r7, #7
    d314:	60fb      	str	r3, [r7, #12]
  size_t retval = 0x00;
    d316:	2300      	movs	r3, #0
    d318:	60bb      	str	r3, [r7, #8]
  if (read_fn != NULL)
    d31a:	4b14      	ldr	r3, [pc, #80]	; (d36c <svl_packet_get_uint16_t+0x68>)
    d31c:	681b      	ldr	r3, [r3, #0]
    d31e:	2b00      	cmp	r3, #0
    d320:	d007      	beq.n	d332 <svl_packet_get_uint16_t+0x2e>
    retval = read_fn(read_param, c);
    d322:	4b12      	ldr	r3, [pc, #72]	; (d36c <svl_packet_get_uint16_t+0x68>)
    d324:	681b      	ldr	r3, [r3, #0]
    d326:	4a12      	ldr	r2, [pc, #72]	; (d370 <svl_packet_get_uint16_t+0x6c>)
    d328:	6812      	ldr	r2, [r2, #0]
    d32a:	68f9      	ldr	r1, [r7, #12]
    d32c:	4610      	mov	r0, r2
    d32e:	4798      	blx	r3
    d330:	60b8      	str	r0, [r7, #8]
    d332:	1dbb      	adds	r3, r7, #6
    d334:	617b      	str	r3, [r7, #20]
  size_t retval = 0x00;
    d336:	2300      	movs	r3, #0
    d338:	613b      	str	r3, [r7, #16]
  if (read_fn != NULL)
    d33a:	4b0c      	ldr	r3, [pc, #48]	; (d36c <svl_packet_get_uint16_t+0x68>)
    d33c:	681b      	ldr	r3, [r3, #0]
    d33e:	2b00      	cmp	r3, #0
    d340:	d007      	beq.n	d352 <svl_packet_get_uint16_t+0x4e>
    retval = read_fn(read_param, c);
    d342:	4b0a      	ldr	r3, [pc, #40]	; (d36c <svl_packet_get_uint16_t+0x68>)
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	4a0a      	ldr	r2, [pc, #40]	; (d370 <svl_packet_get_uint16_t+0x6c>)
    d348:	6812      	ldr	r2, [r2, #0]
    d34a:	6979      	ldr	r1, [r7, #20]
    d34c:	4610      	mov	r0, r2
    d34e:	4798      	blx	r3
    d350:	6138      	str	r0, [r7, #16]
  svl_packet_read_byte(&h);
  svl_packet_read_byte(&l);
  return (((uint16_t)h << 8) | (l & 0xFF));
    d352:	79fb      	ldrb	r3, [r7, #7]
    d354:	021b      	lsls	r3, r3, #8
    d356:	b21a      	sxth	r2, r3
    d358:	79bb      	ldrb	r3, [r7, #6]
    d35a:	b21b      	sxth	r3, r3
    d35c:	4313      	orrs	r3, r2
    d35e:	b21b      	sxth	r3, r3
    d360:	b29b      	uxth	r3, r3
}
    d362:	4618      	mov	r0, r3
    d364:	3718      	adds	r7, #24
    d366:	46bd      	mov	sp, r7
    d368:	bd80      	pop	{r7, pc}
    d36a:	bf00      	nop
    d36c:	10000a4c 	.word	0x10000a4c
    d370:	10000a40 	.word	0x10000a40

0000d374 <svl_packet_wait_bytes>:

uint8_t svl_packet_wait_bytes(uint32_t num)
{
    d374:	b580      	push	{r7, lr}
    d376:	b088      	sub	sp, #32
    d378:	af00      	add	r7, sp, #0
    d37a:	6078      	str	r0, [r7, #4]
  uint32_t timeout_ms = 500;
    d37c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d380:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d382:	2300      	movs	r3, #0
    d384:	613b      	str	r3, [r7, #16]
  if (millis_fn != NULL)
    d386:	4b1b      	ldr	r3, [pc, #108]	; (d3f4 <svl_packet_wait_bytes+0x80>)
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d003      	beq.n	d396 <svl_packet_wait_bytes+0x22>
    retval = millis_fn();
    d38e:	4b19      	ldr	r3, [pc, #100]	; (d3f4 <svl_packet_wait_bytes+0x80>)
    d390:	681b      	ldr	r3, [r3, #0]
    d392:	4798      	blx	r3
    d394:	6138      	str	r0, [r7, #16]
  return retval;
    d396:	693b      	ldr	r3, [r7, #16]
  uint32_t start = svl_packet_millis();
    d398:	61bb      	str	r3, [r7, #24]
  uint32_t avail = 0;
    d39a:	2300      	movs	r3, #0
    d39c:	617b      	str	r3, [r7, #20]

  while ((svl_packet_millis() - start) < timeout_ms)
    d39e:	e014      	b.n	d3ca <svl_packet_wait_bytes+0x56>
  size_t retval = 0x00;
    d3a0:	2300      	movs	r3, #0
    d3a2:	60fb      	str	r3, [r7, #12]
  if (avail_fn != NULL)
    d3a4:	4b14      	ldr	r3, [pc, #80]	; (d3f8 <svl_packet_wait_bytes+0x84>)
    d3a6:	681b      	ldr	r3, [r3, #0]
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d006      	beq.n	d3ba <svl_packet_wait_bytes+0x46>
    retval = avail_fn(avail_param);
    d3ac:	4b12      	ldr	r3, [pc, #72]	; (d3f8 <svl_packet_wait_bytes+0x84>)
    d3ae:	681b      	ldr	r3, [r3, #0]
    d3b0:	4a12      	ldr	r2, [pc, #72]	; (d3fc <svl_packet_wait_bytes+0x88>)
    d3b2:	6812      	ldr	r2, [r2, #0]
    d3b4:	4610      	mov	r0, r2
    d3b6:	4798      	blx	r3
    d3b8:	60f8      	str	r0, [r7, #12]
  return retval;
    d3ba:	68fb      	ldr	r3, [r7, #12]
  {
    avail = svl_packet_avail_bytes();
    d3bc:	617b      	str	r3, [r7, #20]
    if (avail >= num)
    d3be:	697a      	ldr	r2, [r7, #20]
    d3c0:	687b      	ldr	r3, [r7, #4]
    d3c2:	429a      	cmp	r2, r3
    d3c4:	d301      	bcc.n	d3ca <svl_packet_wait_bytes+0x56>
    {
      return 0;
    d3c6:	2300      	movs	r3, #0
    d3c8:	e010      	b.n	d3ec <svl_packet_wait_bytes+0x78>
  size_t retval = 0x00;
    d3ca:	2300      	movs	r3, #0
    d3cc:	60bb      	str	r3, [r7, #8]
  if (millis_fn != NULL)
    d3ce:	4b09      	ldr	r3, [pc, #36]	; (d3f4 <svl_packet_wait_bytes+0x80>)
    d3d0:	681b      	ldr	r3, [r3, #0]
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d003      	beq.n	d3de <svl_packet_wait_bytes+0x6a>
    retval = millis_fn();
    d3d6:	4b07      	ldr	r3, [pc, #28]	; (d3f4 <svl_packet_wait_bytes+0x80>)
    d3d8:	681b      	ldr	r3, [r3, #0]
    d3da:	4798      	blx	r3
    d3dc:	60b8      	str	r0, [r7, #8]
  return retval;
    d3de:	68ba      	ldr	r2, [r7, #8]
  while ((svl_packet_millis() - start) < timeout_ms)
    d3e0:	69bb      	ldr	r3, [r7, #24]
    d3e2:	1ad3      	subs	r3, r2, r3
    d3e4:	69fa      	ldr	r2, [r7, #28]
    d3e6:	429a      	cmp	r2, r3
    d3e8:	d8da      	bhi.n	d3a0 <svl_packet_wait_bytes+0x2c>
    }
  }

  // debug_printf("only got %d bytes...\n",avail);
  return 1;
    d3ea:	2301      	movs	r3, #1
    d3ec:	4618      	mov	r0, r3
    d3ee:	3720      	adds	r7, #32
    d3f0:	46bd      	mov	sp, r7
    d3f2:	bd80      	pop	{r7, pc}
    d3f4:	10000a58 	.word	0x10000a58
    d3f8:	10000a54 	.word	0x10000a54
    d3fc:	10000a48 	.word	0x10000a48

0000d400 <art_svl_ringbuf_init>:
#include "svl_ringbuf.h"

size_t art_svl_ringbuf_init( void* vrb, uint8_t* buf, size_t len ){
    d400:	b480      	push	{r7}
    d402:	b087      	sub	sp, #28
    d404:	af00      	add	r7, sp, #0
    d406:	60f8      	str	r0, [r7, #12]
    d408:	60b9      	str	r1, [r7, #8]
    d40a:	607a      	str	r2, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d40c:	68fb      	ldr	r3, [r7, #12]
    d40e:	2b00      	cmp	r3, #0
    d410:	d101      	bne.n	d416 <art_svl_ringbuf_init+0x16>
    d412:	2300      	movs	r3, #0
    d414:	e00f      	b.n	d436 <art_svl_ringbuf_init+0x36>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d416:	68fb      	ldr	r3, [r7, #12]
    d418:	617b      	str	r3, [r7, #20]
    
    rb->buf = buf;
    d41a:	697b      	ldr	r3, [r7, #20]
    d41c:	68ba      	ldr	r2, [r7, #8]
    d41e:	601a      	str	r2, [r3, #0]
    rb->len = len;
    d420:	697b      	ldr	r3, [r7, #20]
    d422:	687a      	ldr	r2, [r7, #4]
    d424:	605a      	str	r2, [r3, #4]
    rb->r_offset = 0;
    d426:	697b      	ldr	r3, [r7, #20]
    d428:	2200      	movs	r2, #0
    d42a:	609a      	str	r2, [r3, #8]
    rb->w_offset = 0;
    d42c:	697b      	ldr	r3, [r7, #20]
    d42e:	2200      	movs	r2, #0
    d430:	60da      	str	r2, [r3, #12]

    return rb->len;
    d432:	697b      	ldr	r3, [r7, #20]
    d434:	685b      	ldr	r3, [r3, #4]
}
    d436:	4618      	mov	r0, r3
    d438:	371c      	adds	r7, #28
    d43a:	46bd      	mov	sp, r7
    d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d440:	4770      	bx	lr

0000d442 <art_svl_ringbuf_available>:

size_t art_svl_ringbuf_available( void* vrb ){
    d442:	b480      	push	{r7}
    d444:	b085      	sub	sp, #20
    d446:	af00      	add	r7, sp, #0
    d448:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	2b00      	cmp	r3, #0
    d44e:	d101      	bne.n	d454 <art_svl_ringbuf_available+0x12>
    d450:	2300      	movs	r3, #0
    d452:	e01a      	b.n	d48a <art_svl_ringbuf_available+0x48>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	60bb      	str	r3, [r7, #8]

    size_t avail = 0x00;
    d458:	2300      	movs	r3, #0
    d45a:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d45c:	68bb      	ldr	r3, [r7, #8]
    d45e:	68da      	ldr	r2, [r3, #12]
    d460:	68bb      	ldr	r3, [r7, #8]
    d462:	689b      	ldr	r3, [r3, #8]
    d464:	429a      	cmp	r2, r3
    d466:	d306      	bcc.n	d476 <art_svl_ringbuf_available+0x34>
        avail = rb->w_offset - rb->r_offset;
    d468:	68bb      	ldr	r3, [r7, #8]
    d46a:	68da      	ldr	r2, [r3, #12]
    d46c:	68bb      	ldr	r3, [r7, #8]
    d46e:	689b      	ldr	r3, [r3, #8]
    d470:	1ad3      	subs	r3, r2, r3
    d472:	60fb      	str	r3, [r7, #12]
    d474:	e008      	b.n	d488 <art_svl_ringbuf_available+0x46>
    }else{
        avail = rb->len - (rb->r_offset - rb->w_offset);
    d476:	68bb      	ldr	r3, [r7, #8]
    d478:	685a      	ldr	r2, [r3, #4]
    d47a:	68bb      	ldr	r3, [r7, #8]
    d47c:	68d9      	ldr	r1, [r3, #12]
    d47e:	68bb      	ldr	r3, [r7, #8]
    d480:	689b      	ldr	r3, [r3, #8]
    d482:	1acb      	subs	r3, r1, r3
    d484:	4413      	add	r3, r2
    d486:	60fb      	str	r3, [r7, #12]
    }
    return avail;
    d488:	68fb      	ldr	r3, [r7, #12]
}
    d48a:	4618      	mov	r0, r3
    d48c:	3714      	adds	r7, #20
    d48e:	46bd      	mov	sp, r7
    d490:	f85d 7b04 	ldr.w	r7, [sp], #4
    d494:	4770      	bx	lr

0000d496 <art_svl_ringbuf_bytes_free>:

size_t art_svl_ringbuf_bytes_free( void* vrb ){
    d496:	b480      	push	{r7}
    d498:	b085      	sub	sp, #20
    d49a:	af00      	add	r7, sp, #0
    d49c:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d49e:	687b      	ldr	r3, [r7, #4]
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	d101      	bne.n	d4a8 <art_svl_ringbuf_bytes_free+0x12>
    d4a4:	2300      	movs	r3, #0
    d4a6:	e01c      	b.n	d4e2 <art_svl_ringbuf_bytes_free+0x4c>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d4a8:	687b      	ldr	r3, [r7, #4]
    d4aa:	60bb      	str	r3, [r7, #8]

    size_t friegh = 0x00;
    d4ac:	2300      	movs	r3, #0
    d4ae:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d4b0:	68bb      	ldr	r3, [r7, #8]
    d4b2:	68da      	ldr	r2, [r3, #12]
    d4b4:	68bb      	ldr	r3, [r7, #8]
    d4b6:	689b      	ldr	r3, [r3, #8]
    d4b8:	429a      	cmp	r2, r3
    d4ba:	d30a      	bcc.n	d4d2 <art_svl_ringbuf_bytes_free+0x3c>
        friegh = rb->len - rb->w_offset + rb->r_offset -1;
    d4bc:	68bb      	ldr	r3, [r7, #8]
    d4be:	685a      	ldr	r2, [r3, #4]
    d4c0:	68bb      	ldr	r3, [r7, #8]
    d4c2:	68db      	ldr	r3, [r3, #12]
    d4c4:	1ad2      	subs	r2, r2, r3
    d4c6:	68bb      	ldr	r3, [r7, #8]
    d4c8:	689b      	ldr	r3, [r3, #8]
    d4ca:	4413      	add	r3, r2
    d4cc:	3b01      	subs	r3, #1
    d4ce:	60fb      	str	r3, [r7, #12]
    d4d0:	e006      	b.n	d4e0 <art_svl_ringbuf_bytes_free+0x4a>
    }else{
        friegh = rb->r_offset - rb->w_offset - 1;
    d4d2:	68bb      	ldr	r3, [r7, #8]
    d4d4:	689a      	ldr	r2, [r3, #8]
    d4d6:	68bb      	ldr	r3, [r7, #8]
    d4d8:	68db      	ldr	r3, [r3, #12]
    d4da:	1ad3      	subs	r3, r2, r3
    d4dc:	3b01      	subs	r3, #1
    d4de:	60fb      	str	r3, [r7, #12]
    }
    return friegh;
    d4e0:	68fb      	ldr	r3, [r7, #12]
}
    d4e2:	4618      	mov	r0, r3
    d4e4:	3714      	adds	r7, #20
    d4e6:	46bd      	mov	sp, r7
    d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4ec:	4770      	bx	lr

0000d4ee <art_svl_ringbuf_write>:

size_t art_svl_ringbuf_write( void* vrb, uint8_t c ){
    d4ee:	b580      	push	{r7, lr}
    d4f0:	b084      	sub	sp, #16
    d4f2:	af00      	add	r7, sp, #0
    d4f4:	6078      	str	r0, [r7, #4]
    d4f6:	460b      	mov	r3, r1
    d4f8:	70fb      	strb	r3, [r7, #3]
    if( vrb == NULL ){ return 0; }
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d101      	bne.n	d504 <art_svl_ringbuf_write+0x16>
    d500:	2300      	movs	r3, #0
    d502:	e01f      	b.n	d544 <art_svl_ringbuf_write+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	60fb      	str	r3, [r7, #12]

    if(art_svl_ringbuf_bytes_free(rb) > 0){
    d508:	68f8      	ldr	r0, [r7, #12]
    d50a:	f7ff ffc4 	bl	d496 <art_svl_ringbuf_bytes_free>
    d50e:	4603      	mov	r3, r0
    d510:	2b00      	cmp	r3, #0
    d512:	d016      	beq.n	d542 <art_svl_ringbuf_write+0x54>
        *(rb->buf + rb->w_offset) = c;
    d514:	68fb      	ldr	r3, [r7, #12]
    d516:	681a      	ldr	r2, [r3, #0]
    d518:	68fb      	ldr	r3, [r7, #12]
    d51a:	68db      	ldr	r3, [r3, #12]
    d51c:	4413      	add	r3, r2
    d51e:	78fa      	ldrb	r2, [r7, #3]
    d520:	701a      	strb	r2, [r3, #0]
        rb->w_offset++;
    d522:	68fb      	ldr	r3, [r7, #12]
    d524:	68db      	ldr	r3, [r3, #12]
    d526:	1c5a      	adds	r2, r3, #1
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	60da      	str	r2, [r3, #12]
        if(rb->w_offset >= rb->len){
    d52c:	68fb      	ldr	r3, [r7, #12]
    d52e:	68da      	ldr	r2, [r3, #12]
    d530:	68fb      	ldr	r3, [r7, #12]
    d532:	685b      	ldr	r3, [r3, #4]
    d534:	429a      	cmp	r2, r3
    d536:	d302      	bcc.n	d53e <art_svl_ringbuf_write+0x50>
            rb->w_offset = 0;
    d538:	68fb      	ldr	r3, [r7, #12]
    d53a:	2200      	movs	r2, #0
    d53c:	60da      	str	r2, [r3, #12]
        }
        return 1;
    d53e:	2301      	movs	r3, #1
    d540:	e000      	b.n	d544 <art_svl_ringbuf_write+0x56>
    }
    return 0;
    d542:	2300      	movs	r3, #0
}
    d544:	4618      	mov	r0, r3
    d546:	3710      	adds	r7, #16
    d548:	46bd      	mov	sp, r7
    d54a:	bd80      	pop	{r7, pc}

0000d54c <art_svl_ringbuf_read>:

size_t art_svl_ringbuf_read( void* vrb, uint8_t* c ){
    d54c:	b580      	push	{r7, lr}
    d54e:	b084      	sub	sp, #16
    d550:	af00      	add	r7, sp, #0
    d552:	6078      	str	r0, [r7, #4]
    d554:	6039      	str	r1, [r7, #0]
    if( vrb == NULL ){ return 0; }
    d556:	687b      	ldr	r3, [r7, #4]
    d558:	2b00      	cmp	r3, #0
    d55a:	d101      	bne.n	d560 <art_svl_ringbuf_read+0x14>
    d55c:	2300      	movs	r3, #0
    d55e:	e020      	b.n	d5a2 <art_svl_ringbuf_read+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	60fb      	str	r3, [r7, #12]
    
    if(art_svl_ringbuf_available(rb) > 0){
    d564:	68f8      	ldr	r0, [r7, #12]
    d566:	f7ff ff6c 	bl	d442 <art_svl_ringbuf_available>
    d56a:	4603      	mov	r3, r0
    d56c:	2b00      	cmp	r3, #0
    d56e:	d017      	beq.n	d5a0 <art_svl_ringbuf_read+0x54>
        *c = *(rb->buf + rb->r_offset);
    d570:	68fb      	ldr	r3, [r7, #12]
    d572:	681a      	ldr	r2, [r3, #0]
    d574:	68fb      	ldr	r3, [r7, #12]
    d576:	689b      	ldr	r3, [r3, #8]
    d578:	4413      	add	r3, r2
    d57a:	781a      	ldrb	r2, [r3, #0]
    d57c:	683b      	ldr	r3, [r7, #0]
    d57e:	701a      	strb	r2, [r3, #0]
        rb->r_offset++;
    d580:	68fb      	ldr	r3, [r7, #12]
    d582:	689b      	ldr	r3, [r3, #8]
    d584:	1c5a      	adds	r2, r3, #1
    d586:	68fb      	ldr	r3, [r7, #12]
    d588:	609a      	str	r2, [r3, #8]
        if(rb->r_offset >= rb->len){
    d58a:	68fb      	ldr	r3, [r7, #12]
    d58c:	689a      	ldr	r2, [r3, #8]
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	685b      	ldr	r3, [r3, #4]
    d592:	429a      	cmp	r2, r3
    d594:	d302      	bcc.n	d59c <art_svl_ringbuf_read+0x50>
            rb->r_offset = 0;
    d596:	68fb      	ldr	r3, [r7, #12]
    d598:	2200      	movs	r2, #0
    d59a:	609a      	str	r2, [r3, #8]
        }
        return 1;
    d59c:	2301      	movs	r3, #1
    d59e:	e000      	b.n	d5a2 <art_svl_ringbuf_read+0x56>
    }
    return 0;
    d5a0:	2300      	movs	r3, #0
    d5a2:	4618      	mov	r0, r3
    d5a4:	3710      	adds	r7, #16
    d5a6:	46bd      	mov	sp, r7
    d5a8:	bd80      	pop	{r7, pc}

0000d5aa <svl_uart_read>:
//*****************************************************************************
//
// UART read buffer
//
//*****************************************************************************
size_t svl_uart_read(void *pHandle, char* buf, size_t len){
    d5aa:	b580      	push	{r7, lr}
    d5ac:	b08a      	sub	sp, #40	; 0x28
    d5ae:	af00      	add	r7, sp, #0
    d5b0:	60f8      	str	r0, [r7, #12]
    d5b2:	60b9      	str	r1, [r7, #8]
    d5b4:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesRead = 0x00;
    d5b6:	2300      	movs	r3, #0
    d5b8:	627b      	str	r3, [r7, #36]	; 0x24
    am_hal_uart_transfer_t sRead = {
    d5ba:	2301      	movs	r3, #1
    d5bc:	613b      	str	r3, [r7, #16]
    d5be:	68bb      	ldr	r3, [r7, #8]
    d5c0:	617b      	str	r3, [r7, #20]
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	61bb      	str	r3, [r7, #24]
    d5c6:	2300      	movs	r3, #0
    d5c8:	61fb      	str	r3, [r7, #28]
    d5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d5ce:	623b      	str	r3, [r7, #32]
        .pui8Data = (uint8_t*)buf,
        .ui32NumBytes = len,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesRead,
    };
    am_hal_uart_transfer(pHandle, &sRead);
    d5d0:	f107 0310 	add.w	r3, r7, #16
    d5d4:	4619      	mov	r1, r3
    d5d6:	68f8      	ldr	r0, [r7, #12]
    d5d8:	f000 ffb4 	bl	e544 <am_hal_uart_transfer>
    return ui32BytesRead;
    d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d5de:	4618      	mov	r0, r3
    d5e0:	3728      	adds	r7, #40	; 0x28
    d5e2:	46bd      	mov	sp, r7
    d5e4:	bd80      	pop	{r7, pc}

0000d5e6 <svl_uart_write>:
//*****************************************************************************
//
// UART write buffer
//
//*****************************************************************************
size_t svl_uart_write(void *pHandle, char* buf, size_t len){
    d5e6:	b580      	push	{r7, lr}
    d5e8:	b08a      	sub	sp, #40	; 0x28
    d5ea:	af00      	add	r7, sp, #0
    d5ec:	60f8      	str	r0, [r7, #12]
    d5ee:	60b9      	str	r1, [r7, #8]
    d5f0:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesWritten = 0;
    d5f2:	2300      	movs	r3, #0
    d5f4:	627b      	str	r3, [r7, #36]	; 0x24
    const am_hal_uart_transfer_t sUartWrite =
    d5f6:	2300      	movs	r3, #0
    d5f8:	613b      	str	r3, [r7, #16]
    d5fa:	68bb      	ldr	r3, [r7, #8]
    d5fc:	617b      	str	r3, [r7, #20]
    d5fe:	687b      	ldr	r3, [r7, #4]
    d600:	61bb      	str	r3, [r7, #24]
    d602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d606:	61fb      	str	r3, [r7, #28]
    d608:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d60c:	623b      	str	r3, [r7, #32]
        .ui32NumBytes = len,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(pHandle, &sUartWrite);
    d60e:	f107 0310 	add.w	r3, r7, #16
    d612:	4619      	mov	r1, r3
    d614:	68f8      	ldr	r0, [r7, #12]
    d616:	f000 ff95 	bl	e544 <am_hal_uart_transfer>

    return ui32BytesWritten;
    d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d61c:	4618      	mov	r0, r3
    d61e:	3728      	adds	r7, #40	; 0x28
    d620:	46bd      	mov	sp, r7
    d622:	bd80      	pop	{r7, pc}

0000d624 <svl_uart_write_byte>:
//*****************************************************************************
//
// UART write byte
//
//*****************************************************************************
size_t svl_uart_write_byte(void *pHandle, uint8_t c){
    d624:	b580      	push	{r7, lr}
    d626:	b082      	sub	sp, #8
    d628:	af00      	add	r7, sp, #0
    d62a:	6078      	str	r0, [r7, #4]
    d62c:	460b      	mov	r3, r1
    d62e:	70fb      	strb	r3, [r7, #3]
    return svl_uart_write(pHandle, (char*)&c, 1);
    d630:	1cfb      	adds	r3, r7, #3
    d632:	2201      	movs	r2, #1
    d634:	4619      	mov	r1, r3
    d636:	6878      	ldr	r0, [r7, #4]
    d638:	f7ff ffd5 	bl	d5e6 <svl_uart_write>
    d63c:	4603      	mov	r3, r0
}
    d63e:	4618      	mov	r0, r3
    d640:	3708      	adds	r7, #8
    d642:	46bd      	mov	sp, r7
    d644:	bd80      	pop	{r7, pc}
	...

0000d648 <_fill_ticks>:

volatile uint32_t ap3_stimer_overflows = 0x00;
uint64_t ticks = 0;

void _fill_ticks(void)
{
    d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d64a:	af00      	add	r7, sp, #0
    ticks = ap3_stimer_overflows;
    d64c:	4b12      	ldr	r3, [pc, #72]	; (d698 <_fill_ticks+0x50>)
    d64e:	681b      	ldr	r3, [r3, #0]
    d650:	f04f 0400 	mov.w	r4, #0
    d654:	4a11      	ldr	r2, [pc, #68]	; (d69c <_fill_ticks+0x54>)
    d656:	e9c2 3400 	strd	r3, r4, [r2]
    ticks <<= 32;
    d65a:	4b10      	ldr	r3, [pc, #64]	; (d69c <_fill_ticks+0x54>)
    d65c:	e9d3 1200 	ldrd	r1, r2, [r3]
    d660:	f04f 0300 	mov.w	r3, #0
    d664:	f04f 0400 	mov.w	r4, #0
    d668:	000c      	movs	r4, r1
    d66a:	2300      	movs	r3, #0
    d66c:	4a0b      	ldr	r2, [pc, #44]	; (d69c <_fill_ticks+0x54>)
    d66e:	e9c2 3400 	strd	r3, r4, [r2]
    ticks |= (am_hal_stimer_counter_get() & 0xFFFFFFFF);
    d672:	f000 fd71 	bl	e158 <am_hal_stimer_counter_get>
    d676:	4603      	mov	r3, r0
    d678:	4619      	mov	r1, r3
    d67a:	f04f 0200 	mov.w	r2, #0
    d67e:	4b07      	ldr	r3, [pc, #28]	; (d69c <_fill_ticks+0x54>)
    d680:	e9d3 3400 	ldrd	r3, r4, [r3]
    d684:	ea41 0503 	orr.w	r5, r1, r3
    d688:	ea42 0604 	orr.w	r6, r2, r4
    d68c:	4b03      	ldr	r3, [pc, #12]	; (d69c <_fill_ticks+0x54>)
    d68e:	e9c3 5600 	strd	r5, r6, [r3]
}
    d692:	bf00      	nop
    d694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d696:	bf00      	nop
    d698:	10000a5c 	.word	0x10000a5c
    d69c:	10000a60 	.word	0x10000a60

0000d6a0 <millis>:

size_t millis(void){
    d6a0:	b598      	push	{r3, r4, r7, lr}
    d6a2:	af00      	add	r7, sp, #0
    _fill_ticks();
    d6a4:	f7ff ffd0 	bl	d648 <_fill_ticks>
    return (uint32_t)(ticks / AP3_STIMER_FREQ_KHZ);
    d6a8:	4b06      	ldr	r3, [pc, #24]	; (d6c4 <millis+0x24>)
    d6aa:	e9d3 0100 	ldrd	r0, r1, [r3]
    d6ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
    d6b2:	f04f 0300 	mov.w	r3, #0
    d6b6:	f7fe fd23 	bl	c100 <__aeabi_uldivmod>
    d6ba:	4603      	mov	r3, r0
    d6bc:	460c      	mov	r4, r1
}
    d6be:	4618      	mov	r0, r3
    d6c0:	bd98      	pop	{r3, r4, r7, pc}
    d6c2:	bf00      	nop
    d6c4:	10000a60 	.word	0x10000a60

0000d6c8 <enable_burst_mode>:
//
// Burst mode
//
//*****************************************************************************
bool enable_burst_mode(void)
{
    d6c8:	b580      	push	{r7, lr}
    d6ca:	b082      	sub	sp, #8
    d6cc:	af00      	add	r7, sp, #0
    // Check that the Burst Feature is available.
    am_hal_burst_avail_e eBurstModeAvailable;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d6ce:	1dfb      	adds	r3, r7, #7
    d6d0:	4618      	mov	r0, r3
    d6d2:	f000 f8dd 	bl	d890 <am_hal_burst_mode_initialize>
    d6d6:	4603      	mov	r3, r0
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d001      	beq.n	d6e0 <enable_burst_mode+0x18>
    {
        return (false);
    d6dc:	2300      	movs	r3, #0
    d6de:	e009      	b.n	d6f4 <enable_burst_mode+0x2c>
    }

    // Put the MCU into "Burst" mode.
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_enable(&eBurstMode))
    d6e0:	1dbb      	adds	r3, r7, #6
    d6e2:	4618      	mov	r0, r3
    d6e4:	f000 f916 	bl	d914 <am_hal_burst_mode_enable>
    d6e8:	4603      	mov	r3, r0
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d001      	beq.n	d6f2 <enable_burst_mode+0x2a>
    {
        return (false);
    d6ee:	2300      	movs	r3, #0
    d6f0:	e000      	b.n	d6f4 <enable_burst_mode+0x2c>
    }
    return (true);
    d6f2:	2301      	movs	r3, #1
}
    d6f4:	4618      	mov	r0, r3
    d6f6:	3708      	adds	r7, #8
    d6f8:	46bd      	mov	sp, r7
    d6fa:	bd80      	pop	{r7, pc}

0000d6fc <disable_burst_mode>:

//Turns main processor from 96MHz to 48MHz
//Returns false if disable fails
bool disable_burst_mode(void)
{
    d6fc:	b580      	push	{r7, lr}
    d6fe:	b082      	sub	sp, #8
    d700:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    d702:	1dfb      	adds	r3, r7, #7
    d704:	4618      	mov	r0, r3
    d706:	f000 f935 	bl	d974 <am_hal_burst_mode_disable>
    d70a:	4603      	mov	r3, r0
    d70c:	2b00      	cmp	r3, #0
    d70e:	d104      	bne.n	d71a <disable_burst_mode+0x1e>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    d710:	79fb      	ldrb	r3, [r7, #7]
    d712:	2b01      	cmp	r3, #1
    d714:	d003      	beq.n	d71e <disable_burst_mode+0x22>
        {
            return (false);
    d716:	2300      	movs	r3, #0
    d718:	e002      	b.n	d720 <disable_burst_mode+0x24>
        }
    }
    else
    {
        return (false);
    d71a:	2300      	movs	r3, #0
    d71c:	e000      	b.n	d720 <disable_burst_mode+0x24>
    }
    return (true);
    d71e:	2301      	movs	r3, #1
}
    d720:	4618      	mov	r0, r3
    d722:	3708      	adds	r7, #8
    d724:	46bd      	mov	sp, r7
    d726:	bd80      	pop	{r7, pc}

0000d728 <ap3_gpio_enable_interrupts>:

#define GPIOCFG_FLD_INTD_S 3
#define GPIOCFG_FLD_OUTCFG_S 1
#define GPIOCFG_FLD_INCFG_S 0

uint32_t ap3_gpio_enable_interrupts(uint32_t ui32Pin, uint32_t eIntDir){
    d728:	b580      	push	{r7, lr}
    d72a:	b08a      	sub	sp, #40	; 0x28
    d72c:	af00      	add	r7, sp, #0
    d72e:	6078      	str	r0, [r7, #4]
    d730:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    bool bClearEnable = false;
    d732:	2300      	movs	r3, #0
    d734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d738:	2300      	movs	r3, #0
    d73a:	623b      	str	r3, [r7, #32]
    d73c:	6a3b      	ldr	r3, [r7, #32]
    d73e:	61fb      	str	r3, [r7, #28]
    d740:	69fb      	ldr	r3, [r7, #28]
    d742:	61bb      	str	r3, [r7, #24]
    ui32GPCfg |= (((eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S) | (((eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d744:	683b      	ldr	r3, [r7, #0]
    d746:	00db      	lsls	r3, r3, #3
    d748:	f003 0208 	and.w	r2, r3, #8
    d74c:	683b      	ldr	r3, [r7, #0]
    d74e:	085b      	lsrs	r3, r3, #1
    d750:	f003 0301 	and.w	r3, r3, #1
    d754:	4313      	orrs	r3, r2
    d756:	69ba      	ldr	r2, [r7, #24]
    d758:	4313      	orrs	r3, r2
    d75a:	61bb      	str	r3, [r7, #24]

    uint32_t ui32GPCfgAddr;
    uint32_t ui32GPCfgClearMask;
    uint32_t ui32GPCfgShft;

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d75c:	687b      	ldr	r3, [r7, #4]
    d75e:	009b      	lsls	r3, r3, #2
    d760:	f003 031c 	and.w	r3, r3, #28
    d764:	617b      	str	r3, [r7, #20]

    ui32GPCfgAddr = AM_REGADDR(GPIO, CFGA) + ((ui32Pin >> 1) & ~0x3);
    d766:	687b      	ldr	r3, [r7, #4]
    d768:	085b      	lsrs	r3, r3, #1
    d76a:	f023 0203 	bic.w	r2, r3, #3
    d76e:	4b1d      	ldr	r3, [pc, #116]	; (d7e4 <ap3_gpio_enable_interrupts+0xbc>)
    d770:	4413      	add	r3, r2
    d772:	613b      	str	r3, [r7, #16]
    ui32GPCfgClearMask = ~((uint32_t)0xF << ui32GPCfgShft);
    d774:	220f      	movs	r2, #15
    d776:	697b      	ldr	r3, [r7, #20]
    d778:	fa02 f303 	lsl.w	r3, r2, r3
    d77c:	43db      	mvns	r3, r3
    d77e:	60fb      	str	r3, [r7, #12]

    ui32GPCfg <<= ui32GPCfgShft;
    d780:	69ba      	ldr	r2, [r7, #24]
    d782:	697b      	ldr	r3, [r7, #20]
    d784:	fa02 f303 	lsl.w	r3, r2, r3
    d788:	61bb      	str	r3, [r7, #24]

    AM_CRITICAL_BEGIN
    d78a:	f000 fc35 	bl	dff8 <am_hal_interrupt_master_disable>
    d78e:	4603      	mov	r3, r0
    d790:	60bb      	str	r3, [r7, #8]

    if (bClearEnable)
    d792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d796:	2b00      	cmp	r3, #0
    d798:	d00c      	beq.n	d7b4 <ap3_gpio_enable_interrupts+0x8c>
    {
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d79a:	687b      	ldr	r3, [r7, #4]
    d79c:	f003 021f 	and.w	r2, r3, #31
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	08db      	lsrs	r3, r3, #3
    d7a4:	f003 0104 	and.w	r1, r3, #4
    d7a8:	4b0f      	ldr	r3, [pc, #60]	; (d7e8 <ap3_gpio_enable_interrupts+0xc0>)
    d7aa:	440b      	add	r3, r1
    d7ac:	4619      	mov	r1, r3
    d7ae:	2301      	movs	r3, #1
    d7b0:	4093      	lsls	r3, r2
    d7b2:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d7b4:	4b0d      	ldr	r3, [pc, #52]	; (d7ec <ap3_gpio_enable_interrupts+0xc4>)
    d7b6:	2273      	movs	r2, #115	; 0x73
    d7b8:	661a      	str	r2, [r3, #96]	; 0x60

    // Here's where the magic happens
    AM_REGVAL(ui32GPCfgAddr) = (AM_REGVAL(ui32GPCfgAddr) & ui32GPCfgClearMask) | ui32GPCfg;
    d7ba:	693b      	ldr	r3, [r7, #16]
    d7bc:	681a      	ldr	r2, [r3, #0]
    d7be:	68fb      	ldr	r3, [r7, #12]
    d7c0:	ea02 0103 	and.w	r1, r2, r3
    d7c4:	693b      	ldr	r3, [r7, #16]
    d7c6:	69ba      	ldr	r2, [r7, #24]
    d7c8:	430a      	orrs	r2, r1
    d7ca:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d7cc:	4b07      	ldr	r3, [pc, #28]	; (d7ec <ap3_gpio_enable_interrupts+0xc4>)
    d7ce:	2200      	movs	r2, #0
    d7d0:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d7d2:	68bb      	ldr	r3, [r7, #8]
    d7d4:	4618      	mov	r0, r3
    d7d6:	f000 fc13 	bl	e000 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d7da:	2300      	movs	r3, #0
}
    d7dc:	4618      	mov	r0, r3
    d7de:	3728      	adds	r7, #40	; 0x28
    d7e0:	46bd      	mov	sp, r7
    d7e2:	bd80      	pop	{r7, pc}
    d7e4:	40010040 	.word	0x40010040
    d7e8:	400100b4 	.word	0x400100b4
    d7ec:	40010000 	.word	0x40010000

0000d7f0 <memset>:
    d7f0:	b4f0      	push	{r4, r5, r6, r7}
    d7f2:	0786      	lsls	r6, r0, #30
    d7f4:	d046      	beq.n	d884 <memset+0x94>
    d7f6:	1e54      	subs	r4, r2, #1
    d7f8:	2a00      	cmp	r2, #0
    d7fa:	d03c      	beq.n	d876 <memset+0x86>
    d7fc:	b2ca      	uxtb	r2, r1
    d7fe:	4603      	mov	r3, r0
    d800:	e002      	b.n	d808 <memset+0x18>
    d802:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    d806:	d336      	bcc.n	d876 <memset+0x86>
    d808:	f803 2b01 	strb.w	r2, [r3], #1
    d80c:	079d      	lsls	r5, r3, #30
    d80e:	d1f8      	bne.n	d802 <memset+0x12>
    d810:	2c03      	cmp	r4, #3
    d812:	d929      	bls.n	d868 <memset+0x78>
    d814:	b2cd      	uxtb	r5, r1
    d816:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d81a:	2c0f      	cmp	r4, #15
    d81c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d820:	d933      	bls.n	d88a <memset+0x9a>
    d822:	f1a4 0610 	sub.w	r6, r4, #16
    d826:	0936      	lsrs	r6, r6, #4
    d828:	f103 0720 	add.w	r7, r3, #32
    d82c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    d830:	f103 0210 	add.w	r2, r3, #16
    d834:	e942 5504 	strd	r5, r5, [r2, #-16]
    d838:	e942 5502 	strd	r5, r5, [r2, #-8]
    d83c:	3210      	adds	r2, #16
    d83e:	42ba      	cmp	r2, r7
    d840:	d1f8      	bne.n	d834 <memset+0x44>
    d842:	1c72      	adds	r2, r6, #1
    d844:	f014 0f0c 	tst.w	r4, #12
    d848:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d84c:	f004 060f 	and.w	r6, r4, #15
    d850:	d013      	beq.n	d87a <memset+0x8a>
    d852:	1f33      	subs	r3, r6, #4
    d854:	f023 0303 	bic.w	r3, r3, #3
    d858:	3304      	adds	r3, #4
    d85a:	4413      	add	r3, r2
    d85c:	f842 5b04 	str.w	r5, [r2], #4
    d860:	4293      	cmp	r3, r2
    d862:	d1fb      	bne.n	d85c <memset+0x6c>
    d864:	f006 0403 	and.w	r4, r6, #3
    d868:	b12c      	cbz	r4, d876 <memset+0x86>
    d86a:	b2c9      	uxtb	r1, r1
    d86c:	441c      	add	r4, r3
    d86e:	f803 1b01 	strb.w	r1, [r3], #1
    d872:	429c      	cmp	r4, r3
    d874:	d1fb      	bne.n	d86e <memset+0x7e>
    d876:	bcf0      	pop	{r4, r5, r6, r7}
    d878:	4770      	bx	lr
    d87a:	4634      	mov	r4, r6
    d87c:	4613      	mov	r3, r2
    d87e:	2c00      	cmp	r4, #0
    d880:	d1f3      	bne.n	d86a <memset+0x7a>
    d882:	e7f8      	b.n	d876 <memset+0x86>
    d884:	4614      	mov	r4, r2
    d886:	4603      	mov	r3, r0
    d888:	e7c2      	b.n	d810 <memset+0x20>
    d88a:	461a      	mov	r2, r3
    d88c:	4626      	mov	r6, r4
    d88e:	e7e0      	b.n	d852 <memset+0x62>

0000d890 <am_hal_burst_mode_initialize>:
    d890:	b570      	push	{r4, r5, r6, lr}
    d892:	4b1c      	ldr	r3, [pc, #112]	; (d904 <am_hal_burst_mode_initialize+0x74>)
    d894:	695b      	ldr	r3, [r3, #20]
    d896:	4604      	mov	r4, r0
    d898:	07d8      	lsls	r0, r3, #31
    d89a:	b082      	sub	sp, #8
    d89c:	d521      	bpl.n	d8e2 <am_hal_burst_mode_initialize+0x52>
    d89e:	4b1a      	ldr	r3, [pc, #104]	; (d908 <am_hal_burst_mode_initialize+0x78>)
    d8a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d8a6:	629a      	str	r2, [r3, #40]	; 0x28
    d8a8:	681b      	ldr	r3, [r3, #0]
    d8aa:	07d9      	lsls	r1, r3, #31
    d8ac:	d427      	bmi.n	d8fe <am_hal_burst_mode_initialize+0x6e>
    d8ae:	4d15      	ldr	r5, [pc, #84]	; (d904 <am_hal_burst_mode_initialize+0x74>)
    d8b0:	4916      	ldr	r1, [pc, #88]	; (d90c <am_hal_burst_mode_initialize+0x7c>)
    d8b2:	7e2a      	ldrb	r2, [r5, #24]
    d8b4:	2601      	movs	r6, #1
    d8b6:	f042 0210 	orr.w	r2, r2, #16
    d8ba:	2320      	movs	r3, #32
    d8bc:	762a      	strb	r2, [r5, #24]
    d8be:	f242 7010 	movw	r0, #10000	; 0x2710
    d8c2:	461a      	mov	r2, r3
    d8c4:	9600      	str	r6, [sp, #0]
    d8c6:	f000 f9ab 	bl	dc20 <am_hal_flash_delay_status_check>
    d8ca:	b990      	cbnz	r0, d8f2 <am_hal_burst_mode_initialize+0x62>
    d8cc:	69ab      	ldr	r3, [r5, #24]
    d8ce:	065a      	lsls	r2, r3, #25
    d8d0:	d507      	bpl.n	d8e2 <am_hal_burst_mode_initialize+0x52>
    d8d2:	69ab      	ldr	r3, [r5, #24]
    d8d4:	069b      	lsls	r3, r3, #26
    d8d6:	d504      	bpl.n	d8e2 <am_hal_burst_mode_initialize+0x52>
    d8d8:	4b0d      	ldr	r3, [pc, #52]	; (d910 <am_hal_burst_mode_initialize+0x80>)
    d8da:	701e      	strb	r6, [r3, #0]
    d8dc:	7020      	strb	r0, [r4, #0]
    d8de:	b002      	add	sp, #8
    d8e0:	bd70      	pop	{r4, r5, r6, pc}
    d8e2:	4a0b      	ldr	r2, [pc, #44]	; (d910 <am_hal_burst_mode_initialize+0x80>)
    d8e4:	2100      	movs	r1, #0
    d8e6:	2301      	movs	r3, #1
    d8e8:	2007      	movs	r0, #7
    d8ea:	7011      	strb	r1, [r2, #0]
    d8ec:	7023      	strb	r3, [r4, #0]
    d8ee:	b002      	add	sp, #8
    d8f0:	bd70      	pop	{r4, r5, r6, pc}
    d8f2:	4b07      	ldr	r3, [pc, #28]	; (d910 <am_hal_burst_mode_initialize+0x80>)
    d8f4:	2200      	movs	r2, #0
    d8f6:	701a      	strb	r2, [r3, #0]
    d8f8:	7026      	strb	r6, [r4, #0]
    d8fa:	b002      	add	sp, #8
    d8fc:	bd70      	pop	{r4, r5, r6, pc}
    d8fe:	f000 fbd9 	bl	e0b4 <am_hal_pwrctrl_blebuck_trim>
    d902:	e7d4      	b.n	d8ae <am_hal_burst_mode_initialize+0x1e>
    d904:	40020000 	.word	0x40020000
    d908:	40021000 	.word	0x40021000
    d90c:	40020018 	.word	0x40020018
    d910:	10000a68 	.word	0x10000a68

0000d914 <am_hal_burst_mode_enable>:
    d914:	b570      	push	{r4, r5, r6, lr}
    d916:	4b15      	ldr	r3, [pc, #84]	; (d96c <am_hal_burst_mode_enable+0x58>)
    d918:	781b      	ldrb	r3, [r3, #0]
    d91a:	b082      	sub	sp, #8
    d91c:	4604      	mov	r4, r0
    d91e:	b1db      	cbz	r3, d958 <am_hal_burst_mode_enable+0x44>
    d920:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d924:	2601      	movs	r6, #1
    d926:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d92a:	4911      	ldr	r1, [pc, #68]	; (d970 <am_hal_burst_mode_enable+0x5c>)
    d92c:	4332      	orrs	r2, r6
    d92e:	2304      	movs	r3, #4
    d930:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d934:	f242 7010 	movw	r0, #10000	; 0x2710
    d938:	461a      	mov	r2, r3
    d93a:	9600      	str	r6, [sp, #0]
    d93c:	f000 f970 	bl	dc20 <am_hal_flash_delay_status_check>
    d940:	b938      	cbnz	r0, d952 <am_hal_burst_mode_enable+0x3e>
    d942:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d944:	079b      	lsls	r3, r3, #30
    d946:	d50c      	bpl.n	d962 <am_hal_burst_mode_enable+0x4e>
    d948:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d94a:	f013 0f04 	tst.w	r3, #4
    d94e:	bf18      	it	ne
    d950:	4606      	movne	r6, r0
    d952:	7026      	strb	r6, [r4, #0]
    d954:	b002      	add	sp, #8
    d956:	bd70      	pop	{r4, r5, r6, pc}
    d958:	2301      	movs	r3, #1
    d95a:	7003      	strb	r3, [r0, #0]
    d95c:	2007      	movs	r0, #7
    d95e:	b002      	add	sp, #8
    d960:	bd70      	pop	{r4, r5, r6, pc}
    d962:	4630      	mov	r0, r6
    d964:	7026      	strb	r6, [r4, #0]
    d966:	b002      	add	sp, #8
    d968:	bd70      	pop	{r4, r5, r6, pc}
    d96a:	bf00      	nop
    d96c:	10000a68 	.word	0x10000a68
    d970:	40004034 	.word	0x40004034

0000d974 <am_hal_burst_mode_disable>:
    d974:	b530      	push	{r4, r5, lr}
    d976:	b085      	sub	sp, #20
    d978:	4605      	mov	r5, r0
    d97a:	f000 fb3d 	bl	dff8 <am_hal_interrupt_master_disable>
    d97e:	2100      	movs	r1, #0
    d980:	4603      	mov	r3, r0
    d982:	4810      	ldr	r0, [pc, #64]	; (d9c4 <am_hal_burst_mode_disable+0x50>)
    d984:	9303      	str	r3, [sp, #12]
    d986:	f000 f985 	bl	dc94 <am_hal_flash_store_ui32>
    d98a:	9803      	ldr	r0, [sp, #12]
    d98c:	f000 fb38 	bl	e000 <am_hal_interrupt_master_set>
    d990:	4b0d      	ldr	r3, [pc, #52]	; (d9c8 <am_hal_burst_mode_disable+0x54>)
    d992:	490c      	ldr	r1, [pc, #48]	; (d9c4 <am_hal_burst_mode_disable+0x50>)
    d994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d996:	2401      	movs	r4, #1
    d998:	f36f 72df 	bfc	r2, #31, #1
    d99c:	629a      	str	r2, [r3, #40]	; 0x28
    d99e:	f242 7010 	movw	r0, #10000	; 0x2710
    d9a2:	2300      	movs	r3, #0
    d9a4:	9400      	str	r4, [sp, #0]
    d9a6:	2204      	movs	r2, #4
    d9a8:	f000 f93a 	bl	dc20 <am_hal_flash_delay_status_check>
    d9ac:	b930      	cbnz	r0, d9bc <am_hal_burst_mode_disable+0x48>
    d9ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d9b4:	f013 0f04 	tst.w	r3, #4
    d9b8:	bf18      	it	ne
    d9ba:	4604      	movne	r4, r0
    d9bc:	702c      	strb	r4, [r5, #0]
    d9be:	b005      	add	sp, #20
    d9c0:	bd30      	pop	{r4, r5, pc}
    d9c2:	bf00      	nop
    d9c4:	40004034 	.word	0x40004034
    d9c8:	40021000 	.word	0x40021000

0000d9cc <am_hal_cachectrl_config>:
    d9cc:	b530      	push	{r4, r5, lr}
    d9ce:	b083      	sub	sp, #12
    d9d0:	4604      	mov	r4, r0
    d9d2:	f000 fb11 	bl	dff8 <am_hal_interrupt_master_disable>
    d9d6:	4d0e      	ldr	r5, [pc, #56]	; (da10 <am_hal_cachectrl_config+0x44>)
    d9d8:	9001      	str	r0, [sp, #4]
    d9da:	682b      	ldr	r3, [r5, #0]
    d9dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d9e0:	602b      	str	r3, [r5, #0]
    d9e2:	9801      	ldr	r0, [sp, #4]
    d9e4:	f000 fb0c 	bl	e000 <am_hal_interrupt_master_set>
    d9e8:	7863      	ldrb	r3, [r4, #1]
    d9ea:	7822      	ldrb	r2, [r4, #0]
    d9ec:	78a1      	ldrb	r1, [r4, #2]
    d9ee:	021b      	lsls	r3, r3, #8
    d9f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d9f4:	0112      	lsls	r2, r2, #4
    d9f6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d9fa:	b2d2      	uxtb	r2, r2
    d9fc:	4313      	orrs	r3, r2
    d9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    da02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    da06:	2000      	movs	r0, #0
    da08:	602b      	str	r3, [r5, #0]
    da0a:	b003      	add	sp, #12
    da0c:	bd30      	pop	{r4, r5, pc}
    da0e:	bf00      	nop
    da10:	40018000 	.word	0x40018000

0000da14 <am_hal_cachectrl_enable>:
    da14:	4a03      	ldr	r2, [pc, #12]	; (da24 <am_hal_cachectrl_enable+0x10>)
    da16:	6813      	ldr	r3, [r2, #0]
    da18:	f043 0301 	orr.w	r3, r3, #1
    da1c:	6013      	str	r3, [r2, #0]
    da1e:	2000      	movs	r0, #0
    da20:	4770      	bx	lr
    da22:	bf00      	nop
    da24:	40018000 	.word	0x40018000

0000da28 <am_hal_clkgen_control>:
    da28:	4b49      	ldr	r3, [pc, #292]	; (db50 <am_hal_clkgen_control+0x128>)
    da2a:	681a      	ldr	r2, [r3, #0]
    da2c:	b912      	cbnz	r2, da34 <am_hal_clkgen_control+0xc>
    da2e:	4a49      	ldr	r2, [pc, #292]	; (db54 <am_hal_clkgen_control+0x12c>)
    da30:	6812      	ldr	r2, [r2, #0]
    da32:	601a      	str	r2, [r3, #0]
    da34:	2809      	cmp	r0, #9
    da36:	f200 8089 	bhi.w	db4c <am_hal_clkgen_control+0x124>
    da3a:	e8df f000 	tbb	[pc, r0]
    da3e:	160d      	.short	0x160d
    da40:	423a261e 	.word	0x423a261e
    da44:	055c544c 	.word	0x055c544c
    da48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da4c:	2000      	movs	r0, #0
    da4e:	6a1a      	ldr	r2, [r3, #32]
    da50:	f36f 0200 	bfc	r2, #0, #1
    da54:	621a      	str	r2, [r3, #32]
    da56:	4770      	bx	lr
    da58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da5c:	2200      	movs	r2, #0
    da5e:	2147      	movs	r1, #71	; 0x47
    da60:	6159      	str	r1, [r3, #20]
    da62:	4610      	mov	r0, r2
    da64:	619a      	str	r2, [r3, #24]
    da66:	615a      	str	r2, [r3, #20]
    da68:	4770      	bx	lr
    da6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da6e:	2000      	movs	r0, #0
    da70:	899a      	ldrh	r2, [r3, #12]
    da72:	f36f 0200 	bfc	r2, #0, #1
    da76:	819a      	strh	r2, [r3, #12]
    da78:	4770      	bx	lr
    da7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da7e:	2000      	movs	r0, #0
    da80:	899a      	ldrh	r2, [r3, #12]
    da82:	f36f 0241 	bfc	r2, #1, #1
    da86:	819a      	strh	r2, [r3, #12]
    da88:	4770      	bx	lr
    da8a:	4a33      	ldr	r2, [pc, #204]	; (db58 <am_hal_clkgen_control+0x130>)
    da8c:	68d3      	ldr	r3, [r2, #12]
    da8e:	b2db      	uxtb	r3, r3
    da90:	2b21      	cmp	r3, #33	; 0x21
    da92:	d106      	bne.n	daa2 <am_hal_clkgen_control+0x7a>
    da94:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da98:	2101      	movs	r1, #1
    da9a:	f361 2309 	bfi	r3, r1, #8, #2
    da9e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    daa2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daa6:	2000      	movs	r0, #0
    daa8:	8993      	ldrh	r3, [r2, #12]
    daaa:	f043 0301 	orr.w	r3, r3, #1
    daae:	8193      	strh	r3, [r2, #12]
    dab0:	4770      	bx	lr
    dab2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dab6:	2000      	movs	r0, #0
    dab8:	8993      	ldrh	r3, [r2, #12]
    daba:	f043 0302 	orr.w	r3, r3, #2
    dabe:	8193      	strh	r3, [r2, #12]
    dac0:	4770      	bx	lr
    dac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dac6:	2200      	movs	r2, #0
    dac8:	2047      	movs	r0, #71	; 0x47
    daca:	2101      	movs	r1, #1
    dacc:	6158      	str	r0, [r3, #20]
    dace:	6199      	str	r1, [r3, #24]
    dad0:	4610      	mov	r0, r2
    dad2:	615a      	str	r2, [r3, #20]
    dad4:	4770      	bx	lr
    dad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dada:	2000      	movs	r0, #0
    dadc:	899a      	ldrh	r2, [r3, #12]
    dade:	f36f 12c7 	bfc	r2, #7, #1
    dae2:	819a      	strh	r2, [r3, #12]
    dae4:	4770      	bx	lr
    dae6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daea:	2000      	movs	r0, #0
    daec:	8993      	ldrh	r3, [r2, #12]
    daee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    daf2:	8193      	strh	r3, [r2, #12]
    daf4:	4770      	bx	lr
    daf6:	4a18      	ldr	r2, [pc, #96]	; (db58 <am_hal_clkgen_control+0x130>)
    daf8:	68d3      	ldr	r3, [r2, #12]
    dafa:	b2db      	uxtb	r3, r3
    dafc:	2b21      	cmp	r3, #33	; 0x21
    dafe:	d00a      	beq.n	db16 <am_hal_clkgen_control+0xee>
    db00:	b139      	cbz	r1, db12 <am_hal_clkgen_control+0xea>
    db02:	680b      	ldr	r3, [r1, #0]
    db04:	f043 0301 	orr.w	r3, r3, #1
    db08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db0c:	2000      	movs	r0, #0
    db0e:	6213      	str	r3, [r2, #32]
    db10:	4770      	bx	lr
    db12:	4b12      	ldr	r3, [pc, #72]	; (db5c <am_hal_clkgen_control+0x134>)
    db14:	e7f8      	b.n	db08 <am_hal_clkgen_control+0xe0>
    db16:	b500      	push	{lr}
    db18:	b083      	sub	sp, #12
    db1a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    db1e:	9101      	str	r1, [sp, #4]
    db20:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    db24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db28:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db2c:	f000 f868 	bl	dc00 <am_hal_flash_delay>
    db30:	9901      	ldr	r1, [sp, #4]
    db32:	b149      	cbz	r1, db48 <am_hal_clkgen_control+0x120>
    db34:	680b      	ldr	r3, [r1, #0]
    db36:	f043 0301 	orr.w	r3, r3, #1
    db3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db3e:	2000      	movs	r0, #0
    db40:	6213      	str	r3, [r2, #32]
    db42:	b003      	add	sp, #12
    db44:	f85d fb04 	ldr.w	pc, [sp], #4
    db48:	4b04      	ldr	r3, [pc, #16]	; (db5c <am_hal_clkgen_control+0x134>)
    db4a:	e7f6      	b.n	db3a <am_hal_clkgen_control+0x112>
    db4c:	2006      	movs	r0, #6
    db4e:	4770      	bx	lr
    db50:	10000a6c 	.word	0x10000a6c
    db54:	4ffff000 	.word	0x4ffff000
    db58:	40020000 	.word	0x40020000
    db5c:	0025b801 	.word	0x0025b801

0000db60 <am_hal_clkgen_status_get>:
    db60:	b1a8      	cbz	r0, db8e <am_hal_clkgen_status_get+0x2e>
    db62:	b410      	push	{r4}
    db64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db68:	490a      	ldr	r1, [pc, #40]	; (db94 <am_hal_clkgen_status_get+0x34>)
    db6a:	6994      	ldr	r4, [r2, #24]
    db6c:	4b0a      	ldr	r3, [pc, #40]	; (db98 <am_hal_clkgen_status_get+0x38>)
    db6e:	f014 0f01 	tst.w	r4, #1
    db72:	bf08      	it	eq
    db74:	460b      	moveq	r3, r1
    db76:	6003      	str	r3, [r0, #0]
    db78:	69d3      	ldr	r3, [r2, #28]
    db7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    db7e:	f003 0201 	and.w	r2, r3, #1
    db82:	f3c3 0340 	ubfx	r3, r3, #1, #1
    db86:	6042      	str	r2, [r0, #4]
    db88:	7203      	strb	r3, [r0, #8]
    db8a:	2000      	movs	r0, #0
    db8c:	4770      	bx	lr
    db8e:	2006      	movs	r0, #6
    db90:	4770      	bx	lr
    db92:	bf00      	nop
    db94:	02dc6c00 	.word	0x02dc6c00
    db98:	016e3600 	.word	0x016e3600

0000db9c <am_hal_flash_page_erase>:
    db9c:	4b00      	ldr	r3, [pc, #0]	; (dba0 <am_hal_flash_page_erase+0x4>)
    db9e:	4718      	bx	r3
    dba0:	08000051 	.word	0x08000051

0000dba4 <am_hal_flash_program_main>:
    dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba8:	4e12      	ldr	r6, [pc, #72]	; (dbf4 <am_hal_flash_program_main+0x50>)
    dbaa:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    dbae:	42b5      	cmp	r5, r6
    dbb0:	b082      	sub	sp, #8
    dbb2:	d004      	beq.n	dbbe <am_hal_flash_program_main+0x1a>
    dbb4:	4c10      	ldr	r4, [pc, #64]	; (dbf8 <am_hal_flash_program_main+0x54>)
    dbb6:	47a0      	blx	r4
    dbb8:	b002      	add	sp, #8
    dbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbbe:	2b01      	cmp	r3, #1
    dbc0:	461c      	mov	r4, r3
    dbc2:	4680      	mov	r8, r0
    dbc4:	4617      	mov	r7, r2
    dbc6:	d904      	bls.n	dbd2 <am_hal_flash_program_main+0x2e>
    dbc8:	4d0b      	ldr	r5, [pc, #44]	; (dbf8 <am_hal_flash_program_main+0x54>)
    dbca:	3b01      	subs	r3, #1
    dbcc:	47a8      	blx	r5
    dbce:	2800      	cmp	r0, #0
    dbd0:	d1f2      	bne.n	dbb8 <am_hal_flash_program_main+0x14>
    dbd2:	4b0a      	ldr	r3, [pc, #40]	; (dbfc <am_hal_flash_program_main+0x58>)
    dbd4:	4d08      	ldr	r5, [pc, #32]	; (dbf8 <am_hal_flash_program_main+0x54>)
    dbd6:	681b      	ldr	r3, [r3, #0]
    dbd8:	9301      	str	r3, [sp, #4]
    dbda:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    dbde:	3a01      	subs	r2, #1
    dbe0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    dbe4:	4640      	mov	r0, r8
    dbe6:	2301      	movs	r3, #1
    dbe8:	a901      	add	r1, sp, #4
    dbea:	47a8      	blx	r5
    dbec:	b002      	add	sp, #8
    dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbf2:	bf00      	nop
    dbf4:	10060000 	.word	0x10060000
    dbf8:	08000055 	.word	0x08000055
    dbfc:	1005fffc 	.word	0x1005fffc

0000dc00 <am_hal_flash_delay>:
    dc00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dc06:	075b      	lsls	r3, r3, #29
    dc08:	bf46      	itte	mi
    dc0a:	0040      	lslmi	r0, r0, #1
    dc0c:	230e      	movmi	r3, #14
    dc0e:	230b      	movpl	r3, #11
    dc10:	4298      	cmp	r0, r3
    dc12:	d902      	bls.n	dc1a <am_hal_flash_delay+0x1a>
    dc14:	1ac0      	subs	r0, r0, r3
    dc16:	4b01      	ldr	r3, [pc, #4]	; (dc1c <am_hal_flash_delay+0x1c>)
    dc18:	4718      	bx	r3
    dc1a:	4770      	bx	lr
    dc1c:	0800009d 	.word	0x0800009d

0000dc20 <am_hal_flash_delay_status_check>:
    dc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc24:	f89d c020 	ldrb.w	ip, [sp, #32]
    dc28:	4604      	mov	r4, r0
    dc2a:	460d      	mov	r5, r1
    dc2c:	4616      	mov	r6, r2
    dc2e:	461f      	mov	r7, r3
    dc30:	f1bc 0f00 	cmp.w	ip, #0
    dc34:	d015      	beq.n	dc62 <am_hal_flash_delay_status_check+0x42>
    dc36:	f8df 8058 	ldr.w	r8, [pc, #88]	; dc90 <am_hal_flash_delay_status_check+0x70>
    dc3a:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dc3e:	e009      	b.n	dc54 <am_hal_flash_delay_status_check+0x34>
    dc40:	b31c      	cbz	r4, dc8a <am_hal_flash_delay_status_check+0x6a>
    dc42:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc46:	f013 0f04 	tst.w	r3, #4
    dc4a:	bf0c      	ite	eq
    dc4c:	2005      	moveq	r0, #5
    dc4e:	2012      	movne	r0, #18
    dc50:	3c01      	subs	r4, #1
    dc52:	47c0      	blx	r8
    dc54:	6828      	ldr	r0, [r5, #0]
    dc56:	4030      	ands	r0, r6
    dc58:	42b8      	cmp	r0, r7
    dc5a:	d1f1      	bne.n	dc40 <am_hal_flash_delay_status_check+0x20>
    dc5c:	2000      	movs	r0, #0
    dc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc62:	f8df 902c 	ldr.w	r9, [pc, #44]	; dc90 <am_hal_flash_delay_status_check+0x70>
    dc66:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
    dc6a:	e009      	b.n	dc80 <am_hal_flash_delay_status_check+0x60>
    dc6c:	b16c      	cbz	r4, dc8a <am_hal_flash_delay_status_check+0x6a>
    dc6e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    dc72:	f013 0f04 	tst.w	r3, #4
    dc76:	bf0c      	ite	eq
    dc78:	2005      	moveq	r0, #5
    dc7a:	2012      	movne	r0, #18
    dc7c:	3c01      	subs	r4, #1
    dc7e:	47c8      	blx	r9
    dc80:	6828      	ldr	r0, [r5, #0]
    dc82:	4030      	ands	r0, r6
    dc84:	42b8      	cmp	r0, r7
    dc86:	d0f1      	beq.n	dc6c <am_hal_flash_delay_status_check+0x4c>
    dc88:	e7e8      	b.n	dc5c <am_hal_flash_delay_status_check+0x3c>
    dc8a:	2004      	movs	r0, #4
    dc8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc90:	0800009d 	.word	0x0800009d

0000dc94 <am_hal_flash_store_ui32>:
    dc94:	4b01      	ldr	r3, [pc, #4]	; (dc9c <am_hal_flash_store_ui32+0x8>)
    dc96:	f043 0301 	orr.w	r3, r3, #1
    dc9a:	4718      	bx	r3
    dc9c:	10000200 	.word	0x10000200

0000dca0 <am_hal_gpio_pinconfig>:
    dca0:	2831      	cmp	r0, #49	; 0x31
    dca2:	f200 80bc 	bhi.w	de1e <am_hal_gpio_pinconfig+0x17e>
    dca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcaa:	4604      	mov	r4, r0
    dcac:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dcb0:	f001 0007 	and.w	r0, r1, #7
    dcb4:	b085      	sub	sp, #20
    dcb6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dcba:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dcbe:	d00f      	beq.n	dce0 <am_hal_gpio_pinconfig+0x40>
    dcc0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dcc4:	1db5      	adds	r5, r6, #6
    dcc6:	f005 0507 	and.w	r5, r5, #7
    dcca:	2d03      	cmp	r5, #3
    dccc:	f042 0201 	orr.w	r2, r2, #1
    dcd0:	f240 80a7 	bls.w	de22 <am_hal_gpio_pinconfig+0x182>
    dcd4:	2fc0      	cmp	r7, #192	; 0xc0
    dcd6:	f000 80eb 	beq.w	deb0 <am_hal_gpio_pinconfig+0x210>
    dcda:	2f20      	cmp	r7, #32
    dcdc:	f000 80ed 	beq.w	deba <am_hal_gpio_pinconfig+0x21a>
    dce0:	b163      	cbz	r3, dcfc <am_hal_gpio_pinconfig+0x5c>
    dce2:	2b01      	cmp	r3, #1
    dce4:	f000 80dd 	beq.w	dea2 <am_hal_gpio_pinconfig+0x202>
    dce8:	2b02      	cmp	r3, #2
    dcea:	f040 80c3 	bne.w	de74 <am_hal_gpio_pinconfig+0x1d4>
    dcee:	4b7e      	ldr	r3, [pc, #504]	; (dee8 <am_hal_gpio_pinconfig+0x248>)
    dcf0:	5d1b      	ldrb	r3, [r3, r4]
    dcf2:	075b      	lsls	r3, r3, #29
    dcf4:	f140 80be 	bpl.w	de74 <am_hal_gpio_pinconfig+0x1d4>
    dcf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dcfc:	4b7b      	ldr	r3, [pc, #492]	; (deec <am_hal_gpio_pinconfig+0x24c>)
    dcfe:	4d7c      	ldr	r5, [pc, #496]	; (def0 <am_hal_gpio_pinconfig+0x250>)
    dd00:	5d1b      	ldrb	r3, [r3, r4]
    dd02:	5d2d      	ldrb	r5, [r5, r4]
    dd04:	4103      	asrs	r3, r0
    dd06:	005b      	lsls	r3, r3, #1
    dd08:	f003 0302 	and.w	r3, r3, #2
    dd0c:	4285      	cmp	r5, r0
    dd0e:	ea43 0302 	orr.w	r3, r3, r2
    dd12:	f000 8091 	beq.w	de38 <am_hal_gpio_pinconfig+0x198>
    dd16:	f3c1 2607 	ubfx	r6, r1, #8, #8
    dd1a:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dd1e:	f3c1 3080 	ubfx	r0, r1, #14, #1
    dd22:	0a8a      	lsrs	r2, r1, #10
    dd24:	f006 070c 	and.w	r7, r6, #12
    dd28:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    dd2c:	f002 0208 	and.w	r2, r2, #8
    dd30:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dd34:	2f04      	cmp	r7, #4
    dd36:	ea42 0200 	orr.w	r2, r2, r0
    dd3a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    dd3e:	4628      	mov	r0, r5
    dd40:	f000 80ac 	beq.w	de9c <am_hal_gpio_pinconfig+0x1fc>
    dd44:	486b      	ldr	r0, [pc, #428]	; (def4 <am_hal_gpio_pinconfig+0x254>)
    dd46:	6800      	ldr	r0, [r0, #0]
    dd48:	eba1 0800 	sub.w	r8, r1, r0
    dd4c:	fab8 f888 	clz	r8, r8
    dd50:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dd54:	f016 0f60 	tst.w	r6, #96	; 0x60
    dd58:	bf04      	itt	eq
    dd5a:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dd5e:	f360 0200 	bfieq	r2, r0, #0, #1
    dd62:	00a6      	lsls	r6, r4, #2
    dd64:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dd68:	2902      	cmp	r1, #2
    dd6a:	ea4f 05c4 	mov.w	r5, r4, lsl #3
    dd6e:	f000 808e 	beq.w	de8e <am_hal_gpio_pinconfig+0x1ee>
    dd72:	2903      	cmp	r1, #3
    dd74:	f000 8082 	beq.w	de7c <am_hal_gpio_pinconfig+0x1dc>
    dd78:	2901      	cmp	r1, #1
    dd7a:	bf08      	it	eq
    dd7c:	f043 0304 	orreq.w	r3, r3, #4
    dd80:	f005 0518 	and.w	r5, r5, #24
    dd84:	f04f 0900 	mov.w	r9, #0
    dd88:	f006 061c 	and.w	r6, r6, #28
    dd8c:	210f      	movs	r1, #15
    dd8e:	40b1      	lsls	r1, r6
    dd90:	27ff      	movs	r7, #255	; 0xff
    dd92:	fa02 f606 	lsl.w	r6, r2, r6
    dd96:	43ca      	mvns	r2, r1
    dd98:	40af      	lsls	r7, r5
    dd9a:	9201      	str	r2, [sp, #4]
    dd9c:	fa03 f505 	lsl.w	r5, r3, r5
    dda0:	f000 f92a 	bl	dff8 <am_hal_interrupt_master_disable>
    dda4:	f024 0b03 	bic.w	fp, r4, #3
    dda8:	ea4f 0a54 	mov.w	sl, r4, lsr #1
    ddac:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
    ddb0:	4b51      	ldr	r3, [pc, #324]	; (def8 <am_hal_gpio_pinconfig+0x258>)
    ddb2:	4952      	ldr	r1, [pc, #328]	; (defc <am_hal_gpio_pinconfig+0x25c>)
    ddb4:	9a01      	ldr	r2, [sp, #4]
    ddb6:	9003      	str	r0, [sp, #12]
    ddb8:	43ff      	mvns	r7, r7
    ddba:	f02a 0a03 	bic.w	sl, sl, #3
    ddbe:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    ddc2:	f1b8 0f00 	cmp.w	r8, #0
    ddc6:	d00b      	beq.n	dde0 <am_hal_gpio_pinconfig+0x140>
    ddc8:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    ddcc:	f004 081f 	and.w	r8, r4, #31
    ddd0:	484b      	ldr	r0, [pc, #300]	; (df00 <am_hal_gpio_pinconfig+0x260>)
    ddd2:	f00e 0e04 	and.w	lr, lr, #4
    ddd6:	2401      	movs	r4, #1
    ddd8:	fa04 f408 	lsl.w	r4, r4, r8
    dddc:	f84e 4000 	str.w	r4, [lr, r0]
    dde0:	4848      	ldr	r0, [pc, #288]	; (df04 <am_hal_gpio_pinconfig+0x264>)
    dde2:	2473      	movs	r4, #115	; 0x73
    dde4:	6604      	str	r4, [r0, #96]	; 0x60
    dde6:	f8dc 4000 	ldr.w	r4, [ip]
    ddea:	403c      	ands	r4, r7
    ddec:	4325      	orrs	r5, r4
    ddee:	f8cc 5000 	str.w	r5, [ip]
    ddf2:	f85a 4003 	ldr.w	r4, [sl, r3]
    ddf6:	4022      	ands	r2, r4
    ddf8:	4332      	orrs	r2, r6
    ddfa:	f84a 2003 	str.w	r2, [sl, r3]
    ddfe:	f85b 3001 	ldr.w	r3, [fp, r1]
    de02:	401f      	ands	r7, r3
    de04:	2400      	movs	r4, #0
    de06:	ea47 0709 	orr.w	r7, r7, r9
    de0a:	f84b 7001 	str.w	r7, [fp, r1]
    de0e:	6604      	str	r4, [r0, #96]	; 0x60
    de10:	9803      	ldr	r0, [sp, #12]
    de12:	f000 f8f5 	bl	e000 <am_hal_interrupt_master_set>
    de16:	4620      	mov	r0, r4
    de18:	b005      	add	sp, #20
    de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de1e:	2006      	movs	r0, #6
    de20:	4770      	bx	lr
    de22:	4d31      	ldr	r5, [pc, #196]	; (dee8 <am_hal_gpio_pinconfig+0x248>)
    de24:	5d2d      	ldrb	r5, [r5, r4]
    de26:	3e02      	subs	r6, #2
    de28:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    de2c:	07ee      	lsls	r6, r5, #31
    de2e:	d547      	bpl.n	dec0 <am_hal_gpio_pinconfig+0x220>
    de30:	2b00      	cmp	r3, #0
    de32:	f43f af63 	beq.w	dcfc <am_hal_gpio_pinconfig+0x5c>
    de36:	e754      	b.n	dce2 <am_hal_gpio_pinconfig+0x42>
    de38:	f3c1 4202 	ubfx	r2, r1, #16, #3
    de3c:	2a07      	cmp	r2, #7
    de3e:	d041      	beq.n	dec4 <am_hal_gpio_pinconfig+0x224>
    de40:	4d31      	ldr	r5, [pc, #196]	; (df08 <am_hal_gpio_pinconfig+0x268>)
    de42:	4610      	mov	r0, r2
    de44:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    de48:	f3c1 42c1 	ubfx	r2, r1, #19, #2
    de4c:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
    de50:	4286      	cmp	r6, r0
    de52:	d039      	beq.n	dec8 <am_hal_gpio_pinconfig+0x228>
    de54:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de58:	00a6      	lsls	r6, r4, #2
    de5a:	786a      	ldrb	r2, [r5, #1]
    de5c:	4282      	cmp	r2, r0
    de5e:	d03d      	beq.n	dedc <am_hal_gpio_pinconfig+0x23c>
    de60:	78aa      	ldrb	r2, [r5, #2]
    de62:	4282      	cmp	r2, r0
    de64:	d03c      	beq.n	dee0 <am_hal_gpio_pinconfig+0x240>
    de66:	78ea      	ldrb	r2, [r5, #3]
    de68:	4282      	cmp	r2, r0
    de6a:	d03b      	beq.n	dee4 <am_hal_gpio_pinconfig+0x244>
    de6c:	4827      	ldr	r0, [pc, #156]	; (df0c <am_hal_gpio_pinconfig+0x26c>)
    de6e:	b005      	add	sp, #20
    de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de74:	4826      	ldr	r0, [pc, #152]	; (df10 <am_hal_gpio_pinconfig+0x270>)
    de76:	b005      	add	sp, #20
    de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de7c:	f005 0518 	and.w	r5, r5, #24
    de80:	f04f 0901 	mov.w	r9, #1
    de84:	f043 0304 	orr.w	r3, r3, #4
    de88:	fa09 f905 	lsl.w	r9, r9, r5
    de8c:	e77c      	b.n	dd88 <am_hal_gpio_pinconfig+0xe8>
    de8e:	f005 0518 	and.w	r5, r5, #24
    de92:	f04f 0901 	mov.w	r9, #1
    de96:	fa09 f905 	lsl.w	r9, r9, r5
    de9a:	e775      	b.n	dd88 <am_hal_gpio_pinconfig+0xe8>
    de9c:	f04f 0801 	mov.w	r8, #1
    dea0:	e758      	b.n	dd54 <am_hal_gpio_pinconfig+0xb4>
    dea2:	4b11      	ldr	r3, [pc, #68]	; (dee8 <am_hal_gpio_pinconfig+0x248>)
    dea4:	5d1b      	ldrb	r3, [r3, r4]
    dea6:	079d      	lsls	r5, r3, #30
    dea8:	d5e4      	bpl.n	de74 <am_hal_gpio_pinconfig+0x1d4>
    deaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    deae:	e725      	b.n	dcfc <am_hal_gpio_pinconfig+0x5c>
    deb0:	2c14      	cmp	r4, #20
    deb2:	f43f af15 	beq.w	dce0 <am_hal_gpio_pinconfig+0x40>
    deb6:	4817      	ldr	r0, [pc, #92]	; (df14 <am_hal_gpio_pinconfig+0x274>)
    deb8:	e7ae      	b.n	de18 <am_hal_gpio_pinconfig+0x178>
    deba:	2c14      	cmp	r4, #20
    debc:	f47f af10 	bne.w	dce0 <am_hal_gpio_pinconfig+0x40>
    dec0:	4815      	ldr	r0, [pc, #84]	; (df18 <am_hal_gpio_pinconfig+0x278>)
    dec2:	e7a9      	b.n	de18 <am_hal_gpio_pinconfig+0x178>
    dec4:	4815      	ldr	r0, [pc, #84]	; (df1c <am_hal_gpio_pinconfig+0x27c>)
    dec6:	e7a7      	b.n	de18 <am_hal_gpio_pinconfig+0x178>
    dec8:	2200      	movs	r2, #0
    deca:	00a6      	lsls	r6, r4, #2
    decc:	0052      	lsls	r2, r2, #1
    dece:	f3c1 5040 	ubfx	r0, r1, #21, #1
    ded2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
    ded6:	f04f 0800 	mov.w	r8, #0
    deda:	e743      	b.n	dd64 <am_hal_gpio_pinconfig+0xc4>
    dedc:	2201      	movs	r2, #1
    dede:	e7f5      	b.n	decc <am_hal_gpio_pinconfig+0x22c>
    dee0:	2202      	movs	r2, #2
    dee2:	e7f3      	b.n	decc <am_hal_gpio_pinconfig+0x22c>
    dee4:	2203      	movs	r2, #3
    dee6:	e7f1      	b.n	decc <am_hal_gpio_pinconfig+0x22c>
    dee8:	0000ef28 	.word	0x0000ef28
    deec:	0000ef5c 	.word	0x0000ef5c
    def0:	0000f058 	.word	0x0000f058
    def4:	0000ef20 	.word	0x0000ef20
    def8:	40010040 	.word	0x40010040
    defc:	400100e0 	.word	0x400100e0
    df00:	400100b4 	.word	0x400100b4
    df04:	40010000 	.word	0x40010000
    df08:	0000ef90 	.word	0x0000ef90
    df0c:	08000104 	.word	0x08000104
    df10:	08000102 	.word	0x08000102
    df14:	08000101 	.word	0x08000101
    df18:	08000100 	.word	0x08000100
    df1c:	08000103 	.word	0x08000103

0000df20 <am_hal_gpio_interrupt_enable>:
    df20:	b570      	push	{r4, r5, r6, lr}
    df22:	0c8b      	lsrs	r3, r1, #18
    df24:	2500      	movs	r5, #0
    df26:	462a      	mov	r2, r5
    df28:	049b      	lsls	r3, r3, #18
    df2a:	4313      	orrs	r3, r2
    df2c:	b082      	sub	sp, #8
    df2e:	d115      	bne.n	df5c <am_hal_gpio_interrupt_enable+0x3c>
    df30:	460c      	mov	r4, r1
    df32:	4606      	mov	r6, r0
    df34:	f000 f860 	bl	dff8 <am_hal_interrupt_master_disable>
    df38:	4b0a      	ldr	r3, [pc, #40]	; (df64 <am_hal_gpio_interrupt_enable+0x44>)
    df3a:	9001      	str	r0, [sp, #4]
    df3c:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    df40:	4330      	orrs	r0, r6
    df42:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    df46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    df4a:	430c      	orrs	r4, r1
    df4c:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    df50:	9801      	ldr	r0, [sp, #4]
    df52:	f000 f855 	bl	e000 <am_hal_interrupt_master_set>
    df56:	4628      	mov	r0, r5
    df58:	b002      	add	sp, #8
    df5a:	bd70      	pop	{r4, r5, r6, pc}
    df5c:	2005      	movs	r0, #5
    df5e:	b002      	add	sp, #8
    df60:	bd70      	pop	{r4, r5, r6, pc}
    df62:	bf00      	nop
    df64:	40010000 	.word	0x40010000

0000df68 <am_hal_gpio_interrupt_disable>:
    df68:	b570      	push	{r4, r5, r6, lr}
    df6a:	0c8b      	lsrs	r3, r1, #18
    df6c:	2500      	movs	r5, #0
    df6e:	462a      	mov	r2, r5
    df70:	049b      	lsls	r3, r3, #18
    df72:	4313      	orrs	r3, r2
    df74:	b082      	sub	sp, #8
    df76:	d117      	bne.n	dfa8 <am_hal_gpio_interrupt_disable+0x40>
    df78:	460c      	mov	r4, r1
    df7a:	4606      	mov	r6, r0
    df7c:	f000 f83c 	bl	dff8 <am_hal_interrupt_master_disable>
    df80:	4b0b      	ldr	r3, [pc, #44]	; (dfb0 <am_hal_gpio_interrupt_disable+0x48>)
    df82:	9001      	str	r0, [sp, #4]
    df84:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    df88:	ea20 0006 	bic.w	r0, r0, r6
    df8c:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    df90:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    df94:	ea21 0404 	bic.w	r4, r1, r4
    df98:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    df9c:	9801      	ldr	r0, [sp, #4]
    df9e:	f000 f82f 	bl	e000 <am_hal_interrupt_master_set>
    dfa2:	4628      	mov	r0, r5
    dfa4:	b002      	add	sp, #8
    dfa6:	bd70      	pop	{r4, r5, r6, pc}
    dfa8:	2005      	movs	r0, #5
    dfaa:	b002      	add	sp, #8
    dfac:	bd70      	pop	{r4, r5, r6, pc}
    dfae:	bf00      	nop
    dfb0:	40010000 	.word	0x40010000

0000dfb4 <am_hal_gpio_interrupt_clear>:
    dfb4:	b570      	push	{r4, r5, r6, lr}
    dfb6:	0c8b      	lsrs	r3, r1, #18
    dfb8:	2500      	movs	r5, #0
    dfba:	462a      	mov	r2, r5
    dfbc:	049b      	lsls	r3, r3, #18
    dfbe:	4313      	orrs	r3, r2
    dfc0:	b082      	sub	sp, #8
    dfc2:	d10f      	bne.n	dfe4 <am_hal_gpio_interrupt_clear+0x30>
    dfc4:	460c      	mov	r4, r1
    dfc6:	4606      	mov	r6, r0
    dfc8:	f000 f816 	bl	dff8 <am_hal_interrupt_master_disable>
    dfcc:	4b07      	ldr	r3, [pc, #28]	; (dfec <am_hal_gpio_interrupt_clear+0x38>)
    dfce:	9001      	str	r0, [sp, #4]
    dfd0:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    dfd4:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
    dfd8:	9801      	ldr	r0, [sp, #4]
    dfda:	f000 f811 	bl	e000 <am_hal_interrupt_master_set>
    dfde:	4628      	mov	r0, r5
    dfe0:	b002      	add	sp, #8
    dfe2:	bd70      	pop	{r4, r5, r6, pc}
    dfe4:	2005      	movs	r0, #5
    dfe6:	b002      	add	sp, #8
    dfe8:	bd70      	pop	{r4, r5, r6, pc}
    dfea:	bf00      	nop
    dfec:	40010000 	.word	0x40010000

0000dff0 <am_hal_interrupt_master_enable>:
    dff0:	f3ef 8010 	mrs	r0, PRIMASK
    dff4:	b662      	cpsie	i
    dff6:	4770      	bx	lr

0000dff8 <am_hal_interrupt_master_disable>:
    dff8:	f3ef 8010 	mrs	r0, PRIMASK
    dffc:	b672      	cpsid	i
    dffe:	4770      	bx	lr

0000e000 <am_hal_interrupt_master_set>:
    e000:	f380 8810 	msr	PRIMASK, r0
    e004:	4770      	bx	lr
    e006:	bf00      	nop

0000e008 <am_hal_pwrctrl_periph_enable>:
    e008:	b570      	push	{r4, r5, r6, lr}
    e00a:	b082      	sub	sp, #8
    e00c:	4604      	mov	r4, r0
    e00e:	f7ff fff3 	bl	dff8 <am_hal_interrupt_master_disable>
    e012:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e016:	4e0f      	ldr	r6, [pc, #60]	; (e054 <am_hal_pwrctrl_periph_enable+0x4c>)
    e018:	4d0f      	ldr	r5, [pc, #60]	; (e058 <am_hal_pwrctrl_periph_enable+0x50>)
    e01a:	9001      	str	r0, [sp, #4]
    e01c:	00a4      	lsls	r4, r4, #2
    e01e:	68b3      	ldr	r3, [r6, #8]
    e020:	592a      	ldr	r2, [r5, r4]
    e022:	4313      	orrs	r3, r2
    e024:	60b3      	str	r3, [r6, #8]
    e026:	9801      	ldr	r0, [sp, #4]
    e028:	442c      	add	r4, r5
    e02a:	f7ff ffe9 	bl	e000 <am_hal_interrupt_master_set>
    e02e:	20a0      	movs	r0, #160	; 0xa0
    e030:	f7ff fde6 	bl	dc00 <am_hal_flash_delay>
    e034:	69b3      	ldr	r3, [r6, #24]
    e036:	6864      	ldr	r4, [r4, #4]
    e038:	4223      	tst	r3, r4
    e03a:	d103      	bne.n	e044 <am_hal_pwrctrl_periph_enable+0x3c>
    e03c:	20a0      	movs	r0, #160	; 0xa0
    e03e:	f7ff fddf 	bl	dc00 <am_hal_flash_delay>
    e042:	69b3      	ldr	r3, [r6, #24]
    e044:	4b03      	ldr	r3, [pc, #12]	; (e054 <am_hal_pwrctrl_periph_enable+0x4c>)
    e046:	699b      	ldr	r3, [r3, #24]
    e048:	4223      	tst	r3, r4
    e04a:	bf0c      	ite	eq
    e04c:	2001      	moveq	r0, #1
    e04e:	2000      	movne	r0, #0
    e050:	b002      	add	sp, #8
    e052:	bd70      	pop	{r4, r5, r6, pc}
    e054:	40021000 	.word	0x40021000
    e058:	0000f08c 	.word	0x0000f08c

0000e05c <am_hal_pwrctrl_periph_disable>:
    e05c:	b570      	push	{r4, r5, r6, lr}
    e05e:	b082      	sub	sp, #8
    e060:	4604      	mov	r4, r0
    e062:	f7ff ffc9 	bl	dff8 <am_hal_interrupt_master_disable>
    e066:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e06a:	4e10      	ldr	r6, [pc, #64]	; (e0ac <am_hal_pwrctrl_periph_disable+0x50>)
    e06c:	4d10      	ldr	r5, [pc, #64]	; (e0b0 <am_hal_pwrctrl_periph_disable+0x54>)
    e06e:	9001      	str	r0, [sp, #4]
    e070:	00a4      	lsls	r4, r4, #2
    e072:	68b3      	ldr	r3, [r6, #8]
    e074:	592a      	ldr	r2, [r5, r4]
    e076:	ea23 0302 	bic.w	r3, r3, r2
    e07a:	60b3      	str	r3, [r6, #8]
    e07c:	9801      	ldr	r0, [sp, #4]
    e07e:	442c      	add	r4, r5
    e080:	f7ff ffbe 	bl	e000 <am_hal_interrupt_master_set>
    e084:	20a0      	movs	r0, #160	; 0xa0
    e086:	f7ff fdbb 	bl	dc00 <am_hal_flash_delay>
    e08a:	69b3      	ldr	r3, [r6, #24]
    e08c:	6864      	ldr	r4, [r4, #4]
    e08e:	4223      	tst	r3, r4
    e090:	d003      	beq.n	e09a <am_hal_pwrctrl_periph_disable+0x3e>
    e092:	20a0      	movs	r0, #160	; 0xa0
    e094:	f7ff fdb4 	bl	dc00 <am_hal_flash_delay>
    e098:	69b3      	ldr	r3, [r6, #24]
    e09a:	4b04      	ldr	r3, [pc, #16]	; (e0ac <am_hal_pwrctrl_periph_disable+0x50>)
    e09c:	699b      	ldr	r3, [r3, #24]
    e09e:	4223      	tst	r3, r4
    e0a0:	bf14      	ite	ne
    e0a2:	2001      	movne	r0, #1
    e0a4:	2000      	moveq	r0, #0
    e0a6:	b002      	add	sp, #8
    e0a8:	bd70      	pop	{r4, r5, r6, pc}
    e0aa:	bf00      	nop
    e0ac:	40021000 	.word	0x40021000
    e0b0:	0000f08c 	.word	0x0000f08c

0000e0b4 <am_hal_pwrctrl_blebuck_trim>:
    e0b4:	b510      	push	{r4, lr}
    e0b6:	4c12      	ldr	r4, [pc, #72]	; (e100 <am_hal_pwrctrl_blebuck_trim+0x4c>)
    e0b8:	68e3      	ldr	r3, [r4, #12]
    e0ba:	b2db      	uxtb	r3, r3
    e0bc:	2b11      	cmp	r3, #17
    e0be:	b082      	sub	sp, #8
    e0c0:	d801      	bhi.n	e0c6 <am_hal_pwrctrl_blebuck_trim+0x12>
    e0c2:	b002      	add	sp, #8
    e0c4:	bd10      	pop	{r4, pc}
    e0c6:	f7ff ff97 	bl	dff8 <am_hal_interrupt_master_disable>
    e0ca:	9001      	str	r0, [sp, #4]
    e0cc:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e0d0:	2219      	movs	r2, #25
    e0d2:	f362 138b 	bfi	r3, r2, #6, #6
    e0d6:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e0da:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e0de:	230c      	movs	r3, #12
    e0e0:	f363 0205 	bfi	r2, r3, #0, #6
    e0e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e0e8:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e0ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e0ee:	f36f 5296 	bfc	r2, #22, #1
    e0f2:	63da      	str	r2, [r3, #60]	; 0x3c
    e0f4:	9801      	ldr	r0, [sp, #4]
    e0f6:	b002      	add	sp, #8
    e0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0fc:	f7ff bf80 	b.w	e000 <am_hal_interrupt_master_set>
    e100:	40020000 	.word	0x40020000

0000e104 <am_hal_reset_control>:
    e104:	2803      	cmp	r0, #3
    e106:	d819      	bhi.n	e13c <am_hal_reset_control+0x38>
    e108:	e8df f000 	tbb	[pc, r0]
    e10c:	02140e08 	.word	0x02140e08
    e110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e114:	2201      	movs	r2, #1
    e116:	615a      	str	r2, [r3, #20]
    e118:	2000      	movs	r0, #0
    e11a:	4770      	bx	lr
    e11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e120:	22d4      	movs	r2, #212	; 0xd4
    e122:	609a      	str	r2, [r3, #8]
    e124:	2000      	movs	r0, #0
    e126:	4770      	bx	lr
    e128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e12c:	221b      	movs	r2, #27
    e12e:	605a      	str	r2, [r3, #4]
    e130:	2000      	movs	r0, #0
    e132:	4770      	bx	lr
    e134:	4b02      	ldr	r3, [pc, #8]	; (e140 <am_hal_reset_control+0x3c>)
    e136:	2000      	movs	r0, #0
    e138:	6018      	str	r0, [r3, #0]
    e13a:	4770      	bx	lr
    e13c:	2006      	movs	r0, #6
    e13e:	4770      	bx	lr
    e140:	4ffff000 	.word	0x4ffff000

0000e144 <am_hal_stimer_config>:
    e144:	4a03      	ldr	r2, [pc, #12]	; (e154 <am_hal_stimer_config+0x10>)
    e146:	4603      	mov	r3, r0
    e148:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e14c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e150:	4770      	bx	lr
    e152:	bf00      	nop
    e154:	40008000 	.word	0x40008000

0000e158 <am_hal_stimer_counter_get>:
    e158:	4b01      	ldr	r3, [pc, #4]	; (e160 <am_hal_stimer_counter_get+0x8>)
    e15a:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    e15e:	4770      	bx	lr
    e160:	40008000 	.word	0x40008000

0000e164 <am_hal_stimer_int_enable>:
    e164:	4a03      	ldr	r2, [pc, #12]	; (e174 <am_hal_stimer_int_enable+0x10>)
    e166:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e16a:	4318      	orrs	r0, r3
    e16c:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e170:	4770      	bx	lr
    e172:	bf00      	nop
    e174:	40008000 	.word	0x40008000

0000e178 <am_hal_stimer_int_disable>:
    e178:	4a03      	ldr	r2, [pc, #12]	; (e188 <am_hal_stimer_int_disable+0x10>)
    e17a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e17e:	ea23 0000 	bic.w	r0, r3, r0
    e182:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e186:	4770      	bx	lr
    e188:	40008000 	.word	0x40008000

0000e18c <am_hal_stimer_int_clear>:
    e18c:	4b01      	ldr	r3, [pc, #4]	; (e194 <am_hal_stimer_int_clear+0x8>)
    e18e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e192:	4770      	bx	lr
    e194:	40008000 	.word	0x40008000

0000e198 <am_hal_sysctrl_sleep>:
    e198:	b510      	push	{r4, lr}
    e19a:	b082      	sub	sp, #8
    e19c:	4604      	mov	r4, r0
    e19e:	f7ff ff2b 	bl	dff8 <am_hal_interrupt_master_disable>
    e1a2:	9001      	str	r0, [sp, #4]
    e1a4:	b124      	cbz	r4, e1b0 <am_hal_sysctrl_sleep+0x18>
    e1a6:	4b12      	ldr	r3, [pc, #72]	; (e1f0 <am_hal_sysctrl_sleep+0x58>)
    e1a8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e1ac:	07db      	lsls	r3, r3, #31
    e1ae:	d513      	bpl.n	e1d8 <am_hal_sysctrl_sleep+0x40>
    e1b0:	4a10      	ldr	r2, [pc, #64]	; (e1f4 <am_hal_sysctrl_sleep+0x5c>)
    e1b2:	6913      	ldr	r3, [r2, #16]
    e1b4:	f023 0304 	bic.w	r3, r3, #4
    e1b8:	6113      	str	r3, [r2, #16]
    e1ba:	f3bf 8f4f 	dsb	sy
    e1be:	4a0e      	ldr	r2, [pc, #56]	; (e1f8 <am_hal_sysctrl_sleep+0x60>)
    e1c0:	4b0e      	ldr	r3, [pc, #56]	; (e1fc <am_hal_sysctrl_sleep+0x64>)
    e1c2:	6812      	ldr	r2, [r2, #0]
    e1c4:	601a      	str	r2, [r3, #0]
    e1c6:	bf30      	wfi
    e1c8:	f3bf 8f6f 	isb	sy
    e1cc:	9801      	ldr	r0, [sp, #4]
    e1ce:	b002      	add	sp, #8
    e1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1d4:	f7ff bf14 	b.w	e000 <am_hal_interrupt_master_set>
    e1d8:	4b09      	ldr	r3, [pc, #36]	; (e200 <am_hal_sysctrl_sleep+0x68>)
    e1da:	681a      	ldr	r2, [r3, #0]
    e1dc:	b912      	cbnz	r2, e1e4 <am_hal_sysctrl_sleep+0x4c>
    e1de:	4a09      	ldr	r2, [pc, #36]	; (e204 <am_hal_sysctrl_sleep+0x6c>)
    e1e0:	6812      	ldr	r2, [r2, #0]
    e1e2:	601a      	str	r2, [r3, #0]
    e1e4:	4a03      	ldr	r2, [pc, #12]	; (e1f4 <am_hal_sysctrl_sleep+0x5c>)
    e1e6:	6913      	ldr	r3, [r2, #16]
    e1e8:	f043 0304 	orr.w	r3, r3, #4
    e1ec:	6113      	str	r3, [r2, #16]
    e1ee:	e7e4      	b.n	e1ba <am_hal_sysctrl_sleep+0x22>
    e1f0:	40020000 	.word	0x40020000
    e1f4:	e000ed00 	.word	0xe000ed00
    e1f8:	5fff0000 	.word	0x5fff0000
    e1fc:	10000a70 	.word	0x10000a70
    e200:	10000a6c 	.word	0x10000a6c
    e204:	4ffff000 	.word	0x4ffff000

0000e208 <am_hal_uart_initialize>:
    e208:	2801      	cmp	r0, #1
    e20a:	d819      	bhi.n	e240 <am_hal_uart_initialize+0x38>
    e20c:	b1e9      	cbz	r1, e24a <am_hal_uart_initialize+0x42>
    e20e:	b4f0      	push	{r4, r5, r6, r7}
    e210:	2264      	movs	r2, #100	; 0x64
    e212:	4d0f      	ldr	r5, [pc, #60]	; (e250 <am_hal_uart_initialize+0x48>)
    e214:	fb02 f200 	mul.w	r2, r2, r0
    e218:	18ac      	adds	r4, r5, r2
    e21a:	78e3      	ldrb	r3, [r4, #3]
    e21c:	f3c3 0700 	ubfx	r7, r3, #0, #1
    e220:	f013 0301 	ands.w	r3, r3, #1
    e224:	d10e      	bne.n	e244 <am_hal_uart_initialize+0x3c>
    e226:	6260      	str	r0, [r4, #36]	; 0x24
    e228:	58ae      	ldr	r6, [r5, r2]
    e22a:	480a      	ldr	r0, [pc, #40]	; (e254 <am_hal_uart_initialize+0x4c>)
    e22c:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
    e230:	4330      	orrs	r0, r6
    e232:	50a8      	str	r0, [r5, r2]
    e234:	7127      	strb	r7, [r4, #4]
    e236:	6623      	str	r3, [r4, #96]	; 0x60
    e238:	4618      	mov	r0, r3
    e23a:	600c      	str	r4, [r1, #0]
    e23c:	bcf0      	pop	{r4, r5, r6, r7}
    e23e:	4770      	bx	lr
    e240:	2005      	movs	r0, #5
    e242:	4770      	bx	lr
    e244:	2007      	movs	r0, #7
    e246:	bcf0      	pop	{r4, r5, r6, r7}
    e248:	4770      	bx	lr
    e24a:	2006      	movs	r0, #6
    e24c:	4770      	bx	lr
    e24e:	bf00      	nop
    e250:	10000a78 	.word	0x10000a78
    e254:	01ea9e06 	.word	0x01ea9e06

0000e258 <am_hal_uart_power_control>:
    e258:	b5f0      	push	{r4, r5, r6, r7, lr}
    e25a:	4604      	mov	r4, r0
    e25c:	6800      	ldr	r0, [r0, #0]
    e25e:	4b39      	ldr	r3, [pc, #228]	; (e344 <am_hal_uart_power_control+0xec>)
    e260:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e264:	429e      	cmp	r6, r3
    e266:	b085      	sub	sp, #20
    e268:	d13f      	bne.n	e2ea <am_hal_uart_power_control+0x92>
    e26a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e26c:	f105 0008 	add.w	r0, r5, #8
    e270:	b2c7      	uxtb	r7, r0
    e272:	b1a1      	cbz	r1, e29e <am_hal_uart_power_control+0x46>
    e274:	3901      	subs	r1, #1
    e276:	2901      	cmp	r1, #1
    e278:	d80e      	bhi.n	e298 <am_hal_uart_power_control+0x40>
    e27a:	2a00      	cmp	r2, #0
    e27c:	d138      	bne.n	e2f0 <am_hal_uart_power_control+0x98>
    e27e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e282:	351c      	adds	r5, #28
    e284:	032d      	lsls	r5, r5, #12
    e286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e28a:	646b      	str	r3, [r5, #68]	; 0x44
    e28c:	4638      	mov	r0, r7
    e28e:	f7ff fee5 	bl	e05c <am_hal_pwrctrl_periph_disable>
    e292:	2000      	movs	r0, #0
    e294:	b005      	add	sp, #20
    e296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e298:	2006      	movs	r0, #6
    e29a:	b005      	add	sp, #20
    e29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e29e:	2a00      	cmp	r2, #0
    e2a0:	d047      	beq.n	e332 <am_hal_uart_power_control+0xda>
    e2a2:	7923      	ldrb	r3, [r4, #4]
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d04b      	beq.n	e340 <am_hal_uart_power_control+0xe8>
    e2a8:	4638      	mov	r0, r7
    e2aa:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e2ae:	9101      	str	r1, [sp, #4]
    e2b0:	351c      	adds	r5, #28
    e2b2:	f7ff fea9 	bl	e008 <am_hal_pwrctrl_periph_enable>
    e2b6:	f7ff fe9f 	bl	dff8 <am_hal_interrupt_master_disable>
    e2ba:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
    e2be:	032d      	lsls	r5, r5, #12
    e2c0:	9002      	str	r0, [sp, #8]
    e2c2:	6922      	ldr	r2, [r4, #16]
    e2c4:	622b      	str	r3, [r5, #32]
    e2c6:	6963      	ldr	r3, [r4, #20]
    e2c8:	69a0      	ldr	r0, [r4, #24]
    e2ca:	626e      	str	r6, [r5, #36]	; 0x24
    e2cc:	62aa      	str	r2, [r5, #40]	; 0x28
    e2ce:	69e2      	ldr	r2, [r4, #28]
    e2d0:	62eb      	str	r3, [r5, #44]	; 0x2c
    e2d2:	6a23      	ldr	r3, [r4, #32]
    e2d4:	9901      	ldr	r1, [sp, #4]
    e2d6:	6328      	str	r0, [r5, #48]	; 0x30
    e2d8:	636a      	str	r2, [r5, #52]	; 0x34
    e2da:	63ab      	str	r3, [r5, #56]	; 0x38
    e2dc:	9802      	ldr	r0, [sp, #8]
    e2de:	7121      	strb	r1, [r4, #4]
    e2e0:	f7ff fe8e 	bl	e000 <am_hal_interrupt_master_set>
    e2e4:	9901      	ldr	r1, [sp, #4]
    e2e6:	4608      	mov	r0, r1
    e2e8:	e7d7      	b.n	e29a <am_hal_uart_power_control+0x42>
    e2ea:	2002      	movs	r0, #2
    e2ec:	b005      	add	sp, #20
    e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2f0:	f7ff fe82 	bl	dff8 <am_hal_interrupt_master_disable>
    e2f4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e2f8:	351c      	adds	r5, #28
    e2fa:	032d      	lsls	r5, r5, #12
    e2fc:	9003      	str	r0, [sp, #12]
    e2fe:	6a2a      	ldr	r2, [r5, #32]
    e300:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e302:	60a2      	str	r2, [r4, #8]
    e304:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e306:	60e3      	str	r3, [r4, #12]
    e308:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e30a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e30c:	6163      	str	r3, [r4, #20]
    e30e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e310:	6122      	str	r2, [r4, #16]
    e312:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e314:	61e3      	str	r3, [r4, #28]
    e316:	2301      	movs	r3, #1
    e318:	7123      	strb	r3, [r4, #4]
    e31a:	9803      	ldr	r0, [sp, #12]
    e31c:	61a1      	str	r1, [r4, #24]
    e31e:	6222      	str	r2, [r4, #32]
    e320:	f7ff fe6e 	bl	e000 <am_hal_interrupt_master_set>
    e324:	6823      	ldr	r3, [r4, #0]
    e326:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e32a:	42b3      	cmp	r3, r6
    e32c:	d1ae      	bne.n	e28c <am_hal_uart_power_control+0x34>
    e32e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e330:	e7a5      	b.n	e27e <am_hal_uart_power_control+0x26>
    e332:	4638      	mov	r0, r7
    e334:	9201      	str	r2, [sp, #4]
    e336:	f7ff fe67 	bl	e008 <am_hal_pwrctrl_periph_enable>
    e33a:	9a01      	ldr	r2, [sp, #4]
    e33c:	4610      	mov	r0, r2
    e33e:	e7ac      	b.n	e29a <am_hal_uart_power_control+0x42>
    e340:	2007      	movs	r0, #7
    e342:	e7aa      	b.n	e29a <am_hal_uart_power_control+0x42>
    e344:	01ea9e06 	.word	0x01ea9e06

0000e348 <am_hal_uart_configure>:
    e348:	6803      	ldr	r3, [r0, #0]
    e34a:	4a78      	ldr	r2, [pc, #480]	; (e52c <am_hal_uart_configure+0x1e4>)
    e34c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e350:	4293      	cmp	r3, r2
    e352:	d001      	beq.n	e358 <am_hal_uart_configure+0x10>
    e354:	2002      	movs	r0, #2
    e356:	4770      	bx	lr
    e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e35c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e35e:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e362:	341c      	adds	r4, #28
    e364:	0324      	lsls	r4, r4, #12
    e366:	2700      	movs	r7, #0
    e368:	b084      	sub	sp, #16
    e36a:	6327      	str	r7, [r4, #48]	; 0x30
    e36c:	460e      	mov	r6, r1
    e36e:	4605      	mov	r5, r0
    e370:	f7ff fe42 	bl	dff8 <am_hal_interrupt_master_disable>
    e374:	9001      	str	r0, [sp, #4]
    e376:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e378:	f043 0308 	orr.w	r3, r3, #8
    e37c:	8623      	strh	r3, [r4, #48]	; 0x30
    e37e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e380:	2201      	movs	r2, #1
    e382:	f362 1306 	bfi	r3, r2, #4, #3
    e386:	8623      	strh	r3, [r4, #48]	; 0x30
    e388:	9801      	ldr	r0, [sp, #4]
    e38a:	f7ff fe39 	bl	e000 <am_hal_interrupt_master_set>
    e38e:	f7ff fe33 	bl	dff8 <am_hal_interrupt_master_disable>
    e392:	9002      	str	r0, [sp, #8]
    e394:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e396:	f367 0300 	bfi	r3, r7, #0, #1
    e39a:	8623      	strh	r3, [r4, #48]	; 0x30
    e39c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e39e:	f367 2349 	bfi	r3, r7, #9, #1
    e3a2:	8623      	strh	r3, [r4, #48]	; 0x30
    e3a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e3a6:	f367 2308 	bfi	r3, r7, #8, #1
    e3aa:	8623      	strh	r3, [r4, #48]	; 0x30
    e3ac:	9802      	ldr	r0, [sp, #8]
    e3ae:	f7ff fe27 	bl	e000 <am_hal_interrupt_master_set>
    e3b2:	4b5f      	ldr	r3, [pc, #380]	; (e530 <am_hal_uart_configure+0x1e8>)
    e3b4:	6832      	ldr	r2, [r6, #0]
    e3b6:	68db      	ldr	r3, [r3, #12]
    e3b8:	b2db      	uxtb	r3, r3
    e3ba:	2b12      	cmp	r3, #18
    e3bc:	d076      	beq.n	e4ac <am_hal_uart_configure+0x164>
    e3be:	4b5c      	ldr	r3, [pc, #368]	; (e530 <am_hal_uart_configure+0x1e8>)
    e3c0:	68db      	ldr	r3, [r3, #12]
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	2b20      	cmp	r3, #32
    e3c6:	d902      	bls.n	e3ce <am_hal_uart_configure+0x86>
    e3c8:	4b5a      	ldr	r3, [pc, #360]	; (e534 <am_hal_uart_configure+0x1ec>)
    e3ca:	429a      	cmp	r2, r3
    e3cc:	d871      	bhi.n	e4b2 <am_hal_uart_configure+0x16a>
    e3ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e3d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e3d4:	3b01      	subs	r3, #1
    e3d6:	b2db      	uxtb	r3, r3
    e3d8:	2b03      	cmp	r3, #3
    e3da:	d86c      	bhi.n	e4b6 <am_hal_uart_configure+0x16e>
    e3dc:	4956      	ldr	r1, [pc, #344]	; (e538 <am_hal_uart_configure+0x1f0>)
    e3de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e3e2:	0112      	lsls	r2, r2, #4
    e3e4:	4291      	cmp	r1, r2
    e3e6:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e3ea:	fbb1 f0f2 	udiv	r0, r1, r2
    e3ee:	fbb3 f3f2 	udiv	r3, r3, r2
    e3f2:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e3f6:	d364      	bcc.n	e4c2 <am_hal_uart_configure+0x17a>
    e3f8:	089a      	lsrs	r2, r3, #2
    e3fa:	6260      	str	r0, [r4, #36]	; 0x24
    e3fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    e400:	6260      	str	r0, [r4, #36]	; 0x24
    e402:	fbb1 f1f2 	udiv	r1, r1, r2
    e406:	62a3      	str	r3, [r4, #40]	; 0x28
    e408:	6629      	str	r1, [r5, #96]	; 0x60
    e40a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e40c:	f36f 338e 	bfc	r3, #14, #1
    e410:	8623      	strh	r3, [r4, #48]	; 0x30
    e412:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e414:	f36f 33cf 	bfc	r3, #15, #1
    e418:	8623      	strh	r3, [r4, #48]	; 0x30
    e41a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    e41e:	6873      	ldr	r3, [r6, #4]
    e420:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e422:	430b      	orrs	r3, r1
    e424:	6931      	ldr	r1, [r6, #16]
    e426:	4303      	orrs	r3, r0
    e428:	430a      	orrs	r2, r1
    e42a:	f043 0310 	orr.w	r3, r3, #16
    e42e:	6971      	ldr	r1, [r6, #20]
    e430:	6322      	str	r2, [r4, #48]	; 0x30
    e432:	6361      	str	r1, [r4, #52]	; 0x34
    e434:	62e3      	str	r3, [r4, #44]	; 0x2c
    e436:	f7ff fddf 	bl	dff8 <am_hal_interrupt_master_disable>
    e43a:	9003      	str	r0, [sp, #12]
    e43c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e43e:	f043 0301 	orr.w	r3, r3, #1
    e442:	8623      	strh	r3, [r4, #48]	; 0x30
    e444:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e44a:	8623      	strh	r3, [r4, #48]	; 0x30
    e44c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e44e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e452:	8623      	strh	r3, [r4, #48]	; 0x30
    e454:	9803      	ldr	r0, [sp, #12]
    e456:	f7ff fdd3 	bl	e000 <am_hal_interrupt_master_set>
    e45a:	682a      	ldr	r2, [r5, #0]
    e45c:	4b33      	ldr	r3, [pc, #204]	; (e52c <am_hal_uart_configure+0x1e4>)
    e45e:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e462:	4598      	cmp	r8, r3
    e464:	d11e      	bne.n	e4a4 <am_hal_uart_configure+0x15c>
    e466:	69b1      	ldr	r1, [r6, #24]
    e468:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e46c:	b109      	cbz	r1, e472 <am_hal_uart_configure+0x12a>
    e46e:	69f3      	ldr	r3, [r6, #28]
    e470:	bb5b      	cbnz	r3, e4ca <am_hal_uart_configure+0x182>
    e472:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e474:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e478:	331c      	adds	r3, #28
    e47a:	031b      	lsls	r3, r3, #12
    e47c:	2100      	movs	r1, #0
    e47e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e480:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
    e484:	f022 0220 	bic.w	r2, r2, #32
    e488:	639a      	str	r2, [r3, #56]	; 0x38
    e48a:	b10c      	cbz	r4, e490 <am_hal_uart_configure+0x148>
    e48c:	2f00      	cmp	r7, #0
    e48e:	d132      	bne.n	e4f6 <am_hal_uart_configure+0x1ae>
    e490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e492:	2000      	movs	r0, #0
    e494:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e498:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e49c:	639a      	str	r2, [r3, #56]	; 0x38
    e49e:	b004      	add	sp, #16
    e4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4a4:	2000      	movs	r0, #0
    e4a6:	b004      	add	sp, #16
    e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ac:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e4b0:	d985      	bls.n	e3be <am_hal_uart_configure+0x76>
    e4b2:	4822      	ldr	r0, [pc, #136]	; (e53c <am_hal_uart_configure+0x1f4>)
    e4b4:	e7f3      	b.n	e49e <am_hal_uart_configure+0x156>
    e4b6:	4822      	ldr	r0, [pc, #136]	; (e540 <am_hal_uart_configure+0x1f8>)
    e4b8:	2300      	movs	r3, #0
    e4ba:	662b      	str	r3, [r5, #96]	; 0x60
    e4bc:	b004      	add	sp, #16
    e4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4c2:	2300      	movs	r3, #0
    e4c4:	481d      	ldr	r0, [pc, #116]	; (e53c <am_hal_uart_configure+0x1f4>)
    e4c6:	662b      	str	r3, [r5, #96]	; 0x60
    e4c8:	e7e9      	b.n	e49e <am_hal_uart_configure+0x156>
    e4ca:	2201      	movs	r2, #1
    e4cc:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e4d0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e4d4:	f000 fb18 	bl	eb08 <am_hal_queue_init>
    e4d8:	682b      	ldr	r3, [r5, #0]
    e4da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4de:	4543      	cmp	r3, r8
    e4e0:	d1e0      	bne.n	e4a4 <am_hal_uart_configure+0x15c>
    e4e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e4e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e4e8:	331c      	adds	r3, #28
    e4ea:	031b      	lsls	r3, r3, #12
    e4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4ee:	f042 0220 	orr.w	r2, r2, #32
    e4f2:	639a      	str	r2, [r3, #56]	; 0x38
    e4f4:	e7c9      	b.n	e48a <am_hal_uart_configure+0x142>
    e4f6:	2201      	movs	r2, #1
    e4f8:	463b      	mov	r3, r7
    e4fa:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e4fe:	4621      	mov	r1, r4
    e500:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e504:	f000 fb00 	bl	eb08 <am_hal_queue_init>
    e508:	682b      	ldr	r3, [r5, #0]
    e50a:	4a08      	ldr	r2, [pc, #32]	; (e52c <am_hal_uart_configure+0x1e4>)
    e50c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e510:	4293      	cmp	r3, r2
    e512:	d1c7      	bne.n	e4a4 <am_hal_uart_configure+0x15c>
    e514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e516:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e51a:	331c      	adds	r3, #28
    e51c:	031b      	lsls	r3, r3, #12
    e51e:	2000      	movs	r0, #0
    e520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e522:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e526:	639a      	str	r2, [r3, #56]	; 0x38
    e528:	e7b9      	b.n	e49e <am_hal_uart_configure+0x156>
    e52a:	bf00      	nop
    e52c:	01ea9e06 	.word	0x01ea9e06
    e530:	40020000 	.word	0x40020000
    e534:	0016e360 	.word	0x0016e360
    e538:	0000f140 	.word	0x0000f140
    e53c:	08000003 	.word	0x08000003
    e540:	08000002 	.word	0x08000002

0000e544 <am_hal_uart_transfer>:
    e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e548:	ed2d 8b02 	vpush	{d8}
    e54c:	680d      	ldr	r5, [r1, #0]
    e54e:	b091      	sub	sp, #68	; 0x44
    e550:	4604      	mov	r4, r0
    e552:	b14d      	cbz	r5, e568 <am_hal_uart_transfer+0x24>
    e554:	2d01      	cmp	r5, #1
    e556:	f000 8091 	beq.w	e67c <am_hal_uart_transfer+0x138>
    e55a:	2507      	movs	r5, #7
    e55c:	4628      	mov	r0, r5
    e55e:	b011      	add	sp, #68	; 0x44
    e560:	ecbd 8b02 	vpop	{d8}
    e564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e568:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e56c:	684b      	ldr	r3, [r1, #4]
    e56e:	690a      	ldr	r2, [r1, #16]
    e570:	688e      	ldr	r6, [r1, #8]
    e572:	9301      	str	r3, [sp, #4]
    e574:	9203      	str	r2, [sp, #12]
    e576:	f1b9 0f00 	cmp.w	r9, #0
    e57a:	f000 8113 	beq.w	e7a4 <am_hal_uart_transfer+0x260>
    e57e:	2e00      	cmp	r6, #0
    e580:	f000 8179 	beq.w	e876 <am_hal_uart_transfer+0x332>
    e584:	2800      	cmp	r0, #0
    e586:	f000 8168 	beq.w	e85a <am_hal_uart_transfer+0x316>
    e58a:	46aa      	mov	sl, r5
    e58c:	462f      	mov	r7, r5
    e58e:	9502      	str	r5, [sp, #8]
    e590:	4605      	mov	r5, r0
    e592:	4619      	mov	r1, r3
    e594:	682a      	ldr	r2, [r5, #0]
    e596:	4bb4      	ldr	r3, [pc, #720]	; (e868 <am_hal_uart_transfer+0x324>)
    e598:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e59c:	429a      	cmp	r2, r3
    e59e:	d12f      	bne.n	e600 <am_hal_uart_transfer+0xbc>
    e5a0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e5a4:	2a00      	cmp	r2, #0
    e5a6:	d133      	bne.n	e610 <am_hal_uart_transfer+0xcc>
    e5a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e5aa:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e5ae:	301c      	adds	r0, #28
    e5b0:	3901      	subs	r1, #1
    e5b2:	0300      	lsls	r0, r0, #12
    e5b4:	e005      	b.n	e5c2 <am_hal_uart_transfer+0x7e>
    e5b6:	3201      	adds	r2, #1
    e5b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e5bc:	6003      	str	r3, [r0, #0]
    e5be:	42b2      	cmp	r2, r6
    e5c0:	d023      	beq.n	e60a <am_hal_uart_transfer+0xc6>
    e5c2:	6983      	ldr	r3, [r0, #24]
    e5c4:	069c      	lsls	r4, r3, #26
    e5c6:	d5f6      	bpl.n	e5b6 <am_hal_uart_transfer+0x72>
    e5c8:	4417      	add	r7, r2
    e5ca:	1ab6      	subs	r6, r6, r2
    e5cc:	b936      	cbnz	r6, e5dc <am_hal_uart_transfer+0x98>
    e5ce:	9d02      	ldr	r5, [sp, #8]
    e5d0:	9b03      	ldr	r3, [sp, #12]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	f000 808d 	beq.w	e6f2 <am_hal_uart_transfer+0x1ae>
    e5d8:	601f      	str	r7, [r3, #0]
    e5da:	e7bf      	b.n	e55c <am_hal_uart_transfer+0x18>
    e5dc:	2010      	movs	r0, #16
    e5de:	f7ff fb0f 	bl	dc00 <am_hal_flash_delay>
    e5e2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e5e6:	bf18      	it	ne
    e5e8:	f10a 0a01 	addne.w	sl, sl, #1
    e5ec:	45d1      	cmp	r9, sl
    e5ee:	d9ee      	bls.n	e5ce <am_hal_uart_transfer+0x8a>
    e5f0:	9b01      	ldr	r3, [sp, #4]
    e5f2:	682a      	ldr	r2, [r5, #0]
    e5f4:	19d9      	adds	r1, r3, r7
    e5f6:	4b9c      	ldr	r3, [pc, #624]	; (e868 <am_hal_uart_transfer+0x324>)
    e5f8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e5fc:	429a      	cmp	r2, r3
    e5fe:	d0cf      	beq.n	e5a0 <am_hal_uart_transfer+0x5c>
    e600:	9b03      	ldr	r3, [sp, #12]
    e602:	b103      	cbz	r3, e606 <am_hal_uart_transfer+0xc2>
    e604:	601f      	str	r7, [r3, #0]
    e606:	2502      	movs	r5, #2
    e608:	e7a8      	b.n	e55c <am_hal_uart_transfer+0x18>
    e60a:	9d02      	ldr	r5, [sp, #8]
    e60c:	4417      	add	r7, r2
    e60e:	e7df      	b.n	e5d0 <am_hal_uart_transfer+0x8c>
    e610:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e614:	eba2 0b00 	sub.w	fp, r2, r0
    e618:	45b3      	cmp	fp, r6
    e61a:	bf28      	it	cs
    e61c:	46b3      	movcs	fp, r6
    e61e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e622:	465a      	mov	r2, fp
    e624:	4620      	mov	r0, r4
    e626:	f000 fa7b 	bl	eb20 <am_hal_queue_item_add>
    e62a:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    e62e:	f7ff fce3 	bl	dff8 <am_hal_interrupt_master_disable>
    e632:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
    e636:	f108 081c 	add.w	r8, r8, #28
    e63a:	ea4f 3808 	mov.w	r8, r8, lsl #12
    e63e:	9008      	str	r0, [sp, #32]
    e640:	e00d      	b.n	e65e <am_hal_uart_transfer+0x11a>
    e642:	f000 faab 	bl	eb9c <am_hal_queue_item_get>
    e646:	b190      	cbz	r0, e66e <am_hal_uart_transfer+0x12a>
    e648:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e64a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e64e:	331c      	adds	r3, #28
    e650:	031b      	lsls	r3, r3, #12
    e652:	699a      	ldr	r2, [r3, #24]
    e654:	0692      	lsls	r2, r2, #26
    e656:	bf5c      	itt	pl
    e658:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e65c:	601a      	strpl	r2, [r3, #0]
    e65e:	f8d8 3018 	ldr.w	r3, [r8, #24]
    e662:	069b      	lsls	r3, r3, #26
    e664:	f04f 0201 	mov.w	r2, #1
    e668:	a907      	add	r1, sp, #28
    e66a:	4620      	mov	r0, r4
    e66c:	d5e9      	bpl.n	e642 <am_hal_uart_transfer+0xfe>
    e66e:	9808      	ldr	r0, [sp, #32]
    e670:	445f      	add	r7, fp
    e672:	eba6 060b 	sub.w	r6, r6, fp
    e676:	f7ff fcc3 	bl	e000 <am_hal_interrupt_master_set>
    e67a:	e7a7      	b.n	e5cc <am_hal_uart_transfer+0x88>
    e67c:	68cd      	ldr	r5, [r1, #12]
    e67e:	690b      	ldr	r3, [r1, #16]
    e680:	9301      	str	r3, [sp, #4]
    e682:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e686:	2d00      	cmp	r5, #0
    e688:	f000 80b8 	beq.w	e7fc <am_hal_uart_transfer+0x2b8>
    e68c:	2f00      	cmp	r7, #0
    e68e:	f000 8123 	beq.w	e8d8 <am_hal_uart_transfer+0x394>
    e692:	2800      	cmp	r0, #0
    e694:	f000 80ec 	beq.w	e870 <am_hal_uart_transfer+0x32c>
    e698:	6822      	ldr	r2, [r4, #0]
    e69a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; e868 <am_hal_uart_transfer+0x324>
    e69e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e6a2:	f04f 0900 	mov.w	r9, #0
    e6a6:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e6aa:	4552      	cmp	r2, sl
    e6ac:	ee08 3a10 	vmov	s16, r3
    e6b0:	46c8      	mov	r8, r9
    e6b2:	465e      	mov	r6, fp
    e6b4:	d134      	bne.n	e720 <am_hal_uart_transfer+0x1dc>
    e6b6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e6ba:	2a00      	cmp	r2, #0
    e6bc:	d138      	bne.n	e730 <am_hal_uart_transfer+0x1ec>
    e6be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e6c0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e6c4:	311c      	adds	r1, #28
    e6c6:	1e73      	subs	r3, r6, #1
    e6c8:	0309      	lsls	r1, r1, #12
    e6ca:	e008      	b.n	e6de <am_hal_uart_transfer+0x19a>
    e6cc:	6808      	ldr	r0, [r1, #0]
    e6ce:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e6d2:	d163      	bne.n	e79c <am_hal_uart_transfer+0x258>
    e6d4:	3201      	adds	r2, #1
    e6d6:	42ba      	cmp	r2, r7
    e6d8:	f803 0f01 	strb.w	r0, [r3, #1]!
    e6dc:	d056      	beq.n	e78c <am_hal_uart_transfer+0x248>
    e6de:	6988      	ldr	r0, [r1, #24]
    e6e0:	06c0      	lsls	r0, r0, #27
    e6e2:	d5f3      	bpl.n	e6cc <am_hal_uart_transfer+0x188>
    e6e4:	4490      	add	r8, r2
    e6e6:	1abf      	subs	r7, r7, r2
    e6e8:	b957      	cbnz	r7, e700 <am_hal_uart_transfer+0x1bc>
    e6ea:	9b01      	ldr	r3, [sp, #4]
    e6ec:	b10b      	cbz	r3, e6f2 <am_hal_uart_transfer+0x1ae>
    e6ee:	f8c3 8000 	str.w	r8, [r3]
    e6f2:	2500      	movs	r5, #0
    e6f4:	4628      	mov	r0, r5
    e6f6:	b011      	add	sp, #68	; 0x44
    e6f8:	ecbd 8b02 	vpop	{d8}
    e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e700:	2010      	movs	r0, #16
    e702:	f7ff fa7d 	bl	dc00 <am_hal_flash_delay>
    e706:	1c6b      	adds	r3, r5, #1
    e708:	bf18      	it	ne
    e70a:	f109 0901 	addne.w	r9, r9, #1
    e70e:	454d      	cmp	r5, r9
    e710:	d9eb      	bls.n	e6ea <am_hal_uart_transfer+0x1a6>
    e712:	6822      	ldr	r2, [r4, #0]
    e714:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e718:	4552      	cmp	r2, sl
    e71a:	eb0b 0608 	add.w	r6, fp, r8
    e71e:	d0ca      	beq.n	e6b6 <am_hal_uart_transfer+0x172>
    e720:	2502      	movs	r5, #2
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	2b00      	cmp	r3, #0
    e726:	f43f af19 	beq.w	e55c <am_hal_uart_transfer+0x18>
    e72a:	f8c3 8000 	str.w	r8, [r3]
    e72e:	e715      	b.n	e55c <am_hal_uart_transfer+0x18>
    e730:	f7ff fc62 	bl	dff8 <am_hal_interrupt_master_disable>
    e734:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e736:	9007      	str	r0, [sp, #28]
    e738:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e73c:	321c      	adds	r2, #28
    e73e:	0310      	lsls	r0, r2, #12
    e740:	f10d 0c20 	add.w	ip, sp, #32
    e744:	2200      	movs	r2, #0
    e746:	6983      	ldr	r3, [r0, #24]
    e748:	06db      	lsls	r3, r3, #27
    e74a:	d409      	bmi.n	e760 <am_hal_uart_transfer+0x21c>
    e74c:	6803      	ldr	r3, [r0, #0]
    e74e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e752:	f102 0201 	add.w	r2, r2, #1
    e756:	d11b      	bne.n	e790 <am_hal_uart_transfer+0x24c>
    e758:	2a20      	cmp	r2, #32
    e75a:	f80c 3b01 	strb.w	r3, [ip], #1
    e75e:	d1f2      	bne.n	e746 <am_hal_uart_transfer+0x202>
    e760:	ee18 0a10 	vmov	r0, s16
    e764:	a908      	add	r1, sp, #32
    e766:	f000 f9db 	bl	eb20 <am_hal_queue_item_add>
    e76a:	2800      	cmp	r0, #0
    e76c:	d077      	beq.n	e85e <am_hal_uart_transfer+0x31a>
    e76e:	9807      	ldr	r0, [sp, #28]
    e770:	f7ff fc46 	bl	e000 <am_hal_interrupt_master_set>
    e774:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e776:	42ba      	cmp	r2, r7
    e778:	bf28      	it	cs
    e77a:	463a      	movcs	r2, r7
    e77c:	ee18 0a10 	vmov	r0, s16
    e780:	4631      	mov	r1, r6
    e782:	4490      	add	r8, r2
    e784:	1abf      	subs	r7, r7, r2
    e786:	f000 fa09 	bl	eb9c <am_hal_queue_item_get>
    e78a:	e7ad      	b.n	e6e8 <am_hal_uart_transfer+0x1a4>
    e78c:	4490      	add	r8, r2
    e78e:	e7ac      	b.n	e6ea <am_hal_uart_transfer+0x1a6>
    e790:	9807      	ldr	r0, [sp, #28]
    e792:	f7ff fc35 	bl	e000 <am_hal_interrupt_master_set>
    e796:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e79a:	e7c2      	b.n	e722 <am_hal_uart_transfer+0x1de>
    e79c:	4490      	add	r8, r2
    e79e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e7a2:	e7be      	b.n	e722 <am_hal_uart_transfer+0x1de>
    e7a4:	2800      	cmp	r0, #0
    e7a6:	f43f af2e 	beq.w	e606 <am_hal_uart_transfer+0xc2>
    e7aa:	6803      	ldr	r3, [r0, #0]
    e7ac:	4a2e      	ldr	r2, [pc, #184]	; (e868 <am_hal_uart_transfer+0x324>)
    e7ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7b2:	4293      	cmp	r3, r2
    e7b4:	f47f af27 	bne.w	e606 <am_hal_uart_transfer+0xc2>
    e7b8:	9b03      	ldr	r3, [sp, #12]
    e7ba:	b10b      	cbz	r3, e7c0 <am_hal_uart_transfer+0x27c>
    e7bc:	f8c3 9000 	str.w	r9, [r3]
    e7c0:	2e00      	cmp	r6, #0
    e7c2:	d096      	beq.n	e6f2 <am_hal_uart_transfer+0x1ae>
    e7c4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e7c8:	2d00      	cmp	r5, #0
    e7ca:	d156      	bne.n	e87a <am_hal_uart_transfer+0x336>
    e7cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e7ce:	9b01      	ldr	r3, [sp, #4]
    e7d0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e7d4:	321c      	adds	r2, #28
    e7d6:	0312      	lsls	r2, r2, #12
    e7d8:	3b01      	subs	r3, #1
    e7da:	e005      	b.n	e7e8 <am_hal_uart_transfer+0x2a4>
    e7dc:	3501      	adds	r5, #1
    e7de:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e7e2:	6011      	str	r1, [r2, #0]
    e7e4:	42ae      	cmp	r6, r5
    e7e6:	d002      	beq.n	e7ee <am_hal_uart_transfer+0x2aa>
    e7e8:	6991      	ldr	r1, [r2, #24]
    e7ea:	0689      	lsls	r1, r1, #26
    e7ec:	d5f6      	bpl.n	e7dc <am_hal_uart_transfer+0x298>
    e7ee:	9b03      	ldr	r3, [sp, #12]
    e7f0:	2b00      	cmp	r3, #0
    e7f2:	f43f af7e 	beq.w	e6f2 <am_hal_uart_transfer+0x1ae>
    e7f6:	601d      	str	r5, [r3, #0]
    e7f8:	2500      	movs	r5, #0
    e7fa:	e6af      	b.n	e55c <am_hal_uart_transfer+0x18>
    e7fc:	2800      	cmp	r0, #0
    e7fe:	f43f af02 	beq.w	e606 <am_hal_uart_transfer+0xc2>
    e802:	6802      	ldr	r2, [r0, #0]
    e804:	4918      	ldr	r1, [pc, #96]	; (e868 <am_hal_uart_transfer+0x324>)
    e806:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e80a:	428a      	cmp	r2, r1
    e80c:	f47f aefb 	bne.w	e606 <am_hal_uart_transfer+0xc2>
    e810:	b103      	cbz	r3, e814 <am_hal_uart_transfer+0x2d0>
    e812:	601d      	str	r5, [r3, #0]
    e814:	2f00      	cmp	r7, #0
    e816:	f43f af6c 	beq.w	e6f2 <am_hal_uart_transfer+0x1ae>
    e81a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e81e:	2a00      	cmp	r2, #0
    e820:	d15c      	bne.n	e8dc <am_hal_uart_transfer+0x398>
    e822:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e824:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e828:	301c      	adds	r0, #28
    e82a:	0300      	lsls	r0, r0, #12
    e82c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    e830:	4614      	mov	r4, r2
    e832:	e009      	b.n	e848 <am_hal_uart_transfer+0x304>
    e834:	6801      	ldr	r1, [r0, #0]
    e836:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
    e83a:	f040 8080 	bne.w	e93e <am_hal_uart_transfer+0x3fa>
    e83e:	3401      	adds	r4, #1
    e840:	42a7      	cmp	r7, r4
    e842:	f803 1f01 	strb.w	r1, [r3, #1]!
    e846:	d07d      	beq.n	e944 <am_hal_uart_transfer+0x400>
    e848:	6982      	ldr	r2, [r0, #24]
    e84a:	06d2      	lsls	r2, r2, #27
    e84c:	d5f2      	bpl.n	e834 <am_hal_uart_transfer+0x2f0>
    e84e:	9b01      	ldr	r3, [sp, #4]
    e850:	2b00      	cmp	r3, #0
    e852:	f43f ae83 	beq.w	e55c <am_hal_uart_transfer+0x18>
    e856:	601c      	str	r4, [r3, #0]
    e858:	e680      	b.n	e55c <am_hal_uart_transfer+0x18>
    e85a:	4607      	mov	r7, r0
    e85c:	e6d0      	b.n	e600 <am_hal_uart_transfer+0xbc>
    e85e:	9807      	ldr	r0, [sp, #28]
    e860:	4d02      	ldr	r5, [pc, #8]	; (e86c <am_hal_uart_transfer+0x328>)
    e862:	f7ff fbcd 	bl	e000 <am_hal_interrupt_master_set>
    e866:	e75c      	b.n	e722 <am_hal_uart_transfer+0x1de>
    e868:	01ea9e06 	.word	0x01ea9e06
    e86c:	08000001 	.word	0x08000001
    e870:	4680      	mov	r8, r0
    e872:	2502      	movs	r5, #2
    e874:	e755      	b.n	e722 <am_hal_uart_transfer+0x1de>
    e876:	462f      	mov	r7, r5
    e878:	e6aa      	b.n	e5d0 <am_hal_uart_transfer+0x8c>
    e87a:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
    e87e:	1b5d      	subs	r5, r3, r5
    e880:	42b5      	cmp	r5, r6
    e882:	bf28      	it	cs
    e884:	4635      	movcs	r5, r6
    e886:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e88a:	9901      	ldr	r1, [sp, #4]
    e88c:	462a      	mov	r2, r5
    e88e:	4638      	mov	r0, r7
    e890:	f000 f946 	bl	eb20 <am_hal_queue_item_add>
    e894:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e896:	f7ff fbaf 	bl	dff8 <am_hal_interrupt_master_disable>
    e89a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e89e:	361c      	adds	r6, #28
    e8a0:	0336      	lsls	r6, r6, #12
    e8a2:	9005      	str	r0, [sp, #20]
    e8a4:	e00d      	b.n	e8c2 <am_hal_uart_transfer+0x37e>
    e8a6:	f000 f979 	bl	eb9c <am_hal_queue_item_get>
    e8aa:	b188      	cbz	r0, e8d0 <am_hal_uart_transfer+0x38c>
    e8ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e8ae:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8b2:	321c      	adds	r2, #28
    e8b4:	0312      	lsls	r2, r2, #12
    e8b6:	6993      	ldr	r3, [r2, #24]
    e8b8:	0699      	lsls	r1, r3, #26
    e8ba:	bf5c      	itt	pl
    e8bc:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e8c0:	6013      	strpl	r3, [r2, #0]
    e8c2:	69b3      	ldr	r3, [r6, #24]
    e8c4:	069b      	lsls	r3, r3, #26
    e8c6:	f04f 0201 	mov.w	r2, #1
    e8ca:	a908      	add	r1, sp, #32
    e8cc:	4638      	mov	r0, r7
    e8ce:	d5ea      	bpl.n	e8a6 <am_hal_uart_transfer+0x362>
    e8d0:	9805      	ldr	r0, [sp, #20]
    e8d2:	f7ff fb95 	bl	e000 <am_hal_interrupt_master_set>
    e8d6:	e78a      	b.n	e7ee <am_hal_uart_transfer+0x2aa>
    e8d8:	46b8      	mov	r8, r7
    e8da:	e706      	b.n	e6ea <am_hal_uart_transfer+0x1a6>
    e8dc:	f7ff fb8c 	bl	dff8 <am_hal_interrupt_master_disable>
    e8e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e8e2:	9006      	str	r0, [sp, #24]
    e8e4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8e8:	321c      	adds	r2, #28
    e8ea:	0310      	lsls	r0, r2, #12
    e8ec:	ae08      	add	r6, sp, #32
    e8ee:	2200      	movs	r2, #0
    e8f0:	6983      	ldr	r3, [r0, #24]
    e8f2:	06d9      	lsls	r1, r3, #27
    e8f4:	d409      	bmi.n	e90a <am_hal_uart_transfer+0x3c6>
    e8f6:	6803      	ldr	r3, [r0, #0]
    e8f8:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e8fc:	f102 0201 	add.w	r2, r2, #1
    e900:	d117      	bne.n	e932 <am_hal_uart_transfer+0x3ee>
    e902:	2a20      	cmp	r2, #32
    e904:	f806 3b01 	strb.w	r3, [r6], #1
    e908:	d1f2      	bne.n	e8f0 <am_hal_uart_transfer+0x3ac>
    e90a:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e90e:	a908      	add	r1, sp, #32
    e910:	4630      	mov	r0, r6
    e912:	f000 f905 	bl	eb20 <am_hal_queue_item_add>
    e916:	b1b8      	cbz	r0, e948 <am_hal_uart_transfer+0x404>
    e918:	9806      	ldr	r0, [sp, #24]
    e91a:	f7ff fb71 	bl	e000 <am_hal_interrupt_master_set>
    e91e:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e920:	42bc      	cmp	r4, r7
    e922:	bf28      	it	cs
    e924:	463c      	movcs	r4, r7
    e926:	4659      	mov	r1, fp
    e928:	4630      	mov	r0, r6
    e92a:	4622      	mov	r2, r4
    e92c:	f000 f936 	bl	eb9c <am_hal_queue_item_get>
    e930:	e78d      	b.n	e84e <am_hal_uart_transfer+0x30a>
    e932:	9806      	ldr	r0, [sp, #24]
    e934:	f7ff fb64 	bl	e000 <am_hal_interrupt_master_set>
    e938:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e93c:	e60e      	b.n	e55c <am_hal_uart_transfer+0x18>
    e93e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e942:	e784      	b.n	e84e <am_hal_uart_transfer+0x30a>
    e944:	4615      	mov	r5, r2
    e946:	e782      	b.n	e84e <am_hal_uart_transfer+0x30a>
    e948:	9806      	ldr	r0, [sp, #24]
    e94a:	4d02      	ldr	r5, [pc, #8]	; (e954 <am_hal_uart_transfer+0x410>)
    e94c:	f7ff fb58 	bl	e000 <am_hal_interrupt_master_set>
    e950:	e604      	b.n	e55c <am_hal_uart_transfer+0x18>
    e952:	bf00      	nop
    e954:	08000001 	.word	0x08000001

0000e958 <am_hal_uart_interrupt_service>:
    e958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e95c:	4604      	mov	r4, r0
    e95e:	4847      	ldr	r0, [pc, #284]	; (ea7c <am_hal_uart_interrupt_service+0x124>)
    e960:	6823      	ldr	r3, [r4, #0]
    e962:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e966:	4283      	cmp	r3, r0
    e968:	b08a      	sub	sp, #40	; 0x28
    e96a:	d124      	bne.n	e9b6 <am_hal_uart_interrupt_service+0x5e>
    e96c:	f011 0f50 	tst.w	r1, #80	; 0x50
    e970:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e972:	460d      	mov	r5, r1
    e974:	4616      	mov	r6, r2
    e976:	d002      	beq.n	e97e <am_hal_uart_interrupt_service+0x26>
    e978:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e97c:	bb63      	cbnz	r3, e9d8 <am_hal_uart_interrupt_service+0x80>
    e97e:	06a9      	lsls	r1, r5, #26
    e980:	d409      	bmi.n	e996 <am_hal_uart_interrupt_service+0x3e>
    e982:	b126      	cbz	r6, e98e <am_hal_uart_interrupt_service+0x36>
    e984:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e988:	b15b      	cbz	r3, e9a2 <am_hal_uart_interrupt_service+0x4a>
    e98a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e98c:	b1bb      	cbz	r3, e9be <am_hal_uart_interrupt_service+0x66>
    e98e:	2000      	movs	r0, #0
    e990:	b00a      	add	sp, #40	; 0x28
    e992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e996:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e99a:	2b00      	cmp	r3, #0
    e99c:	d13d      	bne.n	ea1a <am_hal_uart_interrupt_service+0xc2>
    e99e:	2e00      	cmp	r6, #0
    e9a0:	d0f5      	beq.n	e98e <am_hal_uart_interrupt_service+0x36>
    e9a2:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9a6:	371c      	adds	r7, #28
    e9a8:	033f      	lsls	r7, r7, #12
    e9aa:	69bb      	ldr	r3, [r7, #24]
    e9ac:	071b      	lsls	r3, r3, #28
    e9ae:	d40e      	bmi.n	e9ce <am_hal_uart_interrupt_service+0x76>
    e9b0:	2301      	movs	r3, #1
    e9b2:	6033      	str	r3, [r6, #0]
    e9b4:	e7eb      	b.n	e98e <am_hal_uart_interrupt_service+0x36>
    e9b6:	2002      	movs	r0, #2
    e9b8:	b00a      	add	sp, #40	; 0x28
    e9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9be:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e9c2:	371c      	adds	r7, #28
    e9c4:	033f      	lsls	r7, r7, #12
    e9c6:	69bb      	ldr	r3, [r7, #24]
    e9c8:	071a      	lsls	r2, r3, #28
    e9ca:	d4e0      	bmi.n	e98e <am_hal_uart_interrupt_service+0x36>
    e9cc:	e7f0      	b.n	e9b0 <am_hal_uart_interrupt_service+0x58>
    e9ce:	2000      	movs	r0, #0
    e9d0:	6030      	str	r0, [r6, #0]
    e9d2:	b00a      	add	sp, #40	; 0x28
    e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9d8:	f7ff fb0e 	bl	dff8 <am_hal_interrupt_master_disable>
    e9dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e9de:	9001      	str	r0, [sp, #4]
    e9e0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e9e4:	311c      	adds	r1, #28
    e9e6:	0309      	lsls	r1, r1, #12
    e9e8:	a802      	add	r0, sp, #8
    e9ea:	2200      	movs	r2, #0
    e9ec:	698b      	ldr	r3, [r1, #24]
    e9ee:	06db      	lsls	r3, r3, #27
    e9f0:	d409      	bmi.n	ea06 <am_hal_uart_interrupt_service+0xae>
    e9f2:	680b      	ldr	r3, [r1, #0]
    e9f4:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e9f8:	f102 0201 	add.w	r2, r2, #1
    e9fc:	d132      	bne.n	ea64 <am_hal_uart_interrupt_service+0x10c>
    e9fe:	2a20      	cmp	r2, #32
    ea00:	f800 3b01 	strb.w	r3, [r0], #1
    ea04:	d1f2      	bne.n	e9ec <am_hal_uart_interrupt_service+0x94>
    ea06:	a902      	add	r1, sp, #8
    ea08:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ea0c:	f000 f888 	bl	eb20 <am_hal_queue_item_add>
    ea10:	b370      	cbz	r0, ea70 <am_hal_uart_interrupt_service+0x118>
    ea12:	9801      	ldr	r0, [sp, #4]
    ea14:	f7ff faf4 	bl	e000 <am_hal_interrupt_master_set>
    ea18:	e7b1      	b.n	e97e <am_hal_uart_interrupt_service+0x26>
    ea1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ea1c:	f7ff faec 	bl	dff8 <am_hal_interrupt_master_disable>
    ea20:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ea24:	351c      	adds	r5, #28
    ea26:	032d      	lsls	r5, r5, #12
    ea28:	9002      	str	r0, [sp, #8]
    ea2a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    ea2e:	e00d      	b.n	ea4c <am_hal_uart_interrupt_service+0xf4>
    ea30:	f000 f8b4 	bl	eb9c <am_hal_queue_item_get>
    ea34:	b190      	cbz	r0, ea5c <am_hal_uart_interrupt_service+0x104>
    ea36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea38:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea3c:	331c      	adds	r3, #28
    ea3e:	031b      	lsls	r3, r3, #12
    ea40:	699a      	ldr	r2, [r3, #24]
    ea42:	0692      	lsls	r2, r2, #26
    ea44:	bf5c      	itt	pl
    ea46:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
    ea4a:	601a      	strpl	r2, [r3, #0]
    ea4c:	69ab      	ldr	r3, [r5, #24]
    ea4e:	069b      	lsls	r3, r3, #26
    ea50:	f04f 0201 	mov.w	r2, #1
    ea54:	f10d 0103 	add.w	r1, sp, #3
    ea58:	4640      	mov	r0, r8
    ea5a:	d5e9      	bpl.n	ea30 <am_hal_uart_interrupt_service+0xd8>
    ea5c:	9802      	ldr	r0, [sp, #8]
    ea5e:	f7ff facf 	bl	e000 <am_hal_interrupt_master_set>
    ea62:	e78e      	b.n	e982 <am_hal_uart_interrupt_service+0x2a>
    ea64:	9801      	ldr	r0, [sp, #4]
    ea66:	f7ff facb 	bl	e000 <am_hal_interrupt_master_set>
    ea6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ea6e:	e78f      	b.n	e990 <am_hal_uart_interrupt_service+0x38>
    ea70:	9801      	ldr	r0, [sp, #4]
    ea72:	f7ff fac5 	bl	e000 <am_hal_interrupt_master_set>
    ea76:	4802      	ldr	r0, [pc, #8]	; (ea80 <am_hal_uart_interrupt_service+0x128>)
    ea78:	e78a      	b.n	e990 <am_hal_uart_interrupt_service+0x38>
    ea7a:	bf00      	nop
    ea7c:	01ea9e06 	.word	0x01ea9e06
    ea80:	08000001 	.word	0x08000001

0000ea84 <am_hal_uart_interrupt_enable>:
    ea84:	6803      	ldr	r3, [r0, #0]
    ea86:	4a08      	ldr	r2, [pc, #32]	; (eaa8 <am_hal_uart_interrupt_enable+0x24>)
    ea88:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea8c:	4293      	cmp	r3, r2
    ea8e:	d109      	bne.n	eaa4 <am_hal_uart_interrupt_enable+0x20>
    ea90:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ea92:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea96:	331c      	adds	r3, #28
    ea98:	031b      	lsls	r3, r3, #12
    ea9a:	2000      	movs	r0, #0
    ea9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ea9e:	4311      	orrs	r1, r2
    eaa0:	6399      	str	r1, [r3, #56]	; 0x38
    eaa2:	4770      	bx	lr
    eaa4:	2002      	movs	r0, #2
    eaa6:	4770      	bx	lr
    eaa8:	01ea9e06 	.word	0x01ea9e06

0000eaac <am_hal_uart_interrupt_clear>:
    eaac:	6803      	ldr	r3, [r0, #0]
    eaae:	4a07      	ldr	r2, [pc, #28]	; (eacc <am_hal_uart_interrupt_clear+0x20>)
    eab0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eab4:	4293      	cmp	r3, r2
    eab6:	d107      	bne.n	eac8 <am_hal_uart_interrupt_clear+0x1c>
    eab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eaba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eabe:	331c      	adds	r3, #28
    eac0:	031b      	lsls	r3, r3, #12
    eac2:	2000      	movs	r0, #0
    eac4:	6459      	str	r1, [r3, #68]	; 0x44
    eac6:	4770      	bx	lr
    eac8:	2002      	movs	r0, #2
    eaca:	4770      	bx	lr
    eacc:	01ea9e06 	.word	0x01ea9e06

0000ead0 <am_hal_uart_interrupt_status_get>:
    ead0:	6803      	ldr	r3, [r0, #0]
    ead2:	b410      	push	{r4}
    ead4:	4c0b      	ldr	r4, [pc, #44]	; (eb04 <am_hal_uart_interrupt_status_get+0x34>)
    ead6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eada:	42a3      	cmp	r3, r4
    eadc:	d10d      	bne.n	eafa <am_hal_uart_interrupt_status_get+0x2a>
    eade:	6a43      	ldr	r3, [r0, #36]	; 0x24
    eae0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eae4:	331c      	adds	r3, #28
    eae6:	031b      	lsls	r3, r3, #12
    eae8:	b92a      	cbnz	r2, eaf6 <am_hal_uart_interrupt_status_get+0x26>
    eaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eaec:	f85d 4b04 	ldr.w	r4, [sp], #4
    eaf0:	600b      	str	r3, [r1, #0]
    eaf2:	2000      	movs	r0, #0
    eaf4:	4770      	bx	lr
    eaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eaf8:	e7f8      	b.n	eaec <am_hal_uart_interrupt_status_get+0x1c>
    eafa:	2002      	movs	r0, #2
    eafc:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb00:	4770      	bx	lr
    eb02:	bf00      	nop
    eb04:	01ea9e06 	.word	0x01ea9e06

0000eb08 <am_hal_queue_init>:
    eb08:	b410      	push	{r4}
    eb0a:	2400      	movs	r4, #0
    eb0c:	e9c0 4400 	strd	r4, r4, [r0]
    eb10:	6084      	str	r4, [r0, #8]
    eb12:	e9c0 2104 	strd	r2, r1, [r0, #16]
    eb16:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb1a:	60c3      	str	r3, [r0, #12]
    eb1c:	4770      	bx	lr
    eb1e:	bf00      	nop

0000eb20 <am_hal_queue_item_add>:
    eb20:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb22:	6906      	ldr	r6, [r0, #16]
    eb24:	b083      	sub	sp, #12
    eb26:	4604      	mov	r4, r0
    eb28:	fb06 f602 	mul.w	r6, r6, r2
    eb2c:	460d      	mov	r5, r1
    eb2e:	f7ff fa63 	bl	dff8 <am_hal_interrupt_master_disable>
    eb32:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    eb36:	1a53      	subs	r3, r2, r1
    eb38:	42b3      	cmp	r3, r6
    eb3a:	9001      	str	r0, [sp, #4]
    eb3c:	d31c      	bcc.n	eb78 <am_hal_queue_item_add+0x58>
    eb3e:	b196      	cbz	r6, eb66 <am_hal_queue_item_add+0x46>
    eb40:	6823      	ldr	r3, [r4, #0]
    eb42:	b305      	cbz	r5, eb86 <am_hal_queue_item_add+0x66>
    eb44:	1e68      	subs	r0, r5, #1
    eb46:	1987      	adds	r7, r0, r6
    eb48:	6962      	ldr	r2, [r4, #20]
    eb4a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    eb4e:	54d1      	strb	r1, [r2, r3]
    eb50:	6823      	ldr	r3, [r4, #0]
    eb52:	68e5      	ldr	r5, [r4, #12]
    eb54:	1c59      	adds	r1, r3, #1
    eb56:	4287      	cmp	r7, r0
    eb58:	fbb1 f3f5 	udiv	r3, r1, r5
    eb5c:	fb05 1313 	mls	r3, r5, r3, r1
    eb60:	6023      	str	r3, [r4, #0]
    eb62:	d1f1      	bne.n	eb48 <am_hal_queue_item_add+0x28>
    eb64:	68a1      	ldr	r1, [r4, #8]
    eb66:	9801      	ldr	r0, [sp, #4]
    eb68:	440e      	add	r6, r1
    eb6a:	60a6      	str	r6, [r4, #8]
    eb6c:	f7ff fa48 	bl	e000 <am_hal_interrupt_master_set>
    eb70:	2401      	movs	r4, #1
    eb72:	4620      	mov	r0, r4
    eb74:	b003      	add	sp, #12
    eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb78:	9801      	ldr	r0, [sp, #4]
    eb7a:	f7ff fa41 	bl	e000 <am_hal_interrupt_master_set>
    eb7e:	2400      	movs	r4, #0
    eb80:	4620      	mov	r0, r4
    eb82:	b003      	add	sp, #12
    eb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb86:	4628      	mov	r0, r5
    eb88:	3001      	adds	r0, #1
    eb8a:	3301      	adds	r3, #1
    eb8c:	4286      	cmp	r6, r0
    eb8e:	fbb3 f5f2 	udiv	r5, r3, r2
    eb92:	fb02 3315 	mls	r3, r2, r5, r3
    eb96:	d1f7      	bne.n	eb88 <am_hal_queue_item_add+0x68>
    eb98:	6023      	str	r3, [r4, #0]
    eb9a:	e7e4      	b.n	eb66 <am_hal_queue_item_add+0x46>

0000eb9c <am_hal_queue_item_get>:
    eb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb9e:	6906      	ldr	r6, [r0, #16]
    eba0:	4604      	mov	r4, r0
    eba2:	b083      	sub	sp, #12
    eba4:	fb06 f602 	mul.w	r6, r6, r2
    eba8:	460d      	mov	r5, r1
    ebaa:	f7ff fa25 	bl	dff8 <am_hal_interrupt_master_disable>
    ebae:	68a2      	ldr	r2, [r4, #8]
    ebb0:	9001      	str	r0, [sp, #4]
    ebb2:	42b2      	cmp	r2, r6
    ebb4:	d31c      	bcc.n	ebf0 <am_hal_queue_item_get+0x54>
    ebb6:	b196      	cbz	r6, ebde <am_hal_queue_item_get+0x42>
    ebb8:	6863      	ldr	r3, [r4, #4]
    ebba:	b305      	cbz	r5, ebfe <am_hal_queue_item_get+0x62>
    ebbc:	1e68      	subs	r0, r5, #1
    ebbe:	1987      	adds	r7, r0, r6
    ebc0:	6962      	ldr	r2, [r4, #20]
    ebc2:	5cd3      	ldrb	r3, [r2, r3]
    ebc4:	f800 3f01 	strb.w	r3, [r0, #1]!
    ebc8:	6863      	ldr	r3, [r4, #4]
    ebca:	68e5      	ldr	r5, [r4, #12]
    ebcc:	1c59      	adds	r1, r3, #1
    ebce:	4287      	cmp	r7, r0
    ebd0:	fbb1 f3f5 	udiv	r3, r1, r5
    ebd4:	fb05 1313 	mls	r3, r5, r3, r1
    ebd8:	6063      	str	r3, [r4, #4]
    ebda:	d1f1      	bne.n	ebc0 <am_hal_queue_item_get+0x24>
    ebdc:	68a2      	ldr	r2, [r4, #8]
    ebde:	9801      	ldr	r0, [sp, #4]
    ebe0:	1b92      	subs	r2, r2, r6
    ebe2:	60a2      	str	r2, [r4, #8]
    ebe4:	f7ff fa0c 	bl	e000 <am_hal_interrupt_master_set>
    ebe8:	2401      	movs	r4, #1
    ebea:	4620      	mov	r0, r4
    ebec:	b003      	add	sp, #12
    ebee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebf0:	9801      	ldr	r0, [sp, #4]
    ebf2:	f7ff fa05 	bl	e000 <am_hal_interrupt_master_set>
    ebf6:	2400      	movs	r4, #0
    ebf8:	4620      	mov	r0, r4
    ebfa:	b003      	add	sp, #12
    ebfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebfe:	68e1      	ldr	r1, [r4, #12]
    ec00:	4628      	mov	r0, r5
    ec02:	3001      	adds	r0, #1
    ec04:	3301      	adds	r3, #1
    ec06:	42b0      	cmp	r0, r6
    ec08:	fbb3 f5f1 	udiv	r5, r3, r1
    ec0c:	fb01 3315 	mls	r3, r1, r5, r3
    ec10:	d1f7      	bne.n	ec02 <am_hal_queue_item_get+0x66>
    ec12:	6063      	str	r3, [r4, #4]
    ec14:	e7e3      	b.n	ebde <am_hal_queue_item_get+0x42>
    ec16:	bf00      	nop

0000ec18 <__init_array_end>:
    ec18:	72410a0a 	.word	0x72410a0a
    ec1c:	696d6574 	.word	0x696d6574
    ec20:	56532073 	.word	0x56532073
    ec24:	6f42204c 	.word	0x6f42204c
    ec28:	6f6c746f 	.word	0x6f6c746f
    ec2c:	72656461 	.word	0x72656461
    ec30:	44202d20 	.word	0x44202d20
    ec34:	47554245 	.word	0x47554245
    ec38:	00000a0a 	.word	0x00000a0a
    ec3c:	73616870 	.word	0x73616870
    ec40:	63093a65 	.word	0x63093a65
    ec44:	69666e6f 	.word	0x69666e6f
    ec48:	62206d72 	.word	0x62206d72
    ec4c:	6c746f6f 	.word	0x6c746f6f
    ec50:	6964616f 	.word	0x6964616f
    ec54:	6520676e 	.word	0x6520676e
    ec58:	7972746e 	.word	0x7972746e
    ec5c:	0000000a 	.word	0x0000000a
    ec60:	6e657309 	.word	0x6e657309
    ec64:	676e6964 	.word	0x676e6964
    ec68:	74724120 	.word	0x74724120
    ec6c:	73696d65 	.word	0x73696d65
    ec70:	4c565320 	.word	0x4c565320
    ec74:	72657620 	.word	0x72657620
    ec78:	6e6f6973 	.word	0x6e6f6973
    ec7c:	63617020 	.word	0x63617020
    ec80:	0a74656b 	.word	0x0a74656b
    ec84:	00000000 	.word	0x00000000
    ec88:	69617709 	.word	0x69617709
    ec8c:	676e6974 	.word	0x676e6974
    ec90:	726f6620 	.word	0x726f6620
    ec94:	6f6f6220 	.word	0x6f6f6220
    ec98:	616f6c74 	.word	0x616f6c74
    ec9c:	20726564 	.word	0x20726564
    eca0:	666e6f63 	.word	0x666e6f63
    eca4:	616d7269 	.word	0x616d7269
    eca8:	6e6f6974 	.word	0x6e6f6974
    ecac:	0000000a 	.word	0x0000000a
    ecb0:	206f6e09 	.word	0x206f6e09
    ecb4:	666e6f63 	.word	0x666e6f63
    ecb8:	616d7269 	.word	0x616d7269
    ecbc:	6e6f6974 	.word	0x6e6f6974
    ecc0:	63657220 	.word	0x63657220
    ecc4:	65766965 	.word	0x65766965
    ecc8:	00000a64 	.word	0x00000a64
    eccc:	746e6509 	.word	0x746e6509
    ecd0:	6e697265 	.word	0x6e697265
    ecd4:	6f622067 	.word	0x6f622067
    ecd8:	6f6c746f 	.word	0x6f6c746f
    ecdc:	72656461 	.word	0x72656461
    ece0:	00000a0a 	.word	0x00000a0a
    ece4:	4f525245 	.word	0x4f525245
    ece8:	202d2052 	.word	0x202d2052
    ecec:	6f6e7572 	.word	0x6f6e7572
    ecf0:	00006666 	.word	0x00006666
    ecf4:	73616870 	.word	0x73616870
    ecf8:	64093a65 	.word	0x64093a65
    ecfc:	63657465 	.word	0x63657465
    ed00:	61622074 	.word	0x61622074
    ed04:	72206475 	.word	0x72206475
    ed08:	0a657461 	.word	0x0a657461
    ed0c:	00000000 	.word	0x00000000
    ed10:	75616209 	.word	0x75616209
    ed14:	61722064 	.word	0x61722064
    ed18:	6e206574 	.word	0x6e206574
    ed1c:	6420746f 	.word	0x6420746f
    ed20:	63657465 	.word	0x63657465
    ed24:	2e646574 	.word	0x2e646574
    ed28:	7209090a 	.word	0x7209090a
    ed2c:	6e697369 	.word	0x6e697369
    ed30:	64652067 	.word	0x64652067
    ed34:	3a736567 	.word	0x3a736567
    ed38:	0a642509 	.word	0x0a642509
    ed3c:	69740909 	.word	0x69740909
    ed40:	2064656d 	.word	0x2064656d
    ed44:	3a74756f 	.word	0x3a74756f
    ed48:	0a642509 	.word	0x0a642509
    ed4c:	0000000a 	.word	0x0000000a
    ed50:	74656409 	.word	0x74656409
    ed54:	65746365 	.word	0x65746365
    ed58:	61762064 	.word	0x61762064
    ed5c:	2064696c 	.word	0x2064696c
    ed60:	64756162 	.word	0x64756162
    ed64:	74617220 	.word	0x74617220
    ed68:	25093a65 	.word	0x25093a65
    ed6c:	000a0a64 	.word	0x000a0a64
    ed70:	73616870 	.word	0x73616870
    ed74:	62093a65 	.word	0x62093a65
    ed78:	6c746f6f 	.word	0x6c746f6f
    ed7c:	0a64616f 	.word	0x0a64616f
    ed80:	00000000 	.word	0x00000000
    ed84:	71657209 	.word	0x71657209
    ed88:	74736575 	.word	0x74736575
    ed8c:	20676e69 	.word	0x20676e69
    ed90:	72746572 	.word	0x72746572
    ed94:	6d736e61 	.word	0x6d736e61
    ed98:	69737369 	.word	0x69737369
    ed9c:	000a6e6f 	.word	0x000a6e6f
    eda0:	71657209 	.word	0x71657209
    eda4:	74736575 	.word	0x74736575
    eda8:	20676e69 	.word	0x20676e69
    edac:	7478656e 	.word	0x7478656e
    edb0:	70706120 	.word	0x70706120
    edb4:	61726620 	.word	0x61726620
    edb8:	000a656d 	.word	0x000a656d
    edbc:	72650909 	.word	0x72650909
    edc0:	20726f72 	.word	0x20726f72
    edc4:	65636572 	.word	0x65636572
    edc8:	6e697669 	.word	0x6e697669
    edcc:	61702067 	.word	0x61702067
    edd0:	74656b63 	.word	0x74656b63
    edd4:	64252820 	.word	0x64252820
    edd8:	00000a29 	.word	0x00000a29
    eddc:	65720909 	.word	0x65720909
    ede0:	76696563 	.word	0x76696563
    ede4:	61206465 	.word	0x61206465
    ede8:	7061206e 	.word	0x7061206e
    edec:	72662070 	.word	0x72662070
    edf0:	0a656d61 	.word	0x0a656d61
    edf4:	00000000 	.word	0x00000000
    edf8:	65720909 	.word	0x65720909
    edfc:	76696563 	.word	0x76696563
    ee00:	64206465 	.word	0x64206465
    ee04:	20656e6f 	.word	0x20656e6f
    ee08:	6e676973 	.word	0x6e676973
    ee0c:	0a216c61 	.word	0x0a216c61
    ee10:	0000000a 	.word	0x0000000a
    ee14:	746f6f62 	.word	0x746f6f62
    ee18:	64616f6c 	.word	0x64616f6c
    ee1c:	72726520 	.word	0x72726520
    ee20:	2d20726f 	.word	0x2d20726f
    ee24:	6b6e7520 	.word	0x6b6e7520
    ee28:	6e776f6e 	.word	0x6e776f6e
    ee2c:	6d6f6320 	.word	0x6d6f6320
    ee30:	646e616d 	.word	0x646e616d
    ee34:	0000000a 	.word	0x0000000a
    ee38:	00000004 	.word	0x00000004
    ee3c:	1000023c 	.word	0x1000023c
    ee40:	08000800 	.word	0x08000800
    ee44:	72660909 	.word	0x72660909
    ee48:	5f656d61 	.word	0x5f656d61
    ee4c:	72646461 	.word	0x72646461
    ee50:	20737365 	.word	0x20737365
    ee54:	7830203d 	.word	0x7830203d
    ee58:	58383025 	.word	0x58383025
    ee5c:	756e202c 	.word	0x756e202c
    ee60:	6f775f6d 	.word	0x6f775f6d
    ee64:	20736472 	.word	0x20736472
    ee68:	6425203d 	.word	0x6425203d
    ee6c:	0000000a 	.word	0x0000000a
    ee70:	6f727245 	.word	0x6f727245
    ee74:	66203a72 	.word	0x66203a72
    ee78:	656d6172 	.word	0x656d6172
    ee7c:	63617020 	.word	0x63617020
    ee80:	2074656b 	.word	0x2074656b
    ee84:	20746f6e 	.word	0x20746f6e
    ee88:	65746e69 	.word	0x65746e69
    ee8c:	20726567 	.word	0x20726567
    ee90:	746c756d 	.word	0x746c756d
    ee94:	656c7069 	.word	0x656c7069
    ee98:	20666f20 	.word	0x20666f20
    ee9c:	64726f77 	.word	0x64726f77
    eea0:	34282073 	.word	0x34282073
    eea4:	74796220 	.word	0x74796220
    eea8:	70207365 	.word	0x70207365
    eeac:	77207265 	.word	0x77207265
    eeb0:	2964726f 	.word	0x2964726f
    eeb4:	0000000a 	.word	0x0000000a
    eeb8:	53414c46 	.word	0x53414c46
    eebc:	414d5f48 	.word	0x414d5f48
    eec0:	455f5353 	.word	0x455f5353
    eec4:	45534152 	.word	0x45534152
    eec8:	32336920 	.word	0x32336920
    eecc:	75746552 	.word	0x75746552
    eed0:	6f436e72 	.word	0x6f436e72
    eed4:	3d206564 	.word	0x3d206564
    eed8:	25783020 	.word	0x25783020
    eedc:	0d0a2e78 	.word	0x0d0a2e78
    eee0:	00000000 	.word	0x00000000
    eee4:	53414c46 	.word	0x53414c46
    eee8:	52575f48 	.word	0x52575f48
    eeec:	20455449 	.word	0x20455449
    eef0:	6f727265 	.word	0x6f727265
    eef4:	203d2072 	.word	0x203d2072
    eef8:	78257830 	.word	0x78257830
    eefc:	000d0a2e 	.word	0x000d0a2e
    ef00:	6d754a0a 	.word	0x6d754a0a
    ef04:	6f742070 	.word	0x6f742070
    ef08:	70704120 	.word	0x70704120
    ef0c:	20746120 	.word	0x20746120
    ef10:	30257830 	.word	0x30257830
    ef14:	0a0a5838 	.word	0x0a0a5838
    ef18:	00000000 	.word	0x00000000

0000ef1c <am_hal_cachectrl_defaults>:
    ef1c:	00000308                                ....

0000ef20 <g_AM_HAL_GPIO_DISABLE>:
    ef20:	00000003                                ....

0000ef24 <g_AM_HAL_GPIO_INPUT_PULLUP>:
    ef24:	00001023                                #...

0000ef28 <g_ui8Bit76Capabilities>:
    ef28:	02800101 80010180 80800101 80808080     ................
    ef38:	80808080 80808008 01800180 80808080     ................
    ef48:	80808080 01800402 01010401 80808080     ................
    ef58:	00000101                                ....

0000ef5c <g_ui8Inpen>:
    ef5c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ef6c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ef7c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ef8c:	00003130                                01..

0000ef90 <g_ui8NCEtable>:
    ef90:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    efa0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    efb0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    efc0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    efd0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    efe0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eff0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f000:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f010:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f020:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f030:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f040:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f050:	32221202 43231303                       .."2..#C

0000f058 <g_ui8nCEpins>:
    f058:	02070707 00080802 01020202 01010101     ................
    f068:	01010101 01010101 01010101 01010101     ................
    f078:	01010101 08010101 01010008 01010101     ................
    f088:	00000101                                ....

0000f08c <am_hal_pwrctrl_peripheral_control>:
	...
    f098:	00000001 00000004 00000004 00000002     ................
    f0a8:	00000008 00000008 00000004 00000008     ................
    f0b8:	00000008 00000008 00000008 00000008     ................
    f0c8:	00000010 00000010 00000010 00000020     ............ ...
    f0d8:	00000010 00000010 00000040 00000010     ........@.......
    f0e8:	00000010 00000080 00000004 00000004     ................
    f0f8:	00000100 00000004 00000004 00000200     ................
    f108:	00000020 00000020 00000400 00000004      ... ...........
    f118:	00000004 00000800 00000040 00000040     ........@...@...
    f128:	00001000 00000080 00000080 00002000     ............. ..
    f138:	00000100 00000100                       ........

0000f140 <CSWTCH.20>:
    f140:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
