
../gcc/artemis_module/bin/svl.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	f8 ff 05 10 75 cd 00 00 f9 cd 00 00 ff cd 00 00     ....u...........
    c010:	ff cd 00 00 ff cd 00 00 ff cd 00 00 00 00 00 00     ................
	...
    c02c:	05 ce 00 00 05 ce 00 00 00 00 00 00 05 ce 00 00     ................
    c03c:	05 ce 00 00 05 ce 00 00 05 ce 00 00 05 ce 00 00     ................
    c04c:	05 ce 00 00 05 ce 00 00 05 ce 00 00 05 ce 00 00     ................
    c05c:	05 ce 00 00 05 ce 00 00 05 ce 00 00 05 ce 00 00     ................
    c06c:	05 ce 00 00 05 ce 00 00 95 cc 00 00 05 ce 00 00     ................
    c07c:	15 cc 00 00 85 cc 00 00 05 ce 00 00 05 ce 00 00     ................
    c08c:	05 ce 00 00 05 ce 00 00 05 ce 00 00 dd cc 00 00     ................
    c09c:	05 ce 00 00 05 ce 00 00 05 ce 00 00 05 ce 00 00     ................
    c0ac:	05 ce 00 00 05 ce 00 00 05 ce 00 00 05 ce 00 00     ................
    c0bc:	05 ce 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_uldivmod>:
    c100:	b953      	cbnz	r3, c118 <__aeabi_uldivmod+0x18>
    c102:	b94a      	cbnz	r2, c118 <__aeabi_uldivmod+0x18>
    c104:	2900      	cmp	r1, #0
    c106:	bf08      	it	eq
    c108:	2800      	cmpeq	r0, #0
    c10a:	bf1c      	itt	ne
    c10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c114:	f000 b974 	b.w	c400 <__aeabi_idiv0>
    c118:	f1ad 0c08 	sub.w	ip, sp, #8
    c11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c120:	f000 f806 	bl	c130 <__udivmoddi4>
    c124:	f8dd e004 	ldr.w	lr, [sp, #4]
    c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c12c:	b004      	add	sp, #16
    c12e:	4770      	bx	lr

0000c130 <__udivmoddi4>:
    c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c134:	9e08      	ldr	r6, [sp, #32]
    c136:	4604      	mov	r4, r0
    c138:	4688      	mov	r8, r1
    c13a:	2b00      	cmp	r3, #0
    c13c:	f040 8085 	bne.w	c24a <__udivmoddi4+0x11a>
    c140:	428a      	cmp	r2, r1
    c142:	4615      	mov	r5, r2
    c144:	d948      	bls.n	c1d8 <__udivmoddi4+0xa8>
    c146:	fab2 f282 	clz	r2, r2
    c14a:	b14a      	cbz	r2, c160 <__udivmoddi4+0x30>
    c14c:	f1c2 0720 	rsb	r7, r2, #32
    c150:	fa01 f302 	lsl.w	r3, r1, r2
    c154:	fa20 f707 	lsr.w	r7, r0, r7
    c158:	4095      	lsls	r5, r2
    c15a:	ea47 0803 	orr.w	r8, r7, r3
    c15e:	4094      	lsls	r4, r2
    c160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c164:	0c23      	lsrs	r3, r4, #16
    c166:	fbb8 f7fe 	udiv	r7, r8, lr
    c16a:	fa1f fc85 	uxth.w	ip, r5
    c16e:	fb0e 8817 	mls	r8, lr, r7, r8
    c172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    c176:	fb07 f10c 	mul.w	r1, r7, ip
    c17a:	4299      	cmp	r1, r3
    c17c:	d909      	bls.n	c192 <__udivmoddi4+0x62>
    c17e:	18eb      	adds	r3, r5, r3
    c180:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    c184:	f080 80e3 	bcs.w	c34e <__udivmoddi4+0x21e>
    c188:	4299      	cmp	r1, r3
    c18a:	f240 80e0 	bls.w	c34e <__udivmoddi4+0x21e>
    c18e:	3f02      	subs	r7, #2
    c190:	442b      	add	r3, r5
    c192:	1a5b      	subs	r3, r3, r1
    c194:	b2a4      	uxth	r4, r4
    c196:	fbb3 f0fe 	udiv	r0, r3, lr
    c19a:	fb0e 3310 	mls	r3, lr, r0, r3
    c19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c1a2:	fb00 fc0c 	mul.w	ip, r0, ip
    c1a6:	45a4      	cmp	ip, r4
    c1a8:	d909      	bls.n	c1be <__udivmoddi4+0x8e>
    c1aa:	192c      	adds	r4, r5, r4
    c1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c1b0:	f080 80cb 	bcs.w	c34a <__udivmoddi4+0x21a>
    c1b4:	45a4      	cmp	ip, r4
    c1b6:	f240 80c8 	bls.w	c34a <__udivmoddi4+0x21a>
    c1ba:	3802      	subs	r0, #2
    c1bc:	442c      	add	r4, r5
    c1be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    c1c2:	eba4 040c 	sub.w	r4, r4, ip
    c1c6:	2700      	movs	r7, #0
    c1c8:	b11e      	cbz	r6, c1d2 <__udivmoddi4+0xa2>
    c1ca:	40d4      	lsrs	r4, r2
    c1cc:	2300      	movs	r3, #0
    c1ce:	e9c6 4300 	strd	r4, r3, [r6]
    c1d2:	4639      	mov	r1, r7
    c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1d8:	2a00      	cmp	r2, #0
    c1da:	d053      	beq.n	c284 <__udivmoddi4+0x154>
    c1dc:	fab2 f282 	clz	r2, r2
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	f040 80b6 	bne.w	c352 <__udivmoddi4+0x222>
    c1e6:	1b49      	subs	r1, r1, r5
    c1e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c1ec:	fa1f f885 	uxth.w	r8, r5
    c1f0:	2701      	movs	r7, #1
    c1f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c1f6:	0c23      	lsrs	r3, r4, #16
    c1f8:	fb0e 111c 	mls	r1, lr, ip, r1
    c1fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c200:	fb08 f10c 	mul.w	r1, r8, ip
    c204:	4299      	cmp	r1, r3
    c206:	d907      	bls.n	c218 <__udivmoddi4+0xe8>
    c208:	18eb      	adds	r3, r5, r3
    c20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c20e:	d202      	bcs.n	c216 <__udivmoddi4+0xe6>
    c210:	4299      	cmp	r1, r3
    c212:	f200 80ec 	bhi.w	c3ee <__udivmoddi4+0x2be>
    c216:	4684      	mov	ip, r0
    c218:	1a59      	subs	r1, r3, r1
    c21a:	b2a3      	uxth	r3, r4
    c21c:	fbb1 f0fe 	udiv	r0, r1, lr
    c220:	fb0e 1410 	mls	r4, lr, r0, r1
    c224:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    c228:	fb08 f800 	mul.w	r8, r8, r0
    c22c:	45a0      	cmp	r8, r4
    c22e:	d907      	bls.n	c240 <__udivmoddi4+0x110>
    c230:	192c      	adds	r4, r5, r4
    c232:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c236:	d202      	bcs.n	c23e <__udivmoddi4+0x10e>
    c238:	45a0      	cmp	r8, r4
    c23a:	f200 80dc 	bhi.w	c3f6 <__udivmoddi4+0x2c6>
    c23e:	4618      	mov	r0, r3
    c240:	eba4 0408 	sub.w	r4, r4, r8
    c244:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c248:	e7be      	b.n	c1c8 <__udivmoddi4+0x98>
    c24a:	428b      	cmp	r3, r1
    c24c:	d908      	bls.n	c260 <__udivmoddi4+0x130>
    c24e:	2e00      	cmp	r6, #0
    c250:	d078      	beq.n	c344 <__udivmoddi4+0x214>
    c252:	2700      	movs	r7, #0
    c254:	e9c6 0100 	strd	r0, r1, [r6]
    c258:	4638      	mov	r0, r7
    c25a:	4639      	mov	r1, r7
    c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c260:	fab3 f783 	clz	r7, r3
    c264:	b97f      	cbnz	r7, c286 <__udivmoddi4+0x156>
    c266:	428b      	cmp	r3, r1
    c268:	d302      	bcc.n	c270 <__udivmoddi4+0x140>
    c26a:	4282      	cmp	r2, r0
    c26c:	f200 80bd 	bhi.w	c3ea <__udivmoddi4+0x2ba>
    c270:	1a84      	subs	r4, r0, r2
    c272:	eb61 0303 	sbc.w	r3, r1, r3
    c276:	2001      	movs	r0, #1
    c278:	4698      	mov	r8, r3
    c27a:	2e00      	cmp	r6, #0
    c27c:	d0a9      	beq.n	c1d2 <__udivmoddi4+0xa2>
    c27e:	e9c6 4800 	strd	r4, r8, [r6]
    c282:	e7a6      	b.n	c1d2 <__udivmoddi4+0xa2>
    c284:	deff      	udf	#255	; 0xff
    c286:	f1c7 0520 	rsb	r5, r7, #32
    c28a:	40bb      	lsls	r3, r7
    c28c:	fa22 fc05 	lsr.w	ip, r2, r5
    c290:	ea4c 0c03 	orr.w	ip, ip, r3
    c294:	fa01 f407 	lsl.w	r4, r1, r7
    c298:	fa20 f805 	lsr.w	r8, r0, r5
    c29c:	fa21 f305 	lsr.w	r3, r1, r5
    c2a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    c2a4:	ea48 0404 	orr.w	r4, r8, r4
    c2a8:	fbb3 f9fe 	udiv	r9, r3, lr
    c2ac:	0c21      	lsrs	r1, r4, #16
    c2ae:	fb0e 3319 	mls	r3, lr, r9, r3
    c2b2:	fa1f f88c 	uxth.w	r8, ip
    c2b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    c2ba:	fb09 fa08 	mul.w	sl, r9, r8
    c2be:	459a      	cmp	sl, r3
    c2c0:	fa02 f207 	lsl.w	r2, r2, r7
    c2c4:	fa00 f107 	lsl.w	r1, r0, r7
    c2c8:	d90b      	bls.n	c2e2 <__udivmoddi4+0x1b2>
    c2ca:	eb1c 0303 	adds.w	r3, ip, r3
    c2ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    c2d2:	f080 8088 	bcs.w	c3e6 <__udivmoddi4+0x2b6>
    c2d6:	459a      	cmp	sl, r3
    c2d8:	f240 8085 	bls.w	c3e6 <__udivmoddi4+0x2b6>
    c2dc:	f1a9 0902 	sub.w	r9, r9, #2
    c2e0:	4463      	add	r3, ip
    c2e2:	eba3 030a 	sub.w	r3, r3, sl
    c2e6:	b2a4      	uxth	r4, r4
    c2e8:	fbb3 f0fe 	udiv	r0, r3, lr
    c2ec:	fb0e 3310 	mls	r3, lr, r0, r3
    c2f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c2f4:	fb00 f808 	mul.w	r8, r0, r8
    c2f8:	45a0      	cmp	r8, r4
    c2fa:	d908      	bls.n	c30e <__udivmoddi4+0x1de>
    c2fc:	eb1c 0404 	adds.w	r4, ip, r4
    c300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c304:	d26b      	bcs.n	c3de <__udivmoddi4+0x2ae>
    c306:	45a0      	cmp	r8, r4
    c308:	d969      	bls.n	c3de <__udivmoddi4+0x2ae>
    c30a:	3802      	subs	r0, #2
    c30c:	4464      	add	r4, ip
    c30e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    c312:	eba4 0408 	sub.w	r4, r4, r8
    c316:	fba0 8902 	umull	r8, r9, r0, r2
    c31a:	454c      	cmp	r4, r9
    c31c:	46c6      	mov	lr, r8
    c31e:	464b      	mov	r3, r9
    c320:	d354      	bcc.n	c3cc <__udivmoddi4+0x29c>
    c322:	d051      	beq.n	c3c8 <__udivmoddi4+0x298>
    c324:	2e00      	cmp	r6, #0
    c326:	d069      	beq.n	c3fc <__udivmoddi4+0x2cc>
    c328:	ebb1 020e 	subs.w	r2, r1, lr
    c32c:	eb64 0403 	sbc.w	r4, r4, r3
    c330:	fa04 f505 	lsl.w	r5, r4, r5
    c334:	fa22 f307 	lsr.w	r3, r2, r7
    c338:	40fc      	lsrs	r4, r7
    c33a:	431d      	orrs	r5, r3
    c33c:	e9c6 5400 	strd	r5, r4, [r6]
    c340:	2700      	movs	r7, #0
    c342:	e746      	b.n	c1d2 <__udivmoddi4+0xa2>
    c344:	4637      	mov	r7, r6
    c346:	4630      	mov	r0, r6
    c348:	e743      	b.n	c1d2 <__udivmoddi4+0xa2>
    c34a:	4618      	mov	r0, r3
    c34c:	e737      	b.n	c1be <__udivmoddi4+0x8e>
    c34e:	4607      	mov	r7, r0
    c350:	e71f      	b.n	c192 <__udivmoddi4+0x62>
    c352:	f1c2 0320 	rsb	r3, r2, #32
    c356:	fa20 f703 	lsr.w	r7, r0, r3
    c35a:	4095      	lsls	r5, r2
    c35c:	fa01 f002 	lsl.w	r0, r1, r2
    c360:	fa21 f303 	lsr.w	r3, r1, r3
    c364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c368:	4338      	orrs	r0, r7
    c36a:	0c01      	lsrs	r1, r0, #16
    c36c:	fbb3 f7fe 	udiv	r7, r3, lr
    c370:	fa1f f885 	uxth.w	r8, r5
    c374:	fb0e 3317 	mls	r3, lr, r7, r3
    c378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c37c:	fb07 f308 	mul.w	r3, r7, r8
    c380:	428b      	cmp	r3, r1
    c382:	fa04 f402 	lsl.w	r4, r4, r2
    c386:	d907      	bls.n	c398 <__udivmoddi4+0x268>
    c388:	1869      	adds	r1, r5, r1
    c38a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    c38e:	d228      	bcs.n	c3e2 <__udivmoddi4+0x2b2>
    c390:	428b      	cmp	r3, r1
    c392:	d926      	bls.n	c3e2 <__udivmoddi4+0x2b2>
    c394:	3f02      	subs	r7, #2
    c396:	4429      	add	r1, r5
    c398:	1acb      	subs	r3, r1, r3
    c39a:	b281      	uxth	r1, r0
    c39c:	fbb3 f0fe 	udiv	r0, r3, lr
    c3a0:	fb0e 3310 	mls	r3, lr, r0, r3
    c3a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c3a8:	fb00 f308 	mul.w	r3, r0, r8
    c3ac:	428b      	cmp	r3, r1
    c3ae:	d907      	bls.n	c3c0 <__udivmoddi4+0x290>
    c3b0:	1869      	adds	r1, r5, r1
    c3b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    c3b6:	d210      	bcs.n	c3da <__udivmoddi4+0x2aa>
    c3b8:	428b      	cmp	r3, r1
    c3ba:	d90e      	bls.n	c3da <__udivmoddi4+0x2aa>
    c3bc:	3802      	subs	r0, #2
    c3be:	4429      	add	r1, r5
    c3c0:	1ac9      	subs	r1, r1, r3
    c3c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c3c6:	e714      	b.n	c1f2 <__udivmoddi4+0xc2>
    c3c8:	4541      	cmp	r1, r8
    c3ca:	d2ab      	bcs.n	c324 <__udivmoddi4+0x1f4>
    c3cc:	ebb8 0e02 	subs.w	lr, r8, r2
    c3d0:	eb69 020c 	sbc.w	r2, r9, ip
    c3d4:	3801      	subs	r0, #1
    c3d6:	4613      	mov	r3, r2
    c3d8:	e7a4      	b.n	c324 <__udivmoddi4+0x1f4>
    c3da:	4660      	mov	r0, ip
    c3dc:	e7f0      	b.n	c3c0 <__udivmoddi4+0x290>
    c3de:	4618      	mov	r0, r3
    c3e0:	e795      	b.n	c30e <__udivmoddi4+0x1de>
    c3e2:	4667      	mov	r7, ip
    c3e4:	e7d8      	b.n	c398 <__udivmoddi4+0x268>
    c3e6:	4681      	mov	r9, r0
    c3e8:	e77b      	b.n	c2e2 <__udivmoddi4+0x1b2>
    c3ea:	4638      	mov	r0, r7
    c3ec:	e745      	b.n	c27a <__udivmoddi4+0x14a>
    c3ee:	f1ac 0c02 	sub.w	ip, ip, #2
    c3f2:	442b      	add	r3, r5
    c3f4:	e710      	b.n	c218 <__udivmoddi4+0xe8>
    c3f6:	3802      	subs	r0, #2
    c3f8:	442c      	add	r4, r5
    c3fa:	e721      	b.n	c240 <__udivmoddi4+0x110>
    c3fc:	4637      	mov	r7, r6
    c3fe:	e6e8      	b.n	c1d2 <__udivmoddi4+0xa2>

0000c400 <__aeabi_idiv0>:
    c400:	4770      	bx	lr
    c402:	bf00      	nop

0000c404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c404:	b480      	push	{r7}
    c406:	b083      	sub	sp, #12
    c408:	af00      	add	r7, sp, #0
    c40a:	4603      	mov	r3, r0
    c40c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c412:	2b00      	cmp	r3, #0
    c414:	db0b      	blt.n	c42e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c416:	79fb      	ldrb	r3, [r7, #7]
    c418:	f003 021f 	and.w	r2, r3, #31
    c41c:	4907      	ldr	r1, [pc, #28]	; (c43c <__NVIC_EnableIRQ+0x38>)
    c41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c422:	095b      	lsrs	r3, r3, #5
    c424:	2001      	movs	r0, #1
    c426:	fa00 f202 	lsl.w	r2, r0, r2
    c42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c42e:	bf00      	nop
    c430:	370c      	adds	r7, #12
    c432:	46bd      	mov	sp, r7
    c434:	f85d 7b04 	ldr.w	r7, [sp], #4
    c438:	4770      	bx	lr
    c43a:	bf00      	nop
    c43c:	e000e100 	.word	0xe000e100

0000c440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c440:	b480      	push	{r7}
    c442:	b083      	sub	sp, #12
    c444:	af00      	add	r7, sp, #0
    c446:	4603      	mov	r3, r0
    c448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c44e:	2b00      	cmp	r3, #0
    c450:	db10      	blt.n	c474 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c452:	79fb      	ldrb	r3, [r7, #7]
    c454:	f003 021f 	and.w	r2, r3, #31
    c458:	4909      	ldr	r1, [pc, #36]	; (c480 <__NVIC_DisableIRQ+0x40>)
    c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c45e:	095b      	lsrs	r3, r3, #5
    c460:	2001      	movs	r0, #1
    c462:	fa00 f202 	lsl.w	r2, r0, r2
    c466:	3320      	adds	r3, #32
    c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c46c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c470:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    c474:	bf00      	nop
    c476:	370c      	adds	r7, #12
    c478:	46bd      	mov	sp, r7
    c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c47e:	4770      	bx	lr
    c480:	e000e100 	.word	0xe000e100

0000c484 <main>:
//
// Main
//
//*****************************************************************************
int main(void)
{
    c484:	b580      	push	{r7, lr}
    c486:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
    c48a:	af00      	add	r7, sp, #0

    bool baud_valid = false;
    c48c:	2300      	movs	r3, #0
    c48e:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    uint32_t bl_baud = 0x00;
    c492:	2300      	movs	r3, #0
    c494:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
    uint8_t bl_buffer[BL_UART_BUF_LEN] = {0};
    c498:	f107 0320 	add.w	r3, r7, #32
    c49c:	4618      	mov	r0, r3
    c49e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    c4a2:	461a      	mov	r2, r3
    c4a4:	2100      	movs	r1, #0
    c4a6:	f001 f945 	bl	d734 <memset>

#define PLLEN_VER 1
    uint8_t packet_ver_buf[PLLEN_VER] = {SVL_VERSION_NUMBER};
    c4aa:	f107 031c 	add.w	r3, r7, #28
    c4ae:	2206      	movs	r2, #6
    c4b0:	701a      	strb	r2, [r3, #0]
    svl_packet_t svl_packet_version = {CMD_VERSION, packet_ver_buf, PLLEN_VER, PLLEN_VER};
    c4b2:	f107 0310 	add.w	r3, r7, #16
    c4b6:	2201      	movs	r2, #1
    c4b8:	701a      	strb	r2, [r3, #0]
    c4ba:	f107 0310 	add.w	r3, r7, #16
    c4be:	f107 021c 	add.w	r2, r7, #28
    c4c2:	605a      	str	r2, [r3, #4]
    c4c4:	f107 0310 	add.w	r3, r7, #16
    c4c8:	2201      	movs	r2, #1
    c4ca:	811a      	strh	r2, [r3, #8]
    c4cc:	f107 0310 	add.w	r3, r7, #16
    c4d0:	2201      	movs	r2, #1
    c4d2:	815a      	strh	r2, [r3, #10]
    svl_packet_t svl_packet_blmode = {CMD_BLMODE, NULL, 0, 0};
    c4d4:	1d3b      	adds	r3, r7, #4
    c4d6:	2202      	movs	r2, #2
    c4d8:	701a      	strb	r2, [r3, #0]
    c4da:	1d3b      	adds	r3, r7, #4
    c4dc:	2200      	movs	r2, #0
    c4de:	605a      	str	r2, [r3, #4]
    c4e0:	1d3b      	adds	r3, r7, #4
    c4e2:	2200      	movs	r2, #0
    c4e4:	811a      	strh	r2, [r3, #8]
    c4e6:	1d3b      	adds	r3, r7, #4
    c4e8:	2200      	movs	r2, #0
    c4ea:	815a      	strh	r2, [r3, #10]

    art_svl_ringbuf_init(&bl_rx_ringbuf, bl_buffer, BL_UART_BUF_LEN);
    c4ec:	f107 0320 	add.w	r3, r7, #32
    c4f0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    c4f4:	4619      	mov	r1, r3
    c4f6:	4827      	ldr	r0, [pc, #156]	; (c594 <main+0x110>)
    c4f8:	f000 ff24 	bl	d344 <art_svl_ringbuf_init>
    setup();
    c4fc:	f000 f85a 	bl	c5b4 <setup>

    debug_printf("\n\nArtemis SVL Bootloader - DEBUG\n\n");
    c500:	4825      	ldr	r0, [pc, #148]	; (c598 <main+0x114>)
    c502:	f000 fb7d 	bl	cc00 <debug_printf>

    baud_valid = detect_baud_rate(&bl_baud); // Detects the baud rate. Returns true if a valid baud rate was found
    c506:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
    c50a:	4618      	mov	r0, r3
    c50c:	f000 f888 	bl	c620 <detect_baud_rate>
    c510:	4603      	mov	r3, r0
    c512:	f887 3a27 	strb.w	r3, [r7, #2599]	; 0xa27
    if (baud_valid == false)
    c516:	f897 3a27 	ldrb.w	r3, [r7, #2599]	; 0xa27
    c51a:	f083 0301 	eor.w	r3, r3, #1
    c51e:	b2db      	uxtb	r3, r3
    c520:	2b00      	cmp	r3, #0
    c522:	d001      	beq.n	c528 <main+0xa4>
    {
        app_start(); // w/o valid baud rate jump t the app
    c524:	f000 fb54 	bl	cbd0 <app_start>
    }

    start_uart_bl(bl_baud); // This will create a 23 us wide low 'blip' on the TX line (until possibly fixed)
    c528:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
    c52c:	4618      	mov	r0, r3
    c52e:	f000 f9b7 	bl	c8a0 <start_uart_bl>
    am_util_delay_us(200);  // At the minimum baud rate of 115200 one byte (10 bits with start/stop) takes 10/115200 or 87 us. 87+23 = 100, double to be safe
    c532:	20c8      	movs	r0, #200	; 0xc8
    c534:	f000 fc00 	bl	cd38 <am_util_delay_us>

    debug_printf("phase:\tconfirm bootloading entry\n");
    c538:	4818      	ldr	r0, [pc, #96]	; (c59c <main+0x118>)
    c53a:	f000 fb61 	bl	cc00 <debug_printf>
    debug_printf("\tsending Artemis SVL version packet\n");
    c53e:	4818      	ldr	r0, [pc, #96]	; (c5a0 <main+0x11c>)
    c540:	f000 fb5e 	bl	cc00 <debug_printf>
    svl_packet_send(&svl_packet_version); // when baud rate is determined send the version packet
    c544:	f107 0310 	add.w	r3, r7, #16
    c548:	4618      	mov	r0, r3
    c54a:	f000 fcb1 	bl	ceb0 <svl_packet_send>

    debug_printf("\twaiting for bootloader confirmation\n");
    c54e:	4815      	ldr	r0, [pc, #84]	; (c5a4 <main+0x120>)
    c550:	f000 fb56 	bl	cc00 <debug_printf>
    if (svl_packet_wait(&svl_packet_blmode) != 0)
    c554:	1d3b      	adds	r3, r7, #4
    c556:	4618      	mov	r0, r3
    c558:	f000 fd9e 	bl	d098 <svl_packet_wait>
    c55c:	4603      	mov	r3, r0
    c55e:	2b00      	cmp	r3, #0
    c560:	d004      	beq.n	c56c <main+0xe8>
    { // wait for the bootloader to confirm bootloader mode entry
        debug_printf("\tno confirmation received\n");
    c562:	4811      	ldr	r0, [pc, #68]	; (c5a8 <main+0x124>)
    c564:	f000 fb4c 	bl	cc00 <debug_printf>
        app_start(); // break to app
    c568:	f000 fb32 	bl	cbd0 <app_start>
    }
    debug_printf("\tentering bootloader\n\n");
    c56c:	480f      	ldr	r0, [pc, #60]	; (c5ac <main+0x128>)
    c56e:	f000 fb47 	bl	cc00 <debug_printf>

    enter_bootload(); // Now we are locked in
    c572:	f000 f9ff 	bl	c974 <enter_bootload>
    am_util_delay_ms(10);
    c576:	200a      	movs	r0, #10
    c578:	f000 fbc0 	bl	ccfc <am_util_delay_ms>

    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0); //Cause a system Power On Init to release as much of the stack as possible
    c57c:	2100      	movs	r1, #0
    c57e:	2001      	movs	r0, #1
    c580:	f001 fd62 	bl	e048 <am_hal_reset_control>

    debug_printf("ERROR - runoff");
    c584:	480a      	ldr	r0, [pc, #40]	; (c5b0 <main+0x12c>)
    c586:	f000 fb3b 	bl	cc00 <debug_printf>
    while (1)
    {                                                    // Loop forever while sleeping.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP); // Go to Deep Sleep.
    c58a:	2001      	movs	r0, #1
    c58c:	f001 fda6 	bl	e0dc <am_hal_sysctrl_sleep>
    c590:	e7fb      	b.n	c58a <main+0x106>
    c592:	bf00      	nop
    c594:	10000210 	.word	0x10000210
    c598:	0000eb5c 	.word	0x0000eb5c
    c59c:	0000eb80 	.word	0x0000eb80
    c5a0:	0000eba4 	.word	0x0000eba4
    c5a4:	0000ebcc 	.word	0x0000ebcc
    c5a8:	0000ebf4 	.word	0x0000ebf4
    c5ac:	0000ec10 	.word	0x0000ec10
    c5b0:	0000ec28 	.word	0x0000ec28

0000c5b4 <setup>:
//
// Setup
//
//*****************************************************************************
void setup(void)
{
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5b8:	2100      	movs	r1, #0
    c5ba:	2000      	movs	r0, #0
    c5bc:	f001 f9d6 	bl	d96c <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c5c0:	480b      	ldr	r0, [pc, #44]	; (c5f0 <setup+0x3c>)
    c5c2:	f001 f9a5 	bl	d910 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c5c6:	f001 f9c7 	bl	d958 <am_hal_cachectrl_enable>

    // Configure the stimer
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_OVERFLOW);
    c5ca:	f44f 7080 	mov.w	r0, #256	; 0x100
    c5ce:	f001 fd6b 	bl	e0a8 <am_hal_stimer_int_enable>
    NVIC_EnableIRQ(STIMER_IRQn);
    c5d2:	2016      	movs	r0, #22
    c5d4:	f7ff ff16 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c5d8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c5dc:	f001 fd54 	bl	e088 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_HFRC_3MHZ);
    c5e0:	2001      	movs	r0, #1
    c5e2:	f001 fd51 	bl	e088 <am_hal_stimer_config>
#ifdef DEBUG
    start_uart_debug();
#endif

    // Enable interrupts.
    am_hal_interrupt_master_enable();
    c5e6:	f001 fca5 	bl	df34 <am_hal_interrupt_master_enable>
}
    c5ea:	bf00      	nop
    c5ec:	bd80      	pop	{r7, pc}
    c5ee:	bf00      	nop
    c5f0:	0000ee60 	.word	0x0000ee60

0000c5f4 <unsetup>:
//
// Un-set-up
//
//*****************************************************************************
void unsetup(void)
{
    c5f4:	b580      	push	{r7, lr}
    c5f6:	af00      	add	r7, sp, #0
    disable_burst_mode();
    c5f8:	f001 f822 	bl	d640 <disable_burst_mode>

    // Deconfigure the stimer
    am_hal_stimer_int_disable(AM_HAL_STIMER_INT_OVERFLOW);
    c5fc:	f44f 7080 	mov.w	r0, #256	; 0x100
    c600:	f001 fd5c 	bl	e0bc <am_hal_stimer_int_disable>
    NVIC_DisableIRQ(STIMER_IRQn);
    c604:	2016      	movs	r0, #22
    c606:	f7ff ff1b 	bl	c440 <__NVIC_DisableIRQ>
    am_hal_stimer_config(AM_HAL_STIMER_CFG_CLEAR | AM_HAL_STIMER_CFG_FREEZE);
    c60a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c60e:	f001 fd3b 	bl	e088 <am_hal_stimer_config>
    am_hal_stimer_config(AM_HAL_STIMER_NO_CLK);
    c612:	2000      	movs	r0, #0
    c614:	f001 fd38 	bl	e088 <am_hal_stimer_config>
#ifdef DEBUG
    stop_uart_debug();
#endif

    // Disable interrupts.
    am_hal_interrupt_master_disable();
    c618:	f001 fc90 	bl	df3c <am_hal_interrupt_master_disable>
}
    c61c:	bf00      	nop
    c61e:	bd80      	pop	{r7, pc}

0000c620 <detect_baud_rate>:
//
// Baud Rate Detect Phase
//
// ****************************************
bool detect_baud_rate(uint32_t *baud)
{
    c620:	b580      	push	{r7, lr}
    c622:	b088      	sub	sp, #32
    c624:	af00      	add	r7, sp, #0
    c626:	6078      	str	r0, [r7, #4]
    uint32_t bl_entry_timeout_ms = 200;
    c628:	23c8      	movs	r3, #200	; 0xc8
    c62a:	613b      	str	r3, [r7, #16]
    uint32_t bl_entry_timeout_start = millis();
    c62c:	f000 ffda 	bl	d5e4 <millis>
    c630:	60f8      	str	r0, [r7, #12]
    bool baud_is_valid = false;
    c632:	2300      	movs	r3, #0
    c634:	77fb      	strb	r3, [r7, #31]
    bool timed_out = true;
    c636:	2301      	movs	r3, #1
    c638:	77bb      	strb	r3, [r7, #30]

    debug_printf("phase:\tdetect baud rate\n");
    c63a:	488f      	ldr	r0, [pc, #572]	; (c878 <detect_baud_rate+0x258>)
    c63c:	f000 fae0 	bl	cc00 <debug_printf>

    enable_burst_mode();
    c640:	f000 ffe4 	bl	d60c <enable_burst_mode>

    am_hal_gpio_pinconfig(BL_RX_PAD, g_AM_HAL_GPIO_INPUT_PULLUP);
    c644:	4b8d      	ldr	r3, [pc, #564]	; (c87c <detect_baud_rate+0x25c>)
    c646:	6819      	ldr	r1, [r3, #0]
    c648:	2031      	movs	r0, #49	; 0x31
    c64a:	f001 facb 	bl	dbe4 <am_hal_gpio_pinconfig>

    ap3_gpio_enable_interrupts(BL_RX_PAD, AM_HAL_GPIO_PIN_INTDIR_LO2HI);
    c64e:	2100      	movs	r1, #0
    c650:	2031      	movs	r0, #49	; 0x31
    c652:	f001 f80b 	bl	d66c <ap3_gpio_enable_interrupts>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c656:	f04f 0000 	mov.w	r0, #0
    c65a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c65e:	f001 fc4b 	bl	def8 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c662:	f04f 0000 	mov.w	r0, #0
    c666:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c66a:	f001 fbfb 	bl	de64 <am_hal_gpio_interrupt_enable>
    NVIC_EnableIRQ(GPIO_IRQn);
    c66e:	200d      	movs	r0, #13
    c670:	f7ff fec8 	bl	c404 <__NVIC_EnableIRQ>

    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c674:	e0c9      	b.n	c80a <detect_baud_rate+0x1ea>
    {
        // try to detect baud rate

        // debug_printf("\ttime (ms):\t%d\n", millis());

        if (bl_baud_ticks_index == BL_BAUD_SAMPLES)
    c676:	4b82      	ldr	r3, [pc, #520]	; (c880 <detect_baud_rate+0x260>)
    c678:	781b      	ldrb	r3, [r3, #0]
    c67a:	b2db      	uxtb	r3, r3
    c67c:	2b05      	cmp	r3, #5
    c67e:	f040 80c4 	bne.w	c80a <detect_baud_rate+0x1ea>
        {

            // compute differences between samples
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c682:	2300      	movs	r3, #0
    c684:	777b      	strb	r3, [r7, #29]
    c686:	e010      	b.n	c6aa <detect_baud_rate+0x8a>
            {
                bl_baud_ticks[indi] = bl_baud_ticks[indi + 1] - bl_baud_ticks[indi];
    c688:	7f7b      	ldrb	r3, [r7, #29]
    c68a:	3301      	adds	r3, #1
    c68c:	4a7d      	ldr	r2, [pc, #500]	; (c884 <detect_baud_rate+0x264>)
    c68e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c692:	7f7b      	ldrb	r3, [r7, #29]
    c694:	4a7b      	ldr	r2, [pc, #492]	; (c884 <detect_baud_rate+0x264>)
    c696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c69a:	7f7b      	ldrb	r3, [r7, #29]
    c69c:	1a8a      	subs	r2, r1, r2
    c69e:	4979      	ldr	r1, [pc, #484]	; (c884 <detect_baud_rate+0x264>)
    c6a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6a4:	7f7b      	ldrb	r3, [r7, #29]
    c6a6:	3301      	adds	r3, #1
    c6a8:	777b      	strb	r3, [r7, #29]
    c6aa:	7f7b      	ldrb	r3, [r7, #29]
    c6ac:	2b03      	cmp	r3, #3
    c6ae:	d9eb      	bls.n	c688 <detect_baud_rate+0x68>
            }

            float mean = 0.0;
    c6b0:	f04f 0300 	mov.w	r3, #0
    c6b4:	61bb      	str	r3, [r7, #24]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6b6:	2300      	movs	r3, #0
    c6b8:	75fb      	strb	r3, [r7, #23]
    c6ba:	e010      	b.n	c6de <detect_baud_rate+0xbe>
            {
                mean += bl_baud_ticks[indi];
    c6bc:	7dfb      	ldrb	r3, [r7, #23]
    c6be:	4a71      	ldr	r2, [pc, #452]	; (c884 <detect_baud_rate+0x264>)
    c6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6c4:	ee07 3a90 	vmov	s15, r3
    c6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c6cc:	ed97 7a06 	vldr	s14, [r7, #24]
    c6d0:	ee77 7a27 	vadd.f32	s15, s14, s15
    c6d4:	edc7 7a06 	vstr	s15, [r7, #24]
            for (uint8_t indi = 0; indi < (BL_BAUD_SAMPLES - 1); indi++)
    c6d8:	7dfb      	ldrb	r3, [r7, #23]
    c6da:	3301      	adds	r3, #1
    c6dc:	75fb      	strb	r3, [r7, #23]
    c6de:	7dfb      	ldrb	r3, [r7, #23]
    c6e0:	2b03      	cmp	r3, #3
    c6e2:	d9eb      	bls.n	c6bc <detect_baud_rate+0x9c>
            }
            mean /= (BL_BAUD_SAMPLES - 1);
    c6e4:	ed97 7a06 	vldr	s14, [r7, #24]
    c6e8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    c6ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
    c6f0:	edc7 7a06 	vstr	s15, [r7, #24]

            if (mean < 3)
    c6f4:	edd7 7a06 	vldr	s15, [r7, #24]
    c6f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    c6fc:	eef4 7ac7 	vcmpe.f32	s15, s14
    c700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c704:	d47b      	bmi.n	c7fe <detect_baud_rate+0x1de>
            {
                // invalid
            }
            else if ((mean >= 4) && (mean <= 8))
    c706:	edd7 7a06 	vldr	s15, [r7, #24]
    c70a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    c70e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c716:	db0f      	blt.n	c738 <detect_baud_rate+0x118>
    c718:	edd7 7a06 	vldr	s15, [r7, #24]
    c71c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    c720:	eef4 7ac7 	vcmpe.f32	s15, s14
    c724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c728:	d806      	bhi.n	c738 <detect_baud_rate+0x118>
            {
                *baud = 921600;
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
    c730:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c732:	2301      	movs	r3, #1
    c734:	77fb      	strb	r3, [r7, #31]
    c736:	e062      	b.n	c7fe <detect_baud_rate+0x1de>
            }
            else if ((mean >= 10) && (mean <= 14))
    c738:	edd7 7a06 	vldr	s15, [r7, #24]
    c73c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c740:	eef4 7ac7 	vcmpe.f32	s15, s14
    c744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c748:	db0f      	blt.n	c76a <detect_baud_rate+0x14a>
    c74a:	edd7 7a06 	vldr	s15, [r7, #24]
    c74e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
    c752:	eef4 7ac7 	vcmpe.f32	s15, s14
    c756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c75a:	d806      	bhi.n	c76a <detect_baud_rate+0x14a>
            {
                *baud = 460800;
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
    c762:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c764:	2301      	movs	r3, #1
    c766:	77fb      	strb	r3, [r7, #31]
    c768:	e049      	b.n	c7fe <detect_baud_rate+0x1de>
            }
            else if ((mean >= 25) && (mean <= 30))
    c76a:	edd7 7a06 	vldr	s15, [r7, #24]
    c76e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    c772:	eef4 7ac7 	vcmpe.f32	s15, s14
    c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c77a:	db0f      	blt.n	c79c <detect_baud_rate+0x17c>
    c77c:	edd7 7a06 	vldr	s15, [r7, #24]
    c780:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
    c784:	eef4 7ac7 	vcmpe.f32	s15, s14
    c788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c78c:	d806      	bhi.n	c79c <detect_baud_rate+0x17c>
            {
                *baud = 230400;
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	f44f 3261 	mov.w	r2, #230400	; 0x38400
    c794:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c796:	2301      	movs	r3, #1
    c798:	77fb      	strb	r3, [r7, #31]
    c79a:	e030      	b.n	c7fe <detect_baud_rate+0x1de>
            }
            else if ((mean >= 45) && (mean <= 55))
    c79c:	edd7 7a06 	vldr	s15, [r7, #24]
    c7a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; c888 <detect_baud_rate+0x268>
    c7a4:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7ac:	db0f      	blt.n	c7ce <detect_baud_rate+0x1ae>
    c7ae:	edd7 7a06 	vldr	s15, [r7, #24]
    c7b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; c88c <detect_baud_rate+0x26c>
    c7b6:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7be:	d806      	bhi.n	c7ce <detect_baud_rate+0x1ae>
            {
                *baud = 115200;
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    c7c6:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7c8:	2301      	movs	r3, #1
    c7ca:	77fb      	strb	r3, [r7, #31]
    c7cc:	e017      	b.n	c7fe <detect_baud_rate+0x1de>
            }
            else if ((mean >= 91) && (mean <= 111))
    c7ce:	edd7 7a06 	vldr	s15, [r7, #24]
    c7d2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; c890 <detect_baud_rate+0x270>
    c7d6:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7de:	db0e      	blt.n	c7fe <detect_baud_rate+0x1de>
    c7e0:	edd7 7a06 	vldr	s15, [r7, #24]
    c7e4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; c894 <detect_baud_rate+0x274>
    c7e8:	eef4 7ac7 	vcmpe.f32	s15, s14
    c7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7f0:	d805      	bhi.n	c7fe <detect_baud_rate+0x1de>
            {
                *baud = 57600;
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
    c7f8:	601a      	str	r2, [r3, #0]
                baud_is_valid = true;
    c7fa:	2301      	movs	r3, #1
    c7fc:	77fb      	strb	r3, [r7, #31]
            else
            {
                // invalid
            }

            if (baud_is_valid)
    c7fe:	7ffb      	ldrb	r3, [r7, #31]
    c800:	2b00      	cmp	r3, #0
    c802:	d00c      	beq.n	c81e <detect_baud_rate+0x1fe>
            {
                timed_out = false;
    c804:	2300      	movs	r3, #0
    c806:	77bb      	strb	r3, [r7, #30]
            }

            break; // exit the timeout loop
    c808:	e009      	b.n	c81e <detect_baud_rate+0x1fe>
    while ((millis() - bl_entry_timeout_start) < bl_entry_timeout_ms)
    c80a:	f000 feeb 	bl	d5e4 <millis>
    c80e:	4602      	mov	r2, r0
    c810:	68fb      	ldr	r3, [r7, #12]
    c812:	1ad3      	subs	r3, r2, r3
    c814:	693a      	ldr	r2, [r7, #16]
    c816:	429a      	cmp	r2, r3
    c818:	f63f af2d 	bhi.w	c676 <detect_baud_rate+0x56>
    c81c:	e000      	b.n	c820 <detect_baud_rate+0x200>
            break; // exit the timeout loop
    c81e:	bf00      	nop
        }
    }

    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c820:	f04f 0000 	mov.w	r0, #0
    c824:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c828:	f001 fb40 	bl	deac <am_hal_gpio_interrupt_disable>
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    c82c:	f04f 0000 	mov.w	r0, #0
    c830:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c834:	f001 fb60 	bl	def8 <am_hal_gpio_interrupt_clear>
    NVIC_DisableIRQ(GPIO_IRQn);
    c838:	200d      	movs	r0, #13
    c83a:	f7ff fe01 	bl	c440 <__NVIC_DisableIRQ>

    disable_burst_mode();
    c83e:	f000 feff 	bl	d640 <disable_burst_mode>
        }
    }
    debug_printf("}\n");
#endif // DEBUG

    if (!baud_is_valid)
    c842:	7ffb      	ldrb	r3, [r7, #31]
    c844:	f083 0301 	eor.w	r3, r3, #1
    c848:	b2db      	uxtb	r3, r3
    c84a:	2b00      	cmp	r3, #0
    c84c:	d009      	beq.n	c862 <detect_baud_rate+0x242>
    {
        debug_printf("\tbaud rate not detected.\n\t\trising edges:\t%d\n\t\ttimed out:\t%d\n\n", bl_baud_ticks_index, timed_out);
    c84e:	4b0c      	ldr	r3, [pc, #48]	; (c880 <detect_baud_rate+0x260>)
    c850:	781b      	ldrb	r3, [r3, #0]
    c852:	b2db      	uxtb	r3, r3
    c854:	4619      	mov	r1, r3
    c856:	7fbb      	ldrb	r3, [r7, #30]
    c858:	461a      	mov	r2, r3
    c85a:	480f      	ldr	r0, [pc, #60]	; (c898 <detect_baud_rate+0x278>)
    c85c:	f000 f9d0 	bl	cc00 <debug_printf>
    c860:	e005      	b.n	c86e <detect_baud_rate+0x24e>
    }
    else
    {
        debug_printf("\tdetected valid baud rate:\t%d\n\n", *baud);
    c862:	687b      	ldr	r3, [r7, #4]
    c864:	681b      	ldr	r3, [r3, #0]
    c866:	4619      	mov	r1, r3
    c868:	480c      	ldr	r0, [pc, #48]	; (c89c <detect_baud_rate+0x27c>)
    c86a:	f000 f9c9 	bl	cc00 <debug_printf>
    }

    return baud_is_valid;
    c86e:	7ffb      	ldrb	r3, [r7, #31]
}
    c870:	4618      	mov	r0, r3
    c872:	3720      	adds	r7, #32
    c874:	46bd      	mov	sp, r7
    c876:	bd80      	pop	{r7, pc}
    c878:	0000ec38 	.word	0x0000ec38
    c87c:	0000ee68 	.word	0x0000ee68
    c880:	10000224 	.word	0x10000224
    c884:	10000228 	.word	0x10000228
    c888:	42340000 	.word	0x42340000
    c88c:	425c0000 	.word	0x425c0000
    c890:	42b60000 	.word	0x42b60000
    c894:	42de0000 	.word	0x42de0000
    c898:	0000ec54 	.word	0x0000ec54
    c89c:	0000ec94 	.word	0x0000ec94

0000c8a0 <start_uart_bl>:
//
// Start BL UART at desired baud
//
//*****************************************************************************
void start_uart_bl(uint32_t baud)
{
    c8a0:	b580      	push	{r7, lr}
    c8a2:	b08e      	sub	sp, #56	; 0x38
    c8a4:	af00      	add	r7, sp, #0
    c8a6:	6078      	str	r0, [r7, #4]
    const am_hal_gpio_pincfg_t bl_uart_tx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, TX, BL_TX_PAD);
    c8a8:	2300      	movs	r3, #0
    c8aa:	637b      	str	r3, [r7, #52]	; 0x34
    const am_hal_gpio_pincfg_t bl_uart_rx_pinconfig = UART_GPIO_PINCONFIG(BL_UART_INST, RX, BL_RX_PAD);
    c8ac:	2300      	movs	r3, #0
    c8ae:	633b      	str	r3, [r7, #48]	; 0x30
    am_hal_uart_config_t bl_uart_config =
    c8b0:	687b      	ldr	r3, [r7, #4]
    c8b2:	60bb      	str	r3, [r7, #8]
    c8b4:	2360      	movs	r3, #96	; 0x60
    c8b6:	60fb      	str	r3, [r7, #12]
    c8b8:	2300      	movs	r3, #0
    c8ba:	613b      	str	r3, [r7, #16]
    c8bc:	2300      	movs	r3, #0
    c8be:	617b      	str	r3, [r7, #20]
    c8c0:	2300      	movs	r3, #0
    c8c2:	61bb      	str	r3, [r7, #24]
    c8c4:	2312      	movs	r3, #18
    c8c6:	61fb      	str	r3, [r7, #28]
    c8c8:	2300      	movs	r3, #0
    c8ca:	623b      	str	r3, [r7, #32]
    c8cc:	2300      	movs	r3, #0
    c8ce:	627b      	str	r3, [r7, #36]	; 0x24
    c8d0:	2300      	movs	r3, #0
    c8d2:	62bb      	str	r3, [r7, #40]	; 0x28
    c8d4:	2300      	movs	r3, #0
    c8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            .pui8RxBuffer = NULL,
            .ui32RxBufferSize = 0,
        };

    // Initialize the printf interface for UART output.
    am_hal_uart_initialize(BL_UART_INST, &hUART_bl);
    c8d8:	491f      	ldr	r1, [pc, #124]	; (c958 <start_uart_bl+0xb8>)
    c8da:	2000      	movs	r0, #0
    c8dc:	f001 fc36 	bl	e14c <am_hal_uart_initialize>
    am_hal_uart_power_control(hUART_bl, AM_HAL_SYSCTRL_WAKE, false);
    c8e0:	4b1d      	ldr	r3, [pc, #116]	; (c958 <start_uart_bl+0xb8>)
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	2200      	movs	r2, #0
    c8e6:	2100      	movs	r1, #0
    c8e8:	4618      	mov	r0, r3
    c8ea:	f001 fc57 	bl	e19c <am_hal_uart_power_control>
    am_hal_uart_configure(hUART_bl, &bl_uart_config);
    c8ee:	4b1a      	ldr	r3, [pc, #104]	; (c958 <start_uart_bl+0xb8>)
    c8f0:	681b      	ldr	r3, [r3, #0]
    c8f2:	f107 0208 	add.w	r2, r7, #8
    c8f6:	4611      	mov	r1, r2
    c8f8:	4618      	mov	r0, r3
    c8fa:	f001 fcc7 	bl	e28c <am_hal_uart_configure>

    // Disable that pesky FIFO
    UARTn(BL_UART_INST)->LCRH_b.FEN = 0;
    c8fe:	4a17      	ldr	r2, [pc, #92]	; (c95c <start_uart_bl+0xbc>)
    c900:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    c904:	f36f 1304 	bfc	r3, #4, #1
    c908:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

    // Enable the UART pins.
    am_hal_gpio_pinconfig(BL_TX_PAD, bl_uart_tx_pinconfig);
    c90c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    c90e:	2030      	movs	r0, #48	; 0x30
    c910:	f001 f968 	bl	dbe4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(BL_RX_PAD, bl_uart_rx_pinconfig);
    c914:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c916:	2031      	movs	r0, #49	; 0x31
    c918:	f001 f964 	bl	dbe4 <am_hal_gpio_pinconfig>

    // Enable interrupts.
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + BL_UART_INST));
    c91c:	200f      	movs	r0, #15
    c91e:	f7ff fd71 	bl	c404 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(hUART_bl, (AM_HAL_UART_INT_RX));
    c922:	4b0d      	ldr	r3, [pc, #52]	; (c958 <start_uart_bl+0xb8>)
    c924:	681b      	ldr	r3, [r3, #0]
    c926:	2110      	movs	r1, #16
    c928:	4618      	mov	r0, r3
    c92a:	f002 f84d 	bl	e9c8 <am_hal_uart_interrupt_enable>

    // Provide SVL Packet interfaces
    svl_packet_link_read_fn(art_svl_ringbuf_read, &bl_rx_ringbuf);
    c92e:	490c      	ldr	r1, [pc, #48]	; (c960 <start_uart_bl+0xc0>)
    c930:	480c      	ldr	r0, [pc, #48]	; (c964 <start_uart_bl+0xc4>)
    c932:	f000 fa6b 	bl	ce0c <svl_packet_link_read_fn>
    svl_packet_link_avail_fn(art_svl_ringbuf_available, &bl_rx_ringbuf);
    c936:	490a      	ldr	r1, [pc, #40]	; (c960 <start_uart_bl+0xc0>)
    c938:	480b      	ldr	r0, [pc, #44]	; (c968 <start_uart_bl+0xc8>)
    c93a:	f000 fa93 	bl	ce64 <svl_packet_link_avail_fn>
    svl_packet_link_millis_fn(millis);
    c93e:	480b      	ldr	r0, [pc, #44]	; (c96c <start_uart_bl+0xcc>)
    c940:	f000 faa6 	bl	ce90 <svl_packet_link_millis_fn>
    svl_packet_link_write_fn(svl_uart_write_byte, hUART_bl);
    c944:	4b04      	ldr	r3, [pc, #16]	; (c958 <start_uart_bl+0xb8>)
    c946:	681b      	ldr	r3, [r3, #0]
    c948:	4619      	mov	r1, r3
    c94a:	4809      	ldr	r0, [pc, #36]	; (c970 <start_uart_bl+0xd0>)
    c94c:	f000 fa74 	bl	ce38 <svl_packet_link_write_fn>
}
    c950:	bf00      	nop
    c952:	3738      	adds	r7, #56	; 0x38
    c954:	46bd      	mov	sp, r7
    c956:	bd80      	pop	{r7, pc}
    c958:	10000220 	.word	0x10000220
    c95c:	4001c000 	.word	0x4001c000
    c960:	10000210 	.word	0x10000210
    c964:	0000d491 	.word	0x0000d491
    c968:	0000d387 	.word	0x0000d387
    c96c:	0000d5e5 	.word	0x0000d5e5
    c970:	0000d569 	.word	0x0000d569

0000c974 <enter_bootload>:
//
// Bootload phase
//
// ****************************************
void enter_bootload(void)
{
    c974:	b580      	push	{r7, lr}
    c976:	b08c      	sub	sp, #48	; 0x30
    c978:	af00      	add	r7, sp, #0
    enable_burst_mode();
    c97a:	f000 fe47 	bl	d60c <enable_burst_mode>
    bool done = false;
    c97e:	2300      	movs	r3, #0
    c980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t frame_address = 0;
    c984:	2300      	movs	r3, #0
    c986:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t last_page_erased = 0;
    c988:	2300      	movs	r3, #0
    c98a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t retransmit = 0;
    c98c:	2300      	movs	r3, #0
    c98e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    static uint32_t frame_buffer[FRAME_BUFFER_SIZE];

    svl_packet_t svl_packet_incoming_frame = {CMD_FRAME, (uint8_t *)frame_buffer, sizeof(frame_buffer) / sizeof(uint8_t), sizeof(frame_buffer) / sizeof(uint8_t)};
    c992:	4a41      	ldr	r2, [pc, #260]	; (ca98 <enter_bootload+0x124>)
    c994:	f107 0318 	add.w	r3, r7, #24
    c998:	ca07      	ldmia	r2, {r0, r1, r2}
    c99a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    svl_packet_t svl_packet_retry = {CMD_RETRY, NULL, 0, 0};
    c99e:	2305      	movs	r3, #5
    c9a0:	733b      	strb	r3, [r7, #12]
    c9a2:	2300      	movs	r3, #0
    c9a4:	613b      	str	r3, [r7, #16]
    c9a6:	2300      	movs	r3, #0
    c9a8:	82bb      	strh	r3, [r7, #20]
    c9aa:	2300      	movs	r3, #0
    c9ac:	82fb      	strh	r3, [r7, #22]
    svl_packet_t svl_packet_next = {CMD_NEXT, NULL, 0, 0};
    c9ae:	2303      	movs	r3, #3
    c9b0:	703b      	strb	r3, [r7, #0]
    c9b2:	2300      	movs	r3, #0
    c9b4:	607b      	str	r3, [r7, #4]
    c9b6:	2300      	movs	r3, #0
    c9b8:	813b      	strh	r3, [r7, #8]
    c9ba:	2300      	movs	r3, #0
    c9bc:	817b      	strh	r3, [r7, #10]

    debug_printf("phase:\tbootload\n");
    c9be:	4837      	ldr	r0, [pc, #220]	; (ca9c <enter_bootload+0x128>)
    c9c0:	f000 f91e 	bl	cc00 <debug_printf>

    while (!done)
    c9c4:	e05c      	b.n	ca80 <enter_bootload+0x10c>
    {

        if (retransmit != 0)
    c9c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    c9ca:	2b00      	cmp	r3, #0
    c9cc:	d008      	beq.n	c9e0 <enter_bootload+0x6c>
        {
            debug_printf("\trequesting retransmission\n");
    c9ce:	4834      	ldr	r0, [pc, #208]	; (caa0 <enter_bootload+0x12c>)
    c9d0:	f000 f916 	bl	cc00 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_retry); // Ask to retransmit
    c9d4:	f107 030c 	add.w	r3, r7, #12
    c9d8:	4618      	mov	r0, r3
    c9da:	f000 fa69 	bl	ceb0 <svl_packet_send>
    c9de:	e006      	b.n	c9ee <enter_bootload+0x7a>
        }
        else
        {
            debug_printf("\trequesting next app frame\n");
    c9e0:	4830      	ldr	r0, [pc, #192]	; (caa4 <enter_bootload+0x130>)
    c9e2:	f000 f90d 	bl	cc00 <debug_printf>
            svl_packet_send((svl_packet_t *)&svl_packet_next); // Ask for the next frame packet
    c9e6:	463b      	mov	r3, r7
    c9e8:	4618      	mov	r0, r3
    c9ea:	f000 fa61 	bl	ceb0 <svl_packet_send>
        }
        retransmit = 0;
    c9ee:	2300      	movs	r3, #0
    c9f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t stat = svl_packet_wait(&svl_packet_incoming_frame);
    c9f4:	f107 0318 	add.w	r3, r7, #24
    c9f8:	4618      	mov	r0, r3
    c9fa:	f000 fb4d 	bl	d098 <svl_packet_wait>
    c9fe:	4603      	mov	r3, r0
    ca00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (stat != 0)
    ca04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ca08:	2b00      	cmp	r3, #0
    ca0a:	d012      	beq.n	ca32 <enter_bootload+0xbe>
        { // wait for either a frame or the done command
            debug_printf("\t\terror receiving packet (%d)\n", stat);
    ca0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ca10:	4619      	mov	r1, r3
    ca12:	4825      	ldr	r0, [pc, #148]	; (caa8 <enter_bootload+0x134>)
    ca14:	f000 f8f4 	bl	cc00 <debug_printf>
            retransmit = 1;
    ca18:	2301      	movs	r3, #1
    ca1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            am_util_delay_us(177000); //Worst case: wait 177ms for 2048 byte transfer at 115200bps to complete
    ca1e:	4823      	ldr	r0, [pc, #140]	; (caac <enter_bootload+0x138>)
    ca20:	f000 f98a 	bl	cd38 <am_util_delay_us>

            //Flush the buffers to remove any inbound or outbound garbage
            bl_rx_ringbuf.r_offset = 0;
    ca24:	4b22      	ldr	r3, [pc, #136]	; (cab0 <enter_bootload+0x13c>)
    ca26:	2200      	movs	r2, #0
    ca28:	609a      	str	r2, [r3, #8]
            bl_rx_ringbuf.w_offset = 0;
    ca2a:	4b21      	ldr	r3, [pc, #132]	; (cab0 <enter_bootload+0x13c>)
    ca2c:	2200      	movs	r2, #0
    ca2e:	60da      	str	r2, [r3, #12]
            continue;
    ca30:	e026      	b.n	ca80 <enter_bootload+0x10c>
        }

        // debug_printf("Successfully received incoming frame packet (todo: add extra details in debug)\n", stat);

        if (svl_packet_incoming_frame.cmd == CMD_FRAME)
    ca32:	7e3b      	ldrb	r3, [r7, #24]
    ca34:	2b04      	cmp	r3, #4
    ca36:	d112      	bne.n	ca5e <enter_bootload+0xea>
        {
            debug_printf("\t\treceived an app frame\n");
    ca38:	481e      	ldr	r0, [pc, #120]	; (cab4 <enter_bootload+0x140>)
    ca3a:	f000 f8e1 	bl	cc00 <debug_printf>
            if (handle_frame_packet(&svl_packet_incoming_frame, &frame_address, &last_page_erased) != 0)
    ca3e:	f107 0226 	add.w	r2, r7, #38	; 0x26
    ca42:	f107 0128 	add.w	r1, r7, #40	; 0x28
    ca46:	f107 0318 	add.w	r3, r7, #24
    ca4a:	4618      	mov	r0, r3
    ca4c:	f000 f838 	bl	cac0 <handle_frame_packet>
    ca50:	4603      	mov	r3, r0
    ca52:	2b00      	cmp	r3, #0
    ca54:	d014      	beq.n	ca80 <enter_bootload+0x10c>
            {
                // debug_printf("\t\t\tbootload error - packet could not be handled\n");
                retransmit = 1;
    ca56:	2301      	movs	r3, #1
    ca58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                continue;
    ca5c:	e010      	b.n	ca80 <enter_bootload+0x10c>
            }
        }
        else if (svl_packet_incoming_frame.cmd == CMD_DONE)
    ca5e:	7e3b      	ldrb	r3, [r7, #24]
    ca60:	2b06      	cmp	r3, #6
    ca62:	d106      	bne.n	ca72 <enter_bootload+0xfe>
        {
            debug_printf("\t\treceived done signal!\n\n");
    ca64:	4814      	ldr	r0, [pc, #80]	; (cab8 <enter_bootload+0x144>)
    ca66:	f000 f8cb 	bl	cc00 <debug_printf>
            done = true;
    ca6a:	2301      	movs	r3, #1
    ca6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ca70:	e006      	b.n	ca80 <enter_bootload+0x10c>
        }
        else
        {
            debug_printf("bootload error - unknown command\n");
    ca72:	4812      	ldr	r0, [pc, #72]	; (cabc <enter_bootload+0x148>)
    ca74:	f000 f8c4 	bl	cc00 <debug_printf>
            retransmit = 1;
    ca78:	2301      	movs	r3, #1
    ca7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            continue;
    ca7e:	bf00      	nop
    while (!done)
    ca80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ca84:	f083 0301 	eor.w	r3, r3, #1
    ca88:	b2db      	uxtb	r3, r3
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d19b      	bne.n	c9c6 <enter_bootload+0x52>
        }
    }

    // finish bootloading
}
    ca8e:	bf00      	nop
    ca90:	3730      	adds	r7, #48	; 0x30
    ca92:	46bd      	mov	sp, r7
    ca94:	bd80      	pop	{r7, pc}
    ca96:	bf00      	nop
    ca98:	0000ed7c 	.word	0x0000ed7c
    ca9c:	0000ecb4 	.word	0x0000ecb4
    caa0:	0000ecc8 	.word	0x0000ecc8
    caa4:	0000ece4 	.word	0x0000ece4
    caa8:	0000ed00 	.word	0x0000ed00
    caac:	0002b368 	.word	0x0002b368
    cab0:	10000210 	.word	0x10000210
    cab4:	0000ed20 	.word	0x0000ed20
    cab8:	0000ed3c 	.word	0x0000ed3c
    cabc:	0000ed58 	.word	0x0000ed58

0000cac0 <handle_frame_packet>:
//
// Handle a frame packet
//
// ****************************************
uint8_t handle_frame_packet(svl_packet_t *packet, uint32_t *p_frame_address, uint16_t *p_last_page_erased)
{
    cac0:	b580      	push	{r7, lr}
    cac2:	b088      	sub	sp, #32
    cac4:	af00      	add	r7, sp, #0
    cac6:	60f8      	str	r0, [r7, #12]
    cac8:	60b9      	str	r1, [r7, #8]
    caca:	607a      	str	r2, [r7, #4]
    // debug_printf("\t\thandling frame\n");
    static uint16_t last_inst_erased=0; //to keep track of last instance of flash
    uint32_t num_words = (packet->pl_len / 4);
    cacc:	68fb      	ldr	r3, [r7, #12]
    cace:	891b      	ldrh	r3, [r3, #8]
    cad0:	089b      	lsrs	r3, r3, #2
    cad2:	b29b      	uxth	r3, r3
    cad4:	61fb      	str	r3, [r7, #28]

    debug_printf("\t\tframe_address = 0x%08X, num_words = %d\n", *(p_frame_address), num_words);
    cad6:	68bb      	ldr	r3, [r7, #8]
    cad8:	681b      	ldr	r3, [r3, #0]
    cada:	69fa      	ldr	r2, [r7, #28]
    cadc:	4619      	mov	r1, r3
    cade:	4836      	ldr	r0, [pc, #216]	; (cbb8 <handle_frame_packet+0xf8>)
    cae0:	f000 f88e 	bl	cc00 <debug_printf>

    // Check payload length is multiple of words
    if ((packet->pl_len % 4))
    cae4:	68fb      	ldr	r3, [r7, #12]
    cae6:	891b      	ldrh	r3, [r3, #8]
    cae8:	f003 0303 	and.w	r3, r3, #3
    caec:	b29b      	uxth	r3, r3
    caee:	2b00      	cmp	r3, #0
    caf0:	d004      	beq.n	cafc <handle_frame_packet+0x3c>
    {
        debug_printf("Error: frame packet not integer multiple of words (4 bytes per word)\n");
    caf2:	4832      	ldr	r0, [pc, #200]	; (cbbc <handle_frame_packet+0xfc>)
    caf4:	f000 f884 	bl	cc00 <debug_printf>
        return 1;
    caf8:	2301      	movs	r3, #1
    cafa:	e059      	b.n	cbb0 <handle_frame_packet+0xf0>
    }

    int32_t i32ReturnCode = 0;
    cafc:	2300      	movs	r3, #0
    cafe:	61bb      	str	r3, [r7, #24]
    uint32_t offset_address = (*(p_frame_address) + USERCODE_OFFSET);
    cb00:	68bb      	ldr	r3, [r7, #8]
    cb02:	681b      	ldr	r3, [r3, #0]
    cb04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cb08:	617b      	str	r3, [r7, #20]
    //if the last page was less than current page, or we switched into next instance
    if ((*p_last_page_erased) < AM_HAL_FLASH_ADDR2PAGE(offset_address) || (last_inst_erased < AM_HAL_FLASH_ADDR2INST(offset_address)))
    cb0a:	687b      	ldr	r3, [r7, #4]
    cb0c:	881b      	ldrh	r3, [r3, #0]
    cb0e:	461a      	mov	r2, r3
    cb10:	697b      	ldr	r3, [r7, #20]
    cb12:	0b5b      	lsrs	r3, r3, #13
    cb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cb18:	429a      	cmp	r2, r3
    cb1a:	d308      	bcc.n	cb2e <handle_frame_packet+0x6e>
    cb1c:	4b28      	ldr	r3, [pc, #160]	; (cbc0 <handle_frame_packet+0x100>)
    cb1e:	881b      	ldrh	r3, [r3, #0]
    cb20:	461a      	mov	r2, r3
    cb22:	697b      	ldr	r3, [r7, #20]
    cb24:	0cdb      	lsrs	r3, r3, #19
    cb26:	f003 0301 	and.w	r3, r3, #1
    cb2a:	429a      	cmp	r2, r3
    cb2c:	d223      	bcs.n	cb76 <handle_frame_packet+0xb6>
    { // Prevent erasing partially-filled pages
        // debug_printf("Erasing instance %d, page %d\n\r", AM_HAL_FLASH_ADDR2INST( offset_address ), AM_HAL_FLASH_ADDR2PAGE(offset_address) );

        //Erase the 8k page for this address
        i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, AM_HAL_FLASH_ADDR2INST(offset_address), AM_HAL_FLASH_ADDR2PAGE(offset_address));
    cb2e:	697b      	ldr	r3, [r7, #20]
    cb30:	0cdb      	lsrs	r3, r3, #19
    cb32:	f003 0101 	and.w	r1, r3, #1
    cb36:	697b      	ldr	r3, [r7, #20]
    cb38:	0b5b      	lsrs	r3, r3, #13
    cb3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cb3e:	461a      	mov	r2, r3
    cb40:	4820      	ldr	r0, [pc, #128]	; (cbc4 <handle_frame_packet+0x104>)
    cb42:	f000 ffcd 	bl	dae0 <am_hal_flash_page_erase>
    cb46:	61b8      	str	r0, [r7, #24]
        *(p_last_page_erased) = AM_HAL_FLASH_ADDR2PAGE(offset_address);
    cb48:	697b      	ldr	r3, [r7, #20]
    cb4a:	0b5b      	lsrs	r3, r3, #13
    cb4c:	b29b      	uxth	r3, r3
    cb4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cb52:	b29a      	uxth	r2, r3
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	801a      	strh	r2, [r3, #0]
        last_inst_erased=AM_HAL_FLASH_ADDR2INST(offset_address); //keep track of last instance
    cb58:	697b      	ldr	r3, [r7, #20]
    cb5a:	0cdb      	lsrs	r3, r3, #19
    cb5c:	b29b      	uxth	r3, r3
    cb5e:	f003 0301 	and.w	r3, r3, #1
    cb62:	b29a      	uxth	r2, r3
    cb64:	4b16      	ldr	r3, [pc, #88]	; (cbc0 <handle_frame_packet+0x100>)
    cb66:	801a      	strh	r2, [r3, #0]

        if (i32ReturnCode)
    cb68:	69bb      	ldr	r3, [r7, #24]
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d003      	beq.n	cb76 <handle_frame_packet+0xb6>
        {
            debug_printf("FLASH_MASS_ERASE i32ReturnCode = 0x%x.\n\r", i32ReturnCode);
    cb6e:	69b9      	ldr	r1, [r7, #24]
    cb70:	4815      	ldr	r0, [pc, #84]	; (cbc8 <handle_frame_packet+0x108>)
    cb72:	f000 f845 	bl	cc00 <debug_printf>
        }
    }

    //Record the array
    //debug_printf("Recording %d words (%d bytes) to memory\n", num_words, 4 * num_words);
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, (uint32_t *)packet->pl, (uint32_t *)(*(p_frame_address) + USERCODE_OFFSET), num_words);
    cb76:	68fb      	ldr	r3, [r7, #12]
    cb78:	6859      	ldr	r1, [r3, #4]
    cb7a:	68bb      	ldr	r3, [r7, #8]
    cb7c:	681b      	ldr	r3, [r3, #0]
    cb7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cb82:	461a      	mov	r2, r3
    cb84:	69fb      	ldr	r3, [r7, #28]
    cb86:	480f      	ldr	r0, [pc, #60]	; (cbc4 <handle_frame_packet+0x104>)
    cb88:	f000 ffae 	bl	dae8 <am_hal_flash_program_main>
    cb8c:	61b8      	str	r0, [r7, #24]
    if (i32ReturnCode)
    cb8e:	69bb      	ldr	r3, [r7, #24]
    cb90:	2b00      	cmp	r3, #0
    cb92:	d005      	beq.n	cba0 <handle_frame_packet+0xe0>
    {
        debug_printf("FLASH_WRITE error = 0x%x.\n\r", i32ReturnCode);
    cb94:	69b9      	ldr	r1, [r7, #24]
    cb96:	480d      	ldr	r0, [pc, #52]	; (cbcc <handle_frame_packet+0x10c>)
    cb98:	f000 f832 	bl	cc00 <debug_printf>
        return 1;
    cb9c:	2301      	movs	r3, #1
    cb9e:	e007      	b.n	cbb0 <handle_frame_packet+0xf0>
    }
    *(p_frame_address) += num_words * 4;
    cba0:	68bb      	ldr	r3, [r7, #8]
    cba2:	681a      	ldr	r2, [r3, #0]
    cba4:	69fb      	ldr	r3, [r7, #28]
    cba6:	009b      	lsls	r3, r3, #2
    cba8:	441a      	add	r2, r3
    cbaa:	68bb      	ldr	r3, [r7, #8]
    cbac:	601a      	str	r2, [r3, #0]

    // debug_printf("Array recorded to flash\n");
    return 0;
    cbae:	2300      	movs	r3, #0
}
    cbb0:	4618      	mov	r0, r3
    cbb2:	3720      	adds	r7, #32
    cbb4:	46bd      	mov	sp, r7
    cbb6:	bd80      	pop	{r7, pc}
    cbb8:	0000ed88 	.word	0x0000ed88
    cbbc:	0000edb4 	.word	0x0000edb4
    cbc0:	10000a3c 	.word	0x10000a3c
    cbc4:	12344321 	.word	0x12344321
    cbc8:	0000edfc 	.word	0x0000edfc
    cbcc:	0000ee28 	.word	0x0000ee28

0000cbd0 <app_start>:
//
// Jump to the application
//
// ****************************************
void app_start(void)
{
    cbd0:	b580      	push	{r7, lr}
    cbd2:	b082      	sub	sp, #8
    cbd4:	af00      	add	r7, sp, #0
    //     debug_printf("\n");
    // #endif // APP_PRINT_PRETTY
    // #endif // DEBUG_PRINT_APP
    // #endif // DEBUG

    void *entryPoint = (void *)(*((uint32_t *)(USERCODE_OFFSET + 4)));
    cbd6:	4b08      	ldr	r3, [pc, #32]	; (cbf8 <app_start+0x28>)
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	607b      	str	r3, [r7, #4]
    debug_printf("\nJump to App at 0x%08X\n\n", (uint32_t)entryPoint);
    cbdc:	687b      	ldr	r3, [r7, #4]
    cbde:	4619      	mov	r1, r3
    cbe0:	4806      	ldr	r0, [pc, #24]	; (cbfc <app_start+0x2c>)
    cbe2:	f000 f80d 	bl	cc00 <debug_printf>
    am_util_delay_ms(10); // Wait for prints to complete
    cbe6:	200a      	movs	r0, #10
    cbe8:	f000 f888 	bl	ccfc <am_util_delay_ms>
    unsetup();            // Undoes configuration to provide users with a clean slate
    cbec:	f7ff fd02 	bl	c5f4 <unsetup>
    goto *entryPoint;     // Jump to start of user code
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	f043 0301 	orr.w	r3, r3, #1
    cbf6:	4718      	bx	r3
    cbf8:	00010004 	.word	0x00010004
    cbfc:	0000ee44 	.word	0x0000ee44

0000cc00 <debug_printf>:
//
// Debug printf function
//
// ****************************************
void debug_printf(char *fmt, ...)
{
    cc00:	b40f      	push	{r0, r1, r2, r3}
    cc02:	b480      	push	{r7}
    cc04:	af00      	add	r7, sp, #0
    vsnprintf(debug_buffer, DEBUG_UART_BUF_LEN, (const char *)fmt, args);
    va_end(args);

    svl_uart_print(hUART_debug, debug_buffer);
#endif //DEBUG
}
    cc06:	bf00      	nop
    cc08:	46bd      	mov	sp, r7
    cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc0e:	b004      	add	sp, #16
    cc10:	4770      	bx	lr
	...

0000cc14 <am_uart_isr>:
//
// UART interrupt handlers
//
//*****************************************************************************
void am_uart_isr(void)
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b084      	sub	sp, #16
    cc18:	af00      	add	r7, sp, #0
    // Service the FIFOs as necessary, and clear the interrupts.
#if BL_UART_INST == 0
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(hUART_bl, &ui32Status, true);
    cc1a:	4b18      	ldr	r3, [pc, #96]	; (cc7c <am_uart_isr+0x68>)
    cc1c:	681b      	ldr	r3, [r3, #0]
    cc1e:	f107 010c 	add.w	r1, r7, #12
    cc22:	2201      	movs	r2, #1
    cc24:	4618      	mov	r0, r3
    cc26:	f001 fef5 	bl	ea14 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(hUART_bl, ui32Status);
    cc2a:	4b14      	ldr	r3, [pc, #80]	; (cc7c <am_uart_isr+0x68>)
    cc2c:	681b      	ldr	r3, [r3, #0]
    cc2e:	68fa      	ldr	r2, [r7, #12]
    cc30:	4611      	mov	r1, r2
    cc32:	4618      	mov	r0, r3
    cc34:	f001 fedc 	bl	e9f0 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(hUART_bl, ui32Status, &ui32Idle);
    cc38:	4b10      	ldr	r3, [pc, #64]	; (cc7c <am_uart_isr+0x68>)
    cc3a:	681b      	ldr	r3, [r3, #0]
    cc3c:	68f9      	ldr	r1, [r7, #12]
    cc3e:	f107 0208 	add.w	r2, r7, #8
    cc42:	4618      	mov	r0, r3
    cc44:	f001 fe2a 	bl	e89c <am_hal_uart_interrupt_service>
    if (ui32Status & AM_HAL_UART_INT_RX)
    cc48:	68fb      	ldr	r3, [r7, #12]
    cc4a:	f003 0310 	and.w	r3, r3, #16
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d010      	beq.n	cc74 <am_uart_isr+0x60>
    {
        uint8_t c = 0x00;
    cc52:	2300      	movs	r3, #0
    cc54:	71fb      	strb	r3, [r7, #7]
        if (svl_uart_read(hUART_bl, (char *)&c, 1) != 0)
    cc56:	4b09      	ldr	r3, [pc, #36]	; (cc7c <am_uart_isr+0x68>)
    cc58:	681b      	ldr	r3, [r3, #0]
    cc5a:	1df9      	adds	r1, r7, #7
    cc5c:	2201      	movs	r2, #1
    cc5e:	4618      	mov	r0, r3
    cc60:	f000 fc45 	bl	d4ee <svl_uart_read>
    cc64:	4603      	mov	r3, r0
    cc66:	2b00      	cmp	r3, #0
    cc68:	d004      	beq.n	cc74 <am_uart_isr+0x60>
        {
            art_svl_ringbuf_write(&bl_rx_ringbuf, c);
    cc6a:	79fb      	ldrb	r3, [r7, #7]
    cc6c:	4619      	mov	r1, r3
    cc6e:	4804      	ldr	r0, [pc, #16]	; (cc80 <am_uart_isr+0x6c>)
    cc70:	f000 fbdf 	bl	d432 <art_svl_ringbuf_write>
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cc74:	bf00      	nop
    cc76:	3710      	adds	r7, #16
    cc78:	46bd      	mov	sp, r7
    cc7a:	bd80      	pop	{r7, pc}
    cc7c:	10000220 	.word	0x10000220
    cc80:	10000210 	.word	0x10000210

0000cc84 <am_uart1_isr>:

void am_uart1_isr(void)
{
    cc84:	b480      	push	{r7}
    cc86:	af00      	add	r7, sp, #0
    am_hal_uart_interrupt_status_get(hUART_debug, &ui32Status, true);
    am_hal_uart_interrupt_clear(hUART_debug, ui32Status);
    am_hal_uart_interrupt_service(hUART_debug, ui32Status, &ui32Idle);
#endif // DEBUG
#endif // BL_UART_INST == 0
}
    cc88:	bf00      	nop
    cc8a:	46bd      	mov	sp, r7
    cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc90:	4770      	bx	lr
	...

0000cc94 <am_gpio_isr>:
//
// GPIO interrupt handler
//
//*****************************************************************************
void am_gpio_isr(void)
{
    cc94:	b580      	push	{r7, lr}
    cc96:	af00      	add	r7, sp, #0
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(BL_RX_PAD));
    cc98:	f04f 0000 	mov.w	r0, #0
    cc9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cca0:	f001 f92a 	bl	def8 <am_hal_gpio_interrupt_clear>
    if (bl_baud_ticks_index < BL_BAUD_SAMPLES)
    cca4:	4b0a      	ldr	r3, [pc, #40]	; (ccd0 <am_gpio_isr+0x3c>)
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	b2db      	uxtb	r3, r3
    ccaa:	2b04      	cmp	r3, #4
    ccac:	d80d      	bhi.n	ccca <am_gpio_isr+0x36>
    {
        bl_baud_ticks[bl_baud_ticks_index++] = CTIMER->STTMR;
    ccae:	4a09      	ldr	r2, [pc, #36]	; (ccd4 <am_gpio_isr+0x40>)
    ccb0:	4b07      	ldr	r3, [pc, #28]	; (ccd0 <am_gpio_isr+0x3c>)
    ccb2:	781b      	ldrb	r3, [r3, #0]
    ccb4:	b2db      	uxtb	r3, r3
    ccb6:	1c59      	adds	r1, r3, #1
    ccb8:	b2c8      	uxtb	r0, r1
    ccba:	4905      	ldr	r1, [pc, #20]	; (ccd0 <am_gpio_isr+0x3c>)
    ccbc:	7008      	strb	r0, [r1, #0]
    ccbe:	4619      	mov	r1, r3
    ccc0:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
    ccc4:	4a04      	ldr	r2, [pc, #16]	; (ccd8 <am_gpio_isr+0x44>)
    ccc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
}
    ccca:	bf00      	nop
    cccc:	bd80      	pop	{r7, pc}
    ccce:	bf00      	nop
    ccd0:	10000224 	.word	0x10000224
    ccd4:	40008000 	.word	0x40008000
    ccd8:	10000228 	.word	0x10000228

0000ccdc <am_stimer_isr>:
//
// STimer interrupt handler
//
//*****************************************************************************
void am_stimer_isr(void)
{
    ccdc:	b580      	push	{r7, lr}
    ccde:	af00      	add	r7, sp, #0
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_OVERFLOW);
    cce0:	f44f 7080 	mov.w	r0, #256	; 0x100
    cce4:	f001 f9f4 	bl	e0d0 <am_hal_stimer_int_clear>
    ap3_stimer_overflows += 1;
    cce8:	4b03      	ldr	r3, [pc, #12]	; (ccf8 <am_stimer_isr+0x1c>)
    ccea:	681b      	ldr	r3, [r3, #0]
    ccec:	3301      	adds	r3, #1
    ccee:	4a02      	ldr	r2, [pc, #8]	; (ccf8 <am_stimer_isr+0x1c>)
    ccf0:	6013      	str	r3, [r2, #0]
    // At the fastest rate (3MHz) the 64 bits of the stimer
    // along with this overflow counter can keep track of
    // the time for ~ 195,000 years without wrapping to 0
}
    ccf2:	bf00      	nop
    ccf4:	bd80      	pop	{r7, pc}
    ccf6:	bf00      	nop
    ccf8:	10000a5c 	.word	0x10000a5c

0000ccfc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    ccfc:	b580      	push	{r7, lr}
    ccfe:	b088      	sub	sp, #32
    cd00:	af00      	add	r7, sp, #0
    cd02:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cd04:	f107 030c 	add.w	r3, r7, #12
    cd08:	4618      	mov	r0, r3
    cd0a:	f000 fecb 	bl	daa4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cd12:	69fb      	ldr	r3, [r7, #28]
    cd14:	4a07      	ldr	r2, [pc, #28]	; (cd34 <am_util_delay_ms+0x38>)
    cd16:	fba2 2303 	umull	r2, r3, r2, r3
    cd1a:	099a      	lsrs	r2, r3, #6
    cd1c:	687b      	ldr	r3, [r7, #4]
    cd1e:	fb02 f303 	mul.w	r3, r2, r3
    cd22:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cd24:	69b8      	ldr	r0, [r7, #24]
    cd26:	f000 ff0d 	bl	db44 <am_hal_flash_delay>
}
    cd2a:	bf00      	nop
    cd2c:	3720      	adds	r7, #32
    cd2e:	46bd      	mov	sp, r7
    cd30:	bd80      	pop	{r7, pc}
    cd32:	bf00      	nop
    cd34:	057619f1 	.word	0x057619f1

0000cd38 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    cd38:	b580      	push	{r7, lr}
    cd3a:	b088      	sub	sp, #32
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cd40:	f107 030c 	add.w	r3, r7, #12
    cd44:	4618      	mov	r0, r3
    cd46:	f000 fead 	bl	daa4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    cd4a:	68fb      	ldr	r3, [r7, #12]
    cd4c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    cd4e:	69fb      	ldr	r3, [r7, #28]
    cd50:	4a07      	ldr	r2, [pc, #28]	; (cd70 <am_util_delay_us+0x38>)
    cd52:	fba2 2303 	umull	r2, r3, r2, r3
    cd56:	0c9a      	lsrs	r2, r3, #18
    cd58:	687b      	ldr	r3, [r7, #4]
    cd5a:	fb02 f303 	mul.w	r3, r2, r3
    cd5e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cd60:	69b8      	ldr	r0, [r7, #24]
    cd62:	f000 feef 	bl	db44 <am_hal_flash_delay>
}
    cd66:	bf00      	nop
    cd68:	3720      	adds	r7, #32
    cd6a:	46bd      	mov	sp, r7
    cd6c:	bd80      	pop	{r7, pc}
    cd6e:	bf00      	nop
    cd70:	165e9f81 	.word	0x165e9f81

0000cd74 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    cd74:	4818      	ldr	r0, [pc, #96]	; (cdd8 <zero_loop+0x2c>)
    cd76:	4919      	ldr	r1, [pc, #100]	; (cddc <zero_loop+0x30>)
    cd78:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    cd7a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    cd7e:	4818      	ldr	r0, [pc, #96]	; (cde0 <zero_loop+0x34>)
    cd80:	6801      	ldr	r1, [r0, #0]
    cd82:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cd86:	6001      	str	r1, [r0, #0]
    cd88:	f3bf 8f4f 	dsb	sy
    cd8c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    cd90:	4814      	ldr	r0, [pc, #80]	; (cde4 <zero_loop+0x38>)
    cd92:	4915      	ldr	r1, [pc, #84]	; (cde8 <zero_loop+0x3c>)
    cd94:	4a15      	ldr	r2, [pc, #84]	; (cdec <zero_loop+0x40>)

0000cd96 <copy_loop>:
    cd96:	4291      	cmp	r1, r2
    cd98:	d004      	beq.n	cda4 <copy_end>
    cd9a:	f850 3b04 	ldr.w	r3, [r0], #4
    cd9e:	f841 3b04 	str.w	r3, [r1], #4
    cda2:	e7f8      	b.n	cd96 <copy_loop>

0000cda4 <copy_end>:
          "copy_end:\n");
    
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    cda4:	4812      	ldr	r0, [pc, #72]	; (cdf0 <zero_loop+0x44>)
    cda6:	4913      	ldr	r1, [pc, #76]	; (cdf4 <zero_loop+0x48>)
    cda8:	f04f 0200 	mov.w	r2, #0

0000cdac <zero_loop>:
    cdac:	4288      	cmp	r0, r1
    cdae:	bfb8      	it	lt
    cdb0:	f840 2b04 	strlt.w	r2, [r0], #4
    cdb4:	dbfa      	blt.n	cdac <zero_loop>
    //
    // Call Global Static Constructors for C++ support
    //
    extern void (*__init_array_start)(void);    // symbols must be
    extern void (*__init_array_end)(void);      // provided by linker
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    cdb6:	4c06      	ldr	r4, [pc, #24]	; (cdd0 <zero_loop+0x24>)
    cdb8:	e002      	b.n	cdc0 <zero_loop+0x14>
        (*p)();                                 // Call each function in the list
    cdba:	6823      	ldr	r3, [r4, #0]
    cdbc:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
    cdbe:	3404      	adds	r4, #4
    cdc0:	4b04      	ldr	r3, [pc, #16]	; (cdd4 <zero_loop+0x28>)
    cdc2:	429c      	cmp	r4, r3
    cdc4:	d3f9      	bcc.n	cdba <zero_loop+0xe>
    }

    //
    // Call the application's entry point.
    //
    main();
    cdc6:	f7ff fb5d 	bl	c484 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    cdca:	be00      	bkpt	0x0000
}
    cdcc:	bf00      	nop
    cdce:	bf00      	nop
    cdd0:	0000eb5c 	.word	0x0000eb5c
    cdd4:	0000eb5c 	.word	0x0000eb5c
    cdd8:	e000ed08 	.word	0xe000ed08
    cddc:	0000c000 	.word	0x0000c000
    cde0:	e000ed88 	.word	0xe000ed88
    cde4:	0000f09c 	.word	0x0000f09c
    cde8:	10000000 	.word	0x10000000
    cdec:	1000020c 	.word	0x1000020c
    cdf0:	10000210 	.word	0x10000210
    cdf4:	10000b40 	.word	0x10000b40

0000cdf8 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    cdf8:	b480      	push	{r7}
    cdfa:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    cdfc:	e7fe      	b.n	cdfc <NMI_Handler+0x4>

0000cdfe <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
    cdfe:	b480      	push	{r7}
    ce00:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce02:	e7fe      	b.n	ce02 <BusFault_Handler+0x4>

0000ce04 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    ce04:	b480      	push	{r7}
    ce06:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce08:	e7fe      	b.n	ce08 <DebugMon_Handler+0x4>
	...

0000ce0c <svl_packet_link_read_fn>:
  }
  return retval;
}

void svl_packet_link_read_fn(svl_packet_read_byte_fn_t fn, void *param)
{
    ce0c:	b480      	push	{r7}
    ce0e:	b083      	sub	sp, #12
    ce10:	af00      	add	r7, sp, #0
    ce12:	6078      	str	r0, [r7, #4]
    ce14:	6039      	str	r1, [r7, #0]
  read_param = param;
    ce16:	4a06      	ldr	r2, [pc, #24]	; (ce30 <svl_packet_link_read_fn+0x24>)
    ce18:	683b      	ldr	r3, [r7, #0]
    ce1a:	6013      	str	r3, [r2, #0]
  read_fn = fn;
    ce1c:	4a05      	ldr	r2, [pc, #20]	; (ce34 <svl_packet_link_read_fn+0x28>)
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	6013      	str	r3, [r2, #0]
}
    ce22:	bf00      	nop
    ce24:	370c      	adds	r7, #12
    ce26:	46bd      	mov	sp, r7
    ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop
    ce30:	10000a40 	.word	0x10000a40
    ce34:	10000a4c 	.word	0x10000a4c

0000ce38 <svl_packet_link_write_fn>:

void svl_packet_link_write_fn(svl_packet_write_byte_fn_t fn, void *param)
{
    ce38:	b480      	push	{r7}
    ce3a:	b083      	sub	sp, #12
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	6078      	str	r0, [r7, #4]
    ce40:	6039      	str	r1, [r7, #0]
  write_param = param;
    ce42:	4a06      	ldr	r2, [pc, #24]	; (ce5c <svl_packet_link_write_fn+0x24>)
    ce44:	683b      	ldr	r3, [r7, #0]
    ce46:	6013      	str	r3, [r2, #0]
  write_fn = fn;
    ce48:	4a05      	ldr	r2, [pc, #20]	; (ce60 <svl_packet_link_write_fn+0x28>)
    ce4a:	687b      	ldr	r3, [r7, #4]
    ce4c:	6013      	str	r3, [r2, #0]
}
    ce4e:	bf00      	nop
    ce50:	370c      	adds	r7, #12
    ce52:	46bd      	mov	sp, r7
    ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce58:	4770      	bx	lr
    ce5a:	bf00      	nop
    ce5c:	10000a44 	.word	0x10000a44
    ce60:	10000a50 	.word	0x10000a50

0000ce64 <svl_packet_link_avail_fn>:

void svl_packet_link_avail_fn(svl_packet_avail_bytes_fn_t fn, void *param)
{
    ce64:	b480      	push	{r7}
    ce66:	b083      	sub	sp, #12
    ce68:	af00      	add	r7, sp, #0
    ce6a:	6078      	str	r0, [r7, #4]
    ce6c:	6039      	str	r1, [r7, #0]
  avail_param = param;
    ce6e:	4a06      	ldr	r2, [pc, #24]	; (ce88 <svl_packet_link_avail_fn+0x24>)
    ce70:	683b      	ldr	r3, [r7, #0]
    ce72:	6013      	str	r3, [r2, #0]
  avail_fn = fn;
    ce74:	4a05      	ldr	r2, [pc, #20]	; (ce8c <svl_packet_link_avail_fn+0x28>)
    ce76:	687b      	ldr	r3, [r7, #4]
    ce78:	6013      	str	r3, [r2, #0]
}
    ce7a:	bf00      	nop
    ce7c:	370c      	adds	r7, #12
    ce7e:	46bd      	mov	sp, r7
    ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop
    ce88:	10000a48 	.word	0x10000a48
    ce8c:	10000a54 	.word	0x10000a54

0000ce90 <svl_packet_link_millis_fn>:

void svl_packet_link_millis_fn(svl_packet_millis_fn_t fn)
{
    ce90:	b480      	push	{r7}
    ce92:	b083      	sub	sp, #12
    ce94:	af00      	add	r7, sp, #0
    ce96:	6078      	str	r0, [r7, #4]
  millis_fn = fn;
    ce98:	4a04      	ldr	r2, [pc, #16]	; (ceac <svl_packet_link_millis_fn+0x1c>)
    ce9a:	687b      	ldr	r3, [r7, #4]
    ce9c:	6013      	str	r3, [r2, #0]
}
    ce9e:	bf00      	nop
    cea0:	370c      	adds	r7, #12
    cea2:	46bd      	mov	sp, r7
    cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cea8:	4770      	bx	lr
    ceaa:	bf00      	nop
    ceac:	10000a58 	.word	0x10000a58

0000ceb0 <svl_packet_send>:

void svl_packet_send(svl_packet_t *packet)
{
    ceb0:	b580      	push	{r7, lr}
    ceb2:	b092      	sub	sp, #72	; 0x48
    ceb4:	af00      	add	r7, sp, #0
    ceb6:	6078      	str	r0, [r7, #4]
  CRCL = 0;
    ceb8:	4b72      	ldr	r3, [pc, #456]	; (d084 <svl_packet_send+0x1d4>)
    ceba:	2200      	movs	r2, #0
    cebc:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    cebe:	4b72      	ldr	r3, [pc, #456]	; (d088 <svl_packet_send+0x1d8>)
    cec0:	2200      	movs	r2, #0
    cec2:	701a      	strb	r2, [r3, #0]
  updateCRC(packet->cmd); //Add this byte to CRC
    cec4:	687b      	ldr	r3, [r7, #4]
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint16_t tableAddr = (num ^ CRCH);
    cecc:	4b6e      	ldr	r3, [pc, #440]	; (d088 <svl_packet_send+0x1d8>)
    cece:	781a      	ldrb	r2, [r3, #0]
    ced0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    ced4:	4053      	eors	r3, r2
    ced6:	b2db      	uxtb	r3, r3
    ced8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    ceda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cedc:	4a6b      	ldr	r2, [pc, #428]	; (d08c <svl_packet_send+0x1dc>)
    cede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cee2:	0a1b      	lsrs	r3, r3, #8
    cee4:	b29b      	uxth	r3, r3
    cee6:	b2da      	uxtb	r2, r3
    cee8:	4b66      	ldr	r3, [pc, #408]	; (d084 <svl_packet_send+0x1d4>)
    ceea:	781b      	ldrb	r3, [r3, #0]
    ceec:	4053      	eors	r3, r2
    ceee:	b2da      	uxtb	r2, r3
    cef0:	4b65      	ldr	r3, [pc, #404]	; (d088 <svl_packet_send+0x1d8>)
    cef2:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    cef6:	4a65      	ldr	r2, [pc, #404]	; (d08c <svl_packet_send+0x1dc>)
    cef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cefc:	b2da      	uxtb	r2, r3
    cefe:	4b61      	ldr	r3, [pc, #388]	; (d084 <svl_packet_send+0x1d4>)
    cf00:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cf02:	2300      	movs	r3, #0
    cf04:	647b      	str	r3, [r7, #68]	; 0x44
    cf06:	e024      	b.n	cf52 <svl_packet_send+0xa2>
  {
    updateCRC(*(packet->pl + x)); //Add this byte to CRC
    cf08:	687b      	ldr	r3, [r7, #4]
    cf0a:	685a      	ldr	r2, [r3, #4]
    cf0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cf0e:	4413      	add	r3, r2
    cf10:	781b      	ldrb	r3, [r3, #0]
    cf12:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint16_t tableAddr = (num ^ CRCH);
    cf16:	4b5c      	ldr	r3, [pc, #368]	; (d088 <svl_packet_send+0x1d8>)
    cf18:	781a      	ldrb	r2, [r3, #0]
    cf1a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    cf1e:	4053      	eors	r3, r2
    cf20:	b2db      	uxtb	r3, r3
    cf22:	877b      	strh	r3, [r7, #58]	; 0x3a
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    cf24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cf26:	4a59      	ldr	r2, [pc, #356]	; (d08c <svl_packet_send+0x1dc>)
    cf28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf2c:	0a1b      	lsrs	r3, r3, #8
    cf2e:	b29b      	uxth	r3, r3
    cf30:	b2da      	uxtb	r2, r3
    cf32:	4b54      	ldr	r3, [pc, #336]	; (d084 <svl_packet_send+0x1d4>)
    cf34:	781b      	ldrb	r3, [r3, #0]
    cf36:	4053      	eors	r3, r2
    cf38:	b2da      	uxtb	r2, r3
    cf3a:	4b53      	ldr	r3, [pc, #332]	; (d088 <svl_packet_send+0x1d8>)
    cf3c:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    cf3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    cf40:	4a52      	ldr	r2, [pc, #328]	; (d08c <svl_packet_send+0x1dc>)
    cf42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf46:	b2da      	uxtb	r2, r3
    cf48:	4b4e      	ldr	r3, [pc, #312]	; (d084 <svl_packet_send+0x1d4>)
    cf4a:	701a      	strb	r2, [r3, #0]
  for (uint32_t x = 0; x < packet->pl_len; x++)
    cf4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cf4e:	3301      	adds	r3, #1
    cf50:	647b      	str	r3, [r7, #68]	; 0x44
    cf52:	687b      	ldr	r3, [r7, #4]
    cf54:	891b      	ldrh	r3, [r3, #8]
    cf56:	461a      	mov	r2, r3
    cf58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cf5a:	4293      	cmp	r3, r2
    cf5c:	d3d4      	bcc.n	cf08 <svl_packet_send+0x58>
  }

  svl_packet_write_byte(((packet->pl_len + 3) >> 8));   // len high byte (including command and CRC bytes)
    cf5e:	687b      	ldr	r3, [r7, #4]
    cf60:	891b      	ldrh	r3, [r3, #8]
    cf62:	3303      	adds	r3, #3
    cf64:	121b      	asrs	r3, r3, #8
    cf66:	b2db      	uxtb	r3, r3
    cf68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  size_t retval = 0x00;
    cf6c:	2300      	movs	r3, #0
    cf6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (write_fn != NULL)
    cf70:	4b47      	ldr	r3, [pc, #284]	; (d090 <svl_packet_send+0x1e0>)
    cf72:	681b      	ldr	r3, [r3, #0]
    cf74:	2b00      	cmp	r3, #0
    cf76:	d008      	beq.n	cf8a <svl_packet_send+0xda>
    retval = write_fn(write_param, c);
    cf78:	4b45      	ldr	r3, [pc, #276]	; (d090 <svl_packet_send+0x1e0>)
    cf7a:	681b      	ldr	r3, [r3, #0]
    cf7c:	4a45      	ldr	r2, [pc, #276]	; (d094 <svl_packet_send+0x1e4>)
    cf7e:	6812      	ldr	r2, [r2, #0]
    cf80:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    cf84:	4610      	mov	r0, r2
    cf86:	4798      	blx	r3
    cf88:	6278      	str	r0, [r7, #36]	; 0x24
  svl_packet_write_byte(((packet->pl_len + 3) & 0xFF)); // len low byte  (including command and CRC bytes)
    cf8a:	687b      	ldr	r3, [r7, #4]
    cf8c:	891b      	ldrh	r3, [r3, #8]
    cf8e:	b2db      	uxtb	r3, r3
    cf90:	3303      	adds	r3, #3
    cf92:	b2db      	uxtb	r3, r3
    cf94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  size_t retval = 0x00;
    cf98:	2300      	movs	r3, #0
    cf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (write_fn != NULL)
    cf9c:	4b3c      	ldr	r3, [pc, #240]	; (d090 <svl_packet_send+0x1e0>)
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d008      	beq.n	cfb6 <svl_packet_send+0x106>
    retval = write_fn(write_param, c);
    cfa4:	4b3a      	ldr	r3, [pc, #232]	; (d090 <svl_packet_send+0x1e0>)
    cfa6:	681b      	ldr	r3, [r3, #0]
    cfa8:	4a3a      	ldr	r2, [pc, #232]	; (d094 <svl_packet_send+0x1e4>)
    cfaa:	6812      	ldr	r2, [r2, #0]
    cfac:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
    cfb0:	4610      	mov	r0, r2
    cfb2:	4798      	blx	r3
    cfb4:	62f8      	str	r0, [r7, #44]	; 0x2c

  svl_packet_write_byte((packet->cmd)); // command byte
    cfb6:	687b      	ldr	r3, [r7, #4]
    cfb8:	781b      	ldrb	r3, [r3, #0]
    cfba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  size_t retval = 0x00;
    cfbe:	2300      	movs	r3, #0
    cfc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (write_fn != NULL)
    cfc2:	4b33      	ldr	r3, [pc, #204]	; (d090 <svl_packet_send+0x1e0>)
    cfc4:	681b      	ldr	r3, [r3, #0]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d008      	beq.n	cfdc <svl_packet_send+0x12c>
    retval = write_fn(write_param, c);
    cfca:	4b31      	ldr	r3, [pc, #196]	; (d090 <svl_packet_send+0x1e0>)
    cfcc:	681b      	ldr	r3, [r3, #0]
    cfce:	4a31      	ldr	r2, [pc, #196]	; (d094 <svl_packet_send+0x1e4>)
    cfd0:	6812      	ldr	r2, [r2, #0]
    cfd2:	f897 1039 	ldrb.w	r1, [r7, #57]	; 0x39
    cfd6:	4610      	mov	r0, r2
    cfd8:	4798      	blx	r3
    cfda:	6378      	str	r0, [r7, #52]	; 0x34

  if ((packet->pl != NULL) && (packet->pl_len != 0))
    cfdc:	687b      	ldr	r3, [r7, #4]
    cfde:	685b      	ldr	r3, [r3, #4]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d029      	beq.n	d038 <svl_packet_send+0x188>
    cfe4:	687b      	ldr	r3, [r7, #4]
    cfe6:	891b      	ldrh	r3, [r3, #8]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d025      	beq.n	d038 <svl_packet_send+0x188>
  {
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    cfec:	2300      	movs	r3, #0
    cfee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    cff2:	e01b      	b.n	d02c <svl_packet_send+0x17c>
    { // payload
      svl_packet_write_byte(*(packet->pl + indi));
    cff4:	687b      	ldr	r3, [r7, #4]
    cff6:	685a      	ldr	r2, [r3, #4]
    cff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    cffc:	4413      	add	r3, r2
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t retval = 0x00;
    d004:	2300      	movs	r3, #0
    d006:	61fb      	str	r3, [r7, #28]
  if (write_fn != NULL)
    d008:	4b21      	ldr	r3, [pc, #132]	; (d090 <svl_packet_send+0x1e0>)
    d00a:	681b      	ldr	r3, [r3, #0]
    d00c:	2b00      	cmp	r3, #0
    d00e:	d008      	beq.n	d022 <svl_packet_send+0x172>
    retval = write_fn(write_param, c);
    d010:	4b1f      	ldr	r3, [pc, #124]	; (d090 <svl_packet_send+0x1e0>)
    d012:	681b      	ldr	r3, [r3, #0]
    d014:	4a1f      	ldr	r2, [pc, #124]	; (d094 <svl_packet_send+0x1e4>)
    d016:	6812      	ldr	r2, [r2, #0]
    d018:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
    d01c:	4610      	mov	r0, r2
    d01e:	4798      	blx	r3
    d020:	61f8      	str	r0, [r7, #28]
    for (uint16_t indi = 0; indi < packet->pl_len; indi++)
    d022:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    d026:	3301      	adds	r3, #1
    d028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    d02c:	687b      	ldr	r3, [r7, #4]
    d02e:	891b      	ldrh	r3, [r3, #8]
    d030:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
    d034:	429a      	cmp	r2, r3
    d036:	d3dd      	bcc.n	cff4 <svl_packet_send+0x144>
    }
  }

  svl_packet_write_byte(CRCH); // CRC H
    d038:	4b13      	ldr	r3, [pc, #76]	; (d088 <svl_packet_send+0x1d8>)
    d03a:	781b      	ldrb	r3, [r3, #0]
    d03c:	74fb      	strb	r3, [r7, #19]
  size_t retval = 0x00;
    d03e:	2300      	movs	r3, #0
    d040:	60fb      	str	r3, [r7, #12]
  if (write_fn != NULL)
    d042:	4b13      	ldr	r3, [pc, #76]	; (d090 <svl_packet_send+0x1e0>)
    d044:	681b      	ldr	r3, [r3, #0]
    d046:	2b00      	cmp	r3, #0
    d048:	d007      	beq.n	d05a <svl_packet_send+0x1aa>
    retval = write_fn(write_param, c);
    d04a:	4b11      	ldr	r3, [pc, #68]	; (d090 <svl_packet_send+0x1e0>)
    d04c:	681b      	ldr	r3, [r3, #0]
    d04e:	4a11      	ldr	r2, [pc, #68]	; (d094 <svl_packet_send+0x1e4>)
    d050:	6812      	ldr	r2, [r2, #0]
    d052:	7cf9      	ldrb	r1, [r7, #19]
    d054:	4610      	mov	r0, r2
    d056:	4798      	blx	r3
    d058:	60f8      	str	r0, [r7, #12]
  svl_packet_write_byte(CRCL); // CRC L
    d05a:	4b0a      	ldr	r3, [pc, #40]	; (d084 <svl_packet_send+0x1d4>)
    d05c:	781b      	ldrb	r3, [r3, #0]
    d05e:	76fb      	strb	r3, [r7, #27]
  size_t retval = 0x00;
    d060:	2300      	movs	r3, #0
    d062:	617b      	str	r3, [r7, #20]
  if (write_fn != NULL)
    d064:	4b0a      	ldr	r3, [pc, #40]	; (d090 <svl_packet_send+0x1e0>)
    d066:	681b      	ldr	r3, [r3, #0]
    d068:	2b00      	cmp	r3, #0
    d06a:	d007      	beq.n	d07c <svl_packet_send+0x1cc>
    retval = write_fn(write_param, c);
    d06c:	4b08      	ldr	r3, [pc, #32]	; (d090 <svl_packet_send+0x1e0>)
    d06e:	681b      	ldr	r3, [r3, #0]
    d070:	4a08      	ldr	r2, [pc, #32]	; (d094 <svl_packet_send+0x1e4>)
    d072:	6812      	ldr	r2, [r2, #0]
    d074:	7ef9      	ldrb	r1, [r7, #27]
    d076:	4610      	mov	r0, r2
    d078:	4798      	blx	r3
    d07a:	6178      	str	r0, [r7, #20]
}
    d07c:	bf00      	nop
    d07e:	3748      	adds	r7, #72	; 0x48
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}
    d084:	10000a74 	.word	0x10000a74
    d088:	10000a75 	.word	0x10000a75
    d08c:	10000000 	.word	0x10000000
    d090:	10000a50 	.word	0x10000a50
    d094:	10000a44 	.word	0x10000a44

0000d098 <svl_packet_wait>:

uint8_t svl_packet_wait(svl_packet_t *packet)
{
    d098:	b580      	push	{r7, lr}
    d09a:	b08c      	sub	sp, #48	; 0x30
    d09c:	af00      	add	r7, sp, #0
    d09e:	6078      	str	r0, [r7, #4]

  // wait for 2 bytes (the length bytes)
  // wait for length bytes to come in
  // make sure that 'length' bytes are enough to satisfy the desired payload length

  if (packet == NULL)
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	d101      	bne.n	d0aa <svl_packet_wait+0x12>
  {
    return (SVL_PACKET_ERR);
    d0a6:	2301      	movs	r3, #1
    d0a8:	e0bf      	b.n	d22a <svl_packet_wait+0x192>
  }

  const uint8_t num_bytes_length = 2;
    d0aa:	2302      	movs	r3, #2
    d0ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (svl_packet_wait_bytes(num_bytes_length))
    d0b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d0b4:	4618      	mov	r0, r3
    d0b6:	f000 f8ff 	bl	d2b8 <svl_packet_wait_bytes>
    d0ba:	4603      	mov	r3, r0
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d001      	beq.n	d0c4 <svl_packet_wait+0x2c>
  {
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_LEN);
    d0c0:	2382      	movs	r3, #130	; 0x82
    d0c2:	e0b2      	b.n	d22a <svl_packet_wait+0x192>
  }
  uint16_t len = svl_packet_get_uint16_t();
    d0c4:	f000 f8c0 	bl	d248 <svl_packet_get_uint16_t>
    d0c8:	4603      	mov	r3, r0
    d0ca:	853b      	strh	r3, [r7, #40]	; 0x28

  if (len == 0)
    d0cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	d101      	bne.n	d0d6 <svl_packet_wait+0x3e>
  {
    return (SVL_PACKET_ERR_ZLP);
    d0d2:	2304      	movs	r3, #4
    d0d4:	e0a9      	b.n	d22a <svl_packet_wait+0x192>
  }
  if ((len - 3) > packet->max_pl_len)
    d0d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d0d8:	3b03      	subs	r3, #3
    d0da:	687a      	ldr	r2, [r7, #4]
    d0dc:	8952      	ldrh	r2, [r2, #10]
    d0de:	4293      	cmp	r3, r2
    d0e0:	dd01      	ble.n	d0e6 <svl_packet_wait+0x4e>
  {
    return (SVL_PACKET_ERR_MEM | SVL_PACKET_PL);
    d0e2:	2348      	movs	r3, #72	; 0x48
    d0e4:	e0a1      	b.n	d22a <svl_packet_wait+0x192>
  }

  //Wait for entire packet to come in
  if (svl_packet_wait_bytes(len))
    d0e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d0e8:	4618      	mov	r0, r3
    d0ea:	f000 f8e5 	bl	d2b8 <svl_packet_wait_bytes>
    d0ee:	4603      	mov	r3, r0
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d001      	beq.n	d0f8 <svl_packet_wait+0x60>
    return (SVL_PACKET_ERR_TIMEOUT | SVL_PACKET_PL);
    d0f4:	2342      	movs	r3, #66	; 0x42
    d0f6:	e098      	b.n	d22a <svl_packet_wait+0x192>

  uint8_t incoming;
  CRCL = 0;
    d0f8:	4b4e      	ldr	r3, [pc, #312]	; (d234 <svl_packet_wait+0x19c>)
    d0fa:	2200      	movs	r2, #0
    d0fc:	701a      	strb	r2, [r3, #0]
  CRCH = 0;
    d0fe:	4b4e      	ldr	r3, [pc, #312]	; (d238 <svl_packet_wait+0x1a0>)
    d100:	2200      	movs	r2, #0
    d102:	701a      	strb	r2, [r3, #0]
    d104:	f107 030b 	add.w	r3, r7, #11
    d108:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d10a:	2300      	movs	r3, #0
    d10c:	61bb      	str	r3, [r7, #24]
  if (read_fn != NULL)
    d10e:	4b4b      	ldr	r3, [pc, #300]	; (d23c <svl_packet_wait+0x1a4>)
    d110:	681b      	ldr	r3, [r3, #0]
    d112:	2b00      	cmp	r3, #0
    d114:	d007      	beq.n	d126 <svl_packet_wait+0x8e>
    retval = read_fn(read_param, c);
    d116:	4b49      	ldr	r3, [pc, #292]	; (d23c <svl_packet_wait+0x1a4>)
    d118:	681b      	ldr	r3, [r3, #0]
    d11a:	4a49      	ldr	r2, [pc, #292]	; (d240 <svl_packet_wait+0x1a8>)
    d11c:	6812      	ldr	r2, [r2, #0]
    d11e:	69f9      	ldr	r1, [r7, #28]
    d120:	4610      	mov	r0, r2
    d122:	4798      	blx	r3
    d124:	61b8      	str	r0, [r7, #24]

  //Get command byte
  svl_packet_read_byte(&incoming);
  packet->cmd = incoming;
    d126:	7afa      	ldrb	r2, [r7, #11]
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	701a      	strb	r2, [r3, #0]
  updateCRC(incoming); //Add this byte to CRC
    d12c:	7afb      	ldrb	r3, [r7, #11]
    d12e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t tableAddr = (num ^ CRCH);
    d132:	4b41      	ldr	r3, [pc, #260]	; (d238 <svl_packet_wait+0x1a0>)
    d134:	781a      	ldrb	r2, [r3, #0]
    d136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    d13a:	4053      	eors	r3, r2
    d13c:	b2db      	uxtb	r3, r3
    d13e:	843b      	strh	r3, [r7, #32]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d140:	8c3b      	ldrh	r3, [r7, #32]
    d142:	4a40      	ldr	r2, [pc, #256]	; (d244 <svl_packet_wait+0x1ac>)
    d144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d148:	0a1b      	lsrs	r3, r3, #8
    d14a:	b29b      	uxth	r3, r3
    d14c:	b2da      	uxtb	r2, r3
    d14e:	4b39      	ldr	r3, [pc, #228]	; (d234 <svl_packet_wait+0x19c>)
    d150:	781b      	ldrb	r3, [r3, #0]
    d152:	4053      	eors	r3, r2
    d154:	b2da      	uxtb	r2, r3
    d156:	4b38      	ldr	r3, [pc, #224]	; (d238 <svl_packet_wait+0x1a0>)
    d158:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d15a:	8c3b      	ldrh	r3, [r7, #32]
    d15c:	4a39      	ldr	r2, [pc, #228]	; (d244 <svl_packet_wait+0x1ac>)
    d15e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d162:	b2da      	uxtb	r2, r3
    d164:	4b33      	ldr	r3, [pc, #204]	; (d234 <svl_packet_wait+0x19c>)
    d166:	701a      	strb	r2, [r3, #0]

  packet->pl_len = (len - 3);
    d168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    d16a:	3b03      	subs	r3, #3
    d16c:	b29a      	uxth	r2, r3
    d16e:	687b      	ldr	r3, [r7, #4]
    d170:	811a      	strh	r2, [r3, #8]

  //Now read the data coming in
  if ((packet->pl != NULL) && (packet->max_pl_len != 0))
    d172:	687b      	ldr	r3, [r7, #4]
    d174:	685b      	ldr	r3, [r3, #4]
    d176:	2b00      	cmp	r3, #0
    d178:	d042      	beq.n	d200 <svl_packet_wait+0x168>
    d17a:	687b      	ldr	r3, [r7, #4]
    d17c:	895b      	ldrh	r3, [r3, #10]
    d17e:	2b00      	cmp	r3, #0
    d180:	d03e      	beq.n	d200 <svl_packet_wait+0x168>
  {
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d182:	2300      	movs	r3, #0
    d184:	62fb      	str	r3, [r7, #44]	; 0x2c
    d186:	e035      	b.n	d1f4 <svl_packet_wait+0x15c>
    d188:	f107 030b 	add.w	r3, r7, #11
    d18c:	613b      	str	r3, [r7, #16]
  size_t retval = 0x00;
    d18e:	2300      	movs	r3, #0
    d190:	60fb      	str	r3, [r7, #12]
  if (read_fn != NULL)
    d192:	4b2a      	ldr	r3, [pc, #168]	; (d23c <svl_packet_wait+0x1a4>)
    d194:	681b      	ldr	r3, [r3, #0]
    d196:	2b00      	cmp	r3, #0
    d198:	d007      	beq.n	d1aa <svl_packet_wait+0x112>
    retval = read_fn(read_param, c);
    d19a:	4b28      	ldr	r3, [pc, #160]	; (d23c <svl_packet_wait+0x1a4>)
    d19c:	681b      	ldr	r3, [r3, #0]
    d19e:	4a28      	ldr	r2, [pc, #160]	; (d240 <svl_packet_wait+0x1a8>)
    d1a0:	6812      	ldr	r2, [r2, #0]
    d1a2:	6939      	ldr	r1, [r7, #16]
    d1a4:	4610      	mov	r0, r2
    d1a6:	4798      	blx	r3
    d1a8:	60f8      	str	r0, [r7, #12]
    {
      svl_packet_read_byte(&incoming);

      updateCRC(incoming); //Add this byte to CRC
    d1aa:	7afb      	ldrb	r3, [r7, #11]
    d1ac:	75fb      	strb	r3, [r7, #23]
  uint16_t tableAddr = (num ^ CRCH);
    d1ae:	4b22      	ldr	r3, [pc, #136]	; (d238 <svl_packet_wait+0x1a0>)
    d1b0:	781a      	ldrb	r2, [r3, #0]
    d1b2:	7dfb      	ldrb	r3, [r7, #23]
    d1b4:	4053      	eors	r3, r2
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	82bb      	strh	r3, [r7, #20]
  CRCH = (CRC_Table[tableAddr] >> 8) ^ CRCL;
    d1ba:	8abb      	ldrh	r3, [r7, #20]
    d1bc:	4a21      	ldr	r2, [pc, #132]	; (d244 <svl_packet_wait+0x1ac>)
    d1be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1c2:	0a1b      	lsrs	r3, r3, #8
    d1c4:	b29b      	uxth	r3, r3
    d1c6:	b2da      	uxtb	r2, r3
    d1c8:	4b1a      	ldr	r3, [pc, #104]	; (d234 <svl_packet_wait+0x19c>)
    d1ca:	781b      	ldrb	r3, [r3, #0]
    d1cc:	4053      	eors	r3, r2
    d1ce:	b2da      	uxtb	r2, r3
    d1d0:	4b19      	ldr	r3, [pc, #100]	; (d238 <svl_packet_wait+0x1a0>)
    d1d2:	701a      	strb	r2, [r3, #0]
  CRCL = (CRC_Table[tableAddr] & 0x00FF);
    d1d4:	8abb      	ldrh	r3, [r7, #20]
    d1d6:	4a1b      	ldr	r2, [pc, #108]	; (d244 <svl_packet_wait+0x1ac>)
    d1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1dc:	b2da      	uxtb	r2, r3
    d1de:	4b15      	ldr	r3, [pc, #84]	; (d234 <svl_packet_wait+0x19c>)
    d1e0:	701a      	strb	r2, [r3, #0]

      *(packet->pl + x) = incoming; //Fill payload with data
    d1e2:	687b      	ldr	r3, [r7, #4]
    d1e4:	685a      	ldr	r2, [r3, #4]
    d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1e8:	4413      	add	r3, r2
    d1ea:	7afa      	ldrb	r2, [r7, #11]
    d1ec:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = 0; x < packet->pl_len; x++)
    d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1f0:	3301      	adds	r3, #1
    d1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	891b      	ldrh	r3, [r3, #8]
    d1f8:	461a      	mov	r2, r3
    d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1fc:	4293      	cmp	r3, r2
    d1fe:	d3c3      	bcc.n	d188 <svl_packet_wait+0xf0>
    }
  }

  uint16_t crc = svl_packet_get_uint16_t(); //Read final two bytes into CRC
    d200:	f000 f822 	bl	d248 <svl_packet_get_uint16_t>
    d204:	4603      	mov	r3, r0
    d206:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t check = ((uint16_t)CRCH << 8) | CRCL;
    d208:	4b0b      	ldr	r3, [pc, #44]	; (d238 <svl_packet_wait+0x1a0>)
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	021b      	lsls	r3, r3, #8
    d20e:	b21a      	sxth	r2, r3
    d210:	4b08      	ldr	r3, [pc, #32]	; (d234 <svl_packet_wait+0x19c>)
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	b21b      	sxth	r3, r3
    d216:	4313      	orrs	r3, r2
    d218:	b21b      	sxth	r3, r3
    d21a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (crc != check)
    d21c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    d220:	429a      	cmp	r2, r3
    d222:	d001      	beq.n	d228 <svl_packet_wait+0x190>
  {
    return (SVL_PACKET_ERR_CRC);
    d224:	2310      	movs	r3, #16
    d226:	e000      	b.n	d22a <svl_packet_wait+0x192>
  }

  return (SVL_PACKET_OK);
    d228:	2300      	movs	r3, #0
}
    d22a:	4618      	mov	r0, r3
    d22c:	3730      	adds	r7, #48	; 0x30
    d22e:	46bd      	mov	sp, r7
    d230:	bd80      	pop	{r7, pc}
    d232:	bf00      	nop
    d234:	10000a74 	.word	0x10000a74
    d238:	10000a75 	.word	0x10000a75
    d23c:	10000a4c 	.word	0x10000a4c
    d240:	10000a40 	.word	0x10000a40
    d244:	10000000 	.word	0x10000000

0000d248 <svl_packet_get_uint16_t>:

uint16_t svl_packet_get_uint16_t(void)
{
    d248:	b580      	push	{r7, lr}
    d24a:	b086      	sub	sp, #24
    d24c:	af00      	add	r7, sp, #0
  uint8_t h = 0x00;
    d24e:	2300      	movs	r3, #0
    d250:	71fb      	strb	r3, [r7, #7]
  uint8_t l = 0x00;
    d252:	2300      	movs	r3, #0
    d254:	71bb      	strb	r3, [r7, #6]
    d256:	1dfb      	adds	r3, r7, #7
    d258:	60fb      	str	r3, [r7, #12]
  size_t retval = 0x00;
    d25a:	2300      	movs	r3, #0
    d25c:	60bb      	str	r3, [r7, #8]
  if (read_fn != NULL)
    d25e:	4b14      	ldr	r3, [pc, #80]	; (d2b0 <svl_packet_get_uint16_t+0x68>)
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	2b00      	cmp	r3, #0
    d264:	d007      	beq.n	d276 <svl_packet_get_uint16_t+0x2e>
    retval = read_fn(read_param, c);
    d266:	4b12      	ldr	r3, [pc, #72]	; (d2b0 <svl_packet_get_uint16_t+0x68>)
    d268:	681b      	ldr	r3, [r3, #0]
    d26a:	4a12      	ldr	r2, [pc, #72]	; (d2b4 <svl_packet_get_uint16_t+0x6c>)
    d26c:	6812      	ldr	r2, [r2, #0]
    d26e:	68f9      	ldr	r1, [r7, #12]
    d270:	4610      	mov	r0, r2
    d272:	4798      	blx	r3
    d274:	60b8      	str	r0, [r7, #8]
    d276:	1dbb      	adds	r3, r7, #6
    d278:	617b      	str	r3, [r7, #20]
  size_t retval = 0x00;
    d27a:	2300      	movs	r3, #0
    d27c:	613b      	str	r3, [r7, #16]
  if (read_fn != NULL)
    d27e:	4b0c      	ldr	r3, [pc, #48]	; (d2b0 <svl_packet_get_uint16_t+0x68>)
    d280:	681b      	ldr	r3, [r3, #0]
    d282:	2b00      	cmp	r3, #0
    d284:	d007      	beq.n	d296 <svl_packet_get_uint16_t+0x4e>
    retval = read_fn(read_param, c);
    d286:	4b0a      	ldr	r3, [pc, #40]	; (d2b0 <svl_packet_get_uint16_t+0x68>)
    d288:	681b      	ldr	r3, [r3, #0]
    d28a:	4a0a      	ldr	r2, [pc, #40]	; (d2b4 <svl_packet_get_uint16_t+0x6c>)
    d28c:	6812      	ldr	r2, [r2, #0]
    d28e:	6979      	ldr	r1, [r7, #20]
    d290:	4610      	mov	r0, r2
    d292:	4798      	blx	r3
    d294:	6138      	str	r0, [r7, #16]
  svl_packet_read_byte(&h);
  svl_packet_read_byte(&l);
  return (((uint16_t)h << 8) | (l & 0xFF));
    d296:	79fb      	ldrb	r3, [r7, #7]
    d298:	021b      	lsls	r3, r3, #8
    d29a:	b21a      	sxth	r2, r3
    d29c:	79bb      	ldrb	r3, [r7, #6]
    d29e:	b21b      	sxth	r3, r3
    d2a0:	4313      	orrs	r3, r2
    d2a2:	b21b      	sxth	r3, r3
    d2a4:	b29b      	uxth	r3, r3
}
    d2a6:	4618      	mov	r0, r3
    d2a8:	3718      	adds	r7, #24
    d2aa:	46bd      	mov	sp, r7
    d2ac:	bd80      	pop	{r7, pc}
    d2ae:	bf00      	nop
    d2b0:	10000a4c 	.word	0x10000a4c
    d2b4:	10000a40 	.word	0x10000a40

0000d2b8 <svl_packet_wait_bytes>:

uint8_t svl_packet_wait_bytes(uint32_t num)
{
    d2b8:	b580      	push	{r7, lr}
    d2ba:	b088      	sub	sp, #32
    d2bc:	af00      	add	r7, sp, #0
    d2be:	6078      	str	r0, [r7, #4]
  uint32_t timeout_ms = 500;
    d2c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d2c4:	61fb      	str	r3, [r7, #28]
  size_t retval = 0x00;
    d2c6:	2300      	movs	r3, #0
    d2c8:	613b      	str	r3, [r7, #16]
  if (millis_fn != NULL)
    d2ca:	4b1b      	ldr	r3, [pc, #108]	; (d338 <svl_packet_wait_bytes+0x80>)
    d2cc:	681b      	ldr	r3, [r3, #0]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	d003      	beq.n	d2da <svl_packet_wait_bytes+0x22>
    retval = millis_fn();
    d2d2:	4b19      	ldr	r3, [pc, #100]	; (d338 <svl_packet_wait_bytes+0x80>)
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	4798      	blx	r3
    d2d8:	6138      	str	r0, [r7, #16]
  return retval;
    d2da:	693b      	ldr	r3, [r7, #16]
  uint32_t start = svl_packet_millis();
    d2dc:	61bb      	str	r3, [r7, #24]
  uint32_t avail = 0;
    d2de:	2300      	movs	r3, #0
    d2e0:	617b      	str	r3, [r7, #20]

  while ((svl_packet_millis() - start) < timeout_ms)
    d2e2:	e014      	b.n	d30e <svl_packet_wait_bytes+0x56>
  size_t retval = 0x00;
    d2e4:	2300      	movs	r3, #0
    d2e6:	60fb      	str	r3, [r7, #12]
  if (avail_fn != NULL)
    d2e8:	4b14      	ldr	r3, [pc, #80]	; (d33c <svl_packet_wait_bytes+0x84>)
    d2ea:	681b      	ldr	r3, [r3, #0]
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d006      	beq.n	d2fe <svl_packet_wait_bytes+0x46>
    retval = avail_fn(avail_param);
    d2f0:	4b12      	ldr	r3, [pc, #72]	; (d33c <svl_packet_wait_bytes+0x84>)
    d2f2:	681b      	ldr	r3, [r3, #0]
    d2f4:	4a12      	ldr	r2, [pc, #72]	; (d340 <svl_packet_wait_bytes+0x88>)
    d2f6:	6812      	ldr	r2, [r2, #0]
    d2f8:	4610      	mov	r0, r2
    d2fa:	4798      	blx	r3
    d2fc:	60f8      	str	r0, [r7, #12]
  return retval;
    d2fe:	68fb      	ldr	r3, [r7, #12]
  {
    avail = svl_packet_avail_bytes();
    d300:	617b      	str	r3, [r7, #20]
    if (avail >= num)
    d302:	697a      	ldr	r2, [r7, #20]
    d304:	687b      	ldr	r3, [r7, #4]
    d306:	429a      	cmp	r2, r3
    d308:	d301      	bcc.n	d30e <svl_packet_wait_bytes+0x56>
    {
      return 0;
    d30a:	2300      	movs	r3, #0
    d30c:	e010      	b.n	d330 <svl_packet_wait_bytes+0x78>
  size_t retval = 0x00;
    d30e:	2300      	movs	r3, #0
    d310:	60bb      	str	r3, [r7, #8]
  if (millis_fn != NULL)
    d312:	4b09      	ldr	r3, [pc, #36]	; (d338 <svl_packet_wait_bytes+0x80>)
    d314:	681b      	ldr	r3, [r3, #0]
    d316:	2b00      	cmp	r3, #0
    d318:	d003      	beq.n	d322 <svl_packet_wait_bytes+0x6a>
    retval = millis_fn();
    d31a:	4b07      	ldr	r3, [pc, #28]	; (d338 <svl_packet_wait_bytes+0x80>)
    d31c:	681b      	ldr	r3, [r3, #0]
    d31e:	4798      	blx	r3
    d320:	60b8      	str	r0, [r7, #8]
  return retval;
    d322:	68ba      	ldr	r2, [r7, #8]
  while ((svl_packet_millis() - start) < timeout_ms)
    d324:	69bb      	ldr	r3, [r7, #24]
    d326:	1ad3      	subs	r3, r2, r3
    d328:	69fa      	ldr	r2, [r7, #28]
    d32a:	429a      	cmp	r2, r3
    d32c:	d8da      	bhi.n	d2e4 <svl_packet_wait_bytes+0x2c>
    }
  }

  // debug_printf("only got %d bytes...\n",avail);
  return 1;
    d32e:	2301      	movs	r3, #1
    d330:	4618      	mov	r0, r3
    d332:	3720      	adds	r7, #32
    d334:	46bd      	mov	sp, r7
    d336:	bd80      	pop	{r7, pc}
    d338:	10000a58 	.word	0x10000a58
    d33c:	10000a54 	.word	0x10000a54
    d340:	10000a48 	.word	0x10000a48

0000d344 <art_svl_ringbuf_init>:
#include "svl_ringbuf.h"

size_t art_svl_ringbuf_init( void* vrb, uint8_t* buf, size_t len ){
    d344:	b480      	push	{r7}
    d346:	b087      	sub	sp, #28
    d348:	af00      	add	r7, sp, #0
    d34a:	60f8      	str	r0, [r7, #12]
    d34c:	60b9      	str	r1, [r7, #8]
    d34e:	607a      	str	r2, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d350:	68fb      	ldr	r3, [r7, #12]
    d352:	2b00      	cmp	r3, #0
    d354:	d101      	bne.n	d35a <art_svl_ringbuf_init+0x16>
    d356:	2300      	movs	r3, #0
    d358:	e00f      	b.n	d37a <art_svl_ringbuf_init+0x36>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	617b      	str	r3, [r7, #20]
    
    rb->buf = buf;
    d35e:	697b      	ldr	r3, [r7, #20]
    d360:	68ba      	ldr	r2, [r7, #8]
    d362:	601a      	str	r2, [r3, #0]
    rb->len = len;
    d364:	697b      	ldr	r3, [r7, #20]
    d366:	687a      	ldr	r2, [r7, #4]
    d368:	605a      	str	r2, [r3, #4]
    rb->r_offset = 0;
    d36a:	697b      	ldr	r3, [r7, #20]
    d36c:	2200      	movs	r2, #0
    d36e:	609a      	str	r2, [r3, #8]
    rb->w_offset = 0;
    d370:	697b      	ldr	r3, [r7, #20]
    d372:	2200      	movs	r2, #0
    d374:	60da      	str	r2, [r3, #12]

    return rb->len;
    d376:	697b      	ldr	r3, [r7, #20]
    d378:	685b      	ldr	r3, [r3, #4]
}
    d37a:	4618      	mov	r0, r3
    d37c:	371c      	adds	r7, #28
    d37e:	46bd      	mov	sp, r7
    d380:	f85d 7b04 	ldr.w	r7, [sp], #4
    d384:	4770      	bx	lr

0000d386 <art_svl_ringbuf_available>:

size_t art_svl_ringbuf_available( void* vrb ){
    d386:	b480      	push	{r7}
    d388:	b085      	sub	sp, #20
    d38a:	af00      	add	r7, sp, #0
    d38c:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d38e:	687b      	ldr	r3, [r7, #4]
    d390:	2b00      	cmp	r3, #0
    d392:	d101      	bne.n	d398 <art_svl_ringbuf_available+0x12>
    d394:	2300      	movs	r3, #0
    d396:	e01a      	b.n	d3ce <art_svl_ringbuf_available+0x48>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	60bb      	str	r3, [r7, #8]

    size_t avail = 0x00;
    d39c:	2300      	movs	r3, #0
    d39e:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d3a0:	68bb      	ldr	r3, [r7, #8]
    d3a2:	68da      	ldr	r2, [r3, #12]
    d3a4:	68bb      	ldr	r3, [r7, #8]
    d3a6:	689b      	ldr	r3, [r3, #8]
    d3a8:	429a      	cmp	r2, r3
    d3aa:	d306      	bcc.n	d3ba <art_svl_ringbuf_available+0x34>
        avail = rb->w_offset - rb->r_offset;
    d3ac:	68bb      	ldr	r3, [r7, #8]
    d3ae:	68da      	ldr	r2, [r3, #12]
    d3b0:	68bb      	ldr	r3, [r7, #8]
    d3b2:	689b      	ldr	r3, [r3, #8]
    d3b4:	1ad3      	subs	r3, r2, r3
    d3b6:	60fb      	str	r3, [r7, #12]
    d3b8:	e008      	b.n	d3cc <art_svl_ringbuf_available+0x46>
    }else{
        avail = rb->len - (rb->r_offset - rb->w_offset);
    d3ba:	68bb      	ldr	r3, [r7, #8]
    d3bc:	685a      	ldr	r2, [r3, #4]
    d3be:	68bb      	ldr	r3, [r7, #8]
    d3c0:	68d9      	ldr	r1, [r3, #12]
    d3c2:	68bb      	ldr	r3, [r7, #8]
    d3c4:	689b      	ldr	r3, [r3, #8]
    d3c6:	1acb      	subs	r3, r1, r3
    d3c8:	4413      	add	r3, r2
    d3ca:	60fb      	str	r3, [r7, #12]
    }
    return avail;
    d3cc:	68fb      	ldr	r3, [r7, #12]
}
    d3ce:	4618      	mov	r0, r3
    d3d0:	3714      	adds	r7, #20
    d3d2:	46bd      	mov	sp, r7
    d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3d8:	4770      	bx	lr

0000d3da <art_svl_ringbuf_bytes_free>:

size_t art_svl_ringbuf_bytes_free( void* vrb ){
    d3da:	b480      	push	{r7}
    d3dc:	b085      	sub	sp, #20
    d3de:	af00      	add	r7, sp, #0
    d3e0:	6078      	str	r0, [r7, #4]
    if( vrb == NULL ){ return 0; }
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d101      	bne.n	d3ec <art_svl_ringbuf_bytes_free+0x12>
    d3e8:	2300      	movs	r3, #0
    d3ea:	e01c      	b.n	d426 <art_svl_ringbuf_bytes_free+0x4c>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	60bb      	str	r3, [r7, #8]

    size_t friegh = 0x00;
    d3f0:	2300      	movs	r3, #0
    d3f2:	60fb      	str	r3, [r7, #12]
    if((rb->w_offset) >= (rb->r_offset)){
    d3f4:	68bb      	ldr	r3, [r7, #8]
    d3f6:	68da      	ldr	r2, [r3, #12]
    d3f8:	68bb      	ldr	r3, [r7, #8]
    d3fa:	689b      	ldr	r3, [r3, #8]
    d3fc:	429a      	cmp	r2, r3
    d3fe:	d30a      	bcc.n	d416 <art_svl_ringbuf_bytes_free+0x3c>
        friegh = rb->len - rb->w_offset + rb->r_offset -1;
    d400:	68bb      	ldr	r3, [r7, #8]
    d402:	685a      	ldr	r2, [r3, #4]
    d404:	68bb      	ldr	r3, [r7, #8]
    d406:	68db      	ldr	r3, [r3, #12]
    d408:	1ad2      	subs	r2, r2, r3
    d40a:	68bb      	ldr	r3, [r7, #8]
    d40c:	689b      	ldr	r3, [r3, #8]
    d40e:	4413      	add	r3, r2
    d410:	3b01      	subs	r3, #1
    d412:	60fb      	str	r3, [r7, #12]
    d414:	e006      	b.n	d424 <art_svl_ringbuf_bytes_free+0x4a>
    }else{
        friegh = rb->r_offset - rb->w_offset - 1;
    d416:	68bb      	ldr	r3, [r7, #8]
    d418:	689a      	ldr	r2, [r3, #8]
    d41a:	68bb      	ldr	r3, [r7, #8]
    d41c:	68db      	ldr	r3, [r3, #12]
    d41e:	1ad3      	subs	r3, r2, r3
    d420:	3b01      	subs	r3, #1
    d422:	60fb      	str	r3, [r7, #12]
    }
    return friegh;
    d424:	68fb      	ldr	r3, [r7, #12]
}
    d426:	4618      	mov	r0, r3
    d428:	3714      	adds	r7, #20
    d42a:	46bd      	mov	sp, r7
    d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d430:	4770      	bx	lr

0000d432 <art_svl_ringbuf_write>:

size_t art_svl_ringbuf_write( void* vrb, uint8_t c ){
    d432:	b580      	push	{r7, lr}
    d434:	b084      	sub	sp, #16
    d436:	af00      	add	r7, sp, #0
    d438:	6078      	str	r0, [r7, #4]
    d43a:	460b      	mov	r3, r1
    d43c:	70fb      	strb	r3, [r7, #3]
    if( vrb == NULL ){ return 0; }
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	2b00      	cmp	r3, #0
    d442:	d101      	bne.n	d448 <art_svl_ringbuf_write+0x16>
    d444:	2300      	movs	r3, #0
    d446:	e01f      	b.n	d488 <art_svl_ringbuf_write+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d448:	687b      	ldr	r3, [r7, #4]
    d44a:	60fb      	str	r3, [r7, #12]

    if(art_svl_ringbuf_bytes_free(rb) > 0){
    d44c:	68f8      	ldr	r0, [r7, #12]
    d44e:	f7ff ffc4 	bl	d3da <art_svl_ringbuf_bytes_free>
    d452:	4603      	mov	r3, r0
    d454:	2b00      	cmp	r3, #0
    d456:	d016      	beq.n	d486 <art_svl_ringbuf_write+0x54>
        *(rb->buf + rb->w_offset) = c;
    d458:	68fb      	ldr	r3, [r7, #12]
    d45a:	681a      	ldr	r2, [r3, #0]
    d45c:	68fb      	ldr	r3, [r7, #12]
    d45e:	68db      	ldr	r3, [r3, #12]
    d460:	4413      	add	r3, r2
    d462:	78fa      	ldrb	r2, [r7, #3]
    d464:	701a      	strb	r2, [r3, #0]
        rb->w_offset++;
    d466:	68fb      	ldr	r3, [r7, #12]
    d468:	68db      	ldr	r3, [r3, #12]
    d46a:	1c5a      	adds	r2, r3, #1
    d46c:	68fb      	ldr	r3, [r7, #12]
    d46e:	60da      	str	r2, [r3, #12]
        if(rb->w_offset >= rb->len){
    d470:	68fb      	ldr	r3, [r7, #12]
    d472:	68da      	ldr	r2, [r3, #12]
    d474:	68fb      	ldr	r3, [r7, #12]
    d476:	685b      	ldr	r3, [r3, #4]
    d478:	429a      	cmp	r2, r3
    d47a:	d302      	bcc.n	d482 <art_svl_ringbuf_write+0x50>
            rb->w_offset = 0;
    d47c:	68fb      	ldr	r3, [r7, #12]
    d47e:	2200      	movs	r2, #0
    d480:	60da      	str	r2, [r3, #12]
        }
        return 1;
    d482:	2301      	movs	r3, #1
    d484:	e000      	b.n	d488 <art_svl_ringbuf_write+0x56>
    }
    return 0;
    d486:	2300      	movs	r3, #0
}
    d488:	4618      	mov	r0, r3
    d48a:	3710      	adds	r7, #16
    d48c:	46bd      	mov	sp, r7
    d48e:	bd80      	pop	{r7, pc}

0000d490 <art_svl_ringbuf_read>:

size_t art_svl_ringbuf_read( void* vrb, uint8_t* c ){
    d490:	b580      	push	{r7, lr}
    d492:	b084      	sub	sp, #16
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    d498:	6039      	str	r1, [r7, #0]
    if( vrb == NULL ){ return 0; }
    d49a:	687b      	ldr	r3, [r7, #4]
    d49c:	2b00      	cmp	r3, #0
    d49e:	d101      	bne.n	d4a4 <art_svl_ringbuf_read+0x14>
    d4a0:	2300      	movs	r3, #0
    d4a2:	e020      	b.n	d4e6 <art_svl_ringbuf_read+0x56>
    art_svl_ringbuf_t* rb = (art_svl_ringbuf_t*)vrb;
    d4a4:	687b      	ldr	r3, [r7, #4]
    d4a6:	60fb      	str	r3, [r7, #12]
    
    if(art_svl_ringbuf_available(rb) > 0){
    d4a8:	68f8      	ldr	r0, [r7, #12]
    d4aa:	f7ff ff6c 	bl	d386 <art_svl_ringbuf_available>
    d4ae:	4603      	mov	r3, r0
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	d017      	beq.n	d4e4 <art_svl_ringbuf_read+0x54>
        *c = *(rb->buf + rb->r_offset);
    d4b4:	68fb      	ldr	r3, [r7, #12]
    d4b6:	681a      	ldr	r2, [r3, #0]
    d4b8:	68fb      	ldr	r3, [r7, #12]
    d4ba:	689b      	ldr	r3, [r3, #8]
    d4bc:	4413      	add	r3, r2
    d4be:	781a      	ldrb	r2, [r3, #0]
    d4c0:	683b      	ldr	r3, [r7, #0]
    d4c2:	701a      	strb	r2, [r3, #0]
        rb->r_offset++;
    d4c4:	68fb      	ldr	r3, [r7, #12]
    d4c6:	689b      	ldr	r3, [r3, #8]
    d4c8:	1c5a      	adds	r2, r3, #1
    d4ca:	68fb      	ldr	r3, [r7, #12]
    d4cc:	609a      	str	r2, [r3, #8]
        if(rb->r_offset >= rb->len){
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	689a      	ldr	r2, [r3, #8]
    d4d2:	68fb      	ldr	r3, [r7, #12]
    d4d4:	685b      	ldr	r3, [r3, #4]
    d4d6:	429a      	cmp	r2, r3
    d4d8:	d302      	bcc.n	d4e0 <art_svl_ringbuf_read+0x50>
            rb->r_offset = 0;
    d4da:	68fb      	ldr	r3, [r7, #12]
    d4dc:	2200      	movs	r2, #0
    d4de:	609a      	str	r2, [r3, #8]
        }
        return 1;
    d4e0:	2301      	movs	r3, #1
    d4e2:	e000      	b.n	d4e6 <art_svl_ringbuf_read+0x56>
    }
    return 0;
    d4e4:	2300      	movs	r3, #0
    d4e6:	4618      	mov	r0, r3
    d4e8:	3710      	adds	r7, #16
    d4ea:	46bd      	mov	sp, r7
    d4ec:	bd80      	pop	{r7, pc}

0000d4ee <svl_uart_read>:
//*****************************************************************************
//
// UART read buffer
//
//*****************************************************************************
size_t svl_uart_read(void *pHandle, char* buf, size_t len){
    d4ee:	b580      	push	{r7, lr}
    d4f0:	b08a      	sub	sp, #40	; 0x28
    d4f2:	af00      	add	r7, sp, #0
    d4f4:	60f8      	str	r0, [r7, #12]
    d4f6:	60b9      	str	r1, [r7, #8]
    d4f8:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesRead = 0x00;
    d4fa:	2300      	movs	r3, #0
    d4fc:	627b      	str	r3, [r7, #36]	; 0x24
    am_hal_uart_transfer_t sRead = {
    d4fe:	2301      	movs	r3, #1
    d500:	613b      	str	r3, [r7, #16]
    d502:	68bb      	ldr	r3, [r7, #8]
    d504:	617b      	str	r3, [r7, #20]
    d506:	687b      	ldr	r3, [r7, #4]
    d508:	61bb      	str	r3, [r7, #24]
    d50a:	2300      	movs	r3, #0
    d50c:	61fb      	str	r3, [r7, #28]
    d50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d512:	623b      	str	r3, [r7, #32]
        .pui8Data = (uint8_t*)buf,
        .ui32NumBytes = len,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesRead,
    };
    am_hal_uart_transfer(pHandle, &sRead);
    d514:	f107 0310 	add.w	r3, r7, #16
    d518:	4619      	mov	r1, r3
    d51a:	68f8      	ldr	r0, [r7, #12]
    d51c:	f000 ffb4 	bl	e488 <am_hal_uart_transfer>
    return ui32BytesRead;
    d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d522:	4618      	mov	r0, r3
    d524:	3728      	adds	r7, #40	; 0x28
    d526:	46bd      	mov	sp, r7
    d528:	bd80      	pop	{r7, pc}

0000d52a <svl_uart_write>:
//*****************************************************************************
//
// UART write buffer
//
//*****************************************************************************
size_t svl_uart_write(void *pHandle, char* buf, size_t len){
    d52a:	b580      	push	{r7, lr}
    d52c:	b08a      	sub	sp, #40	; 0x28
    d52e:	af00      	add	r7, sp, #0
    d530:	60f8      	str	r0, [r7, #12]
    d532:	60b9      	str	r1, [r7, #8]
    d534:	607a      	str	r2, [r7, #4]
    uint32_t ui32BytesWritten = 0;
    d536:	2300      	movs	r3, #0
    d538:	627b      	str	r3, [r7, #36]	; 0x24
    const am_hal_uart_transfer_t sUartWrite =
    d53a:	2300      	movs	r3, #0
    d53c:	613b      	str	r3, [r7, #16]
    d53e:	68bb      	ldr	r3, [r7, #8]
    d540:	617b      	str	r3, [r7, #20]
    d542:	687b      	ldr	r3, [r7, #4]
    d544:	61bb      	str	r3, [r7, #24]
    d546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d54a:	61fb      	str	r3, [r7, #28]
    d54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d550:	623b      	str	r3, [r7, #32]
        .ui32NumBytes = len,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    am_hal_uart_transfer(pHandle, &sUartWrite);
    d552:	f107 0310 	add.w	r3, r7, #16
    d556:	4619      	mov	r1, r3
    d558:	68f8      	ldr	r0, [r7, #12]
    d55a:	f000 ff95 	bl	e488 <am_hal_uart_transfer>

    return ui32BytesWritten;
    d55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d560:	4618      	mov	r0, r3
    d562:	3728      	adds	r7, #40	; 0x28
    d564:	46bd      	mov	sp, r7
    d566:	bd80      	pop	{r7, pc}

0000d568 <svl_uart_write_byte>:
//*****************************************************************************
//
// UART write byte
//
//*****************************************************************************
size_t svl_uart_write_byte(void *pHandle, uint8_t c){
    d568:	b580      	push	{r7, lr}
    d56a:	b082      	sub	sp, #8
    d56c:	af00      	add	r7, sp, #0
    d56e:	6078      	str	r0, [r7, #4]
    d570:	460b      	mov	r3, r1
    d572:	70fb      	strb	r3, [r7, #3]
    return svl_uart_write(pHandle, (char*)&c, 1);
    d574:	1cfb      	adds	r3, r7, #3
    d576:	2201      	movs	r2, #1
    d578:	4619      	mov	r1, r3
    d57a:	6878      	ldr	r0, [r7, #4]
    d57c:	f7ff ffd5 	bl	d52a <svl_uart_write>
    d580:	4603      	mov	r3, r0
}
    d582:	4618      	mov	r0, r3
    d584:	3708      	adds	r7, #8
    d586:	46bd      	mov	sp, r7
    d588:	bd80      	pop	{r7, pc}
	...

0000d58c <_fill_ticks>:

volatile uint32_t ap3_stimer_overflows = 0x00;
uint64_t ticks = 0;

void _fill_ticks(void)
{
    d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d58e:	af00      	add	r7, sp, #0
    ticks = ap3_stimer_overflows;
    d590:	4b12      	ldr	r3, [pc, #72]	; (d5dc <_fill_ticks+0x50>)
    d592:	681b      	ldr	r3, [r3, #0]
    d594:	f04f 0400 	mov.w	r4, #0
    d598:	4a11      	ldr	r2, [pc, #68]	; (d5e0 <_fill_ticks+0x54>)
    d59a:	e9c2 3400 	strd	r3, r4, [r2]
    ticks <<= 32;
    d59e:	4b10      	ldr	r3, [pc, #64]	; (d5e0 <_fill_ticks+0x54>)
    d5a0:	e9d3 1200 	ldrd	r1, r2, [r3]
    d5a4:	f04f 0300 	mov.w	r3, #0
    d5a8:	f04f 0400 	mov.w	r4, #0
    d5ac:	000c      	movs	r4, r1
    d5ae:	2300      	movs	r3, #0
    d5b0:	4a0b      	ldr	r2, [pc, #44]	; (d5e0 <_fill_ticks+0x54>)
    d5b2:	e9c2 3400 	strd	r3, r4, [r2]
    ticks |= (am_hal_stimer_counter_get() & 0xFFFFFFFF);
    d5b6:	f000 fd71 	bl	e09c <am_hal_stimer_counter_get>
    d5ba:	4603      	mov	r3, r0
    d5bc:	4619      	mov	r1, r3
    d5be:	f04f 0200 	mov.w	r2, #0
    d5c2:	4b07      	ldr	r3, [pc, #28]	; (d5e0 <_fill_ticks+0x54>)
    d5c4:	e9d3 3400 	ldrd	r3, r4, [r3]
    d5c8:	ea41 0503 	orr.w	r5, r1, r3
    d5cc:	ea42 0604 	orr.w	r6, r2, r4
    d5d0:	4b03      	ldr	r3, [pc, #12]	; (d5e0 <_fill_ticks+0x54>)
    d5d2:	e9c3 5600 	strd	r5, r6, [r3]
}
    d5d6:	bf00      	nop
    d5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5da:	bf00      	nop
    d5dc:	10000a5c 	.word	0x10000a5c
    d5e0:	10000a60 	.word	0x10000a60

0000d5e4 <millis>:

size_t millis(void){
    d5e4:	b598      	push	{r3, r4, r7, lr}
    d5e6:	af00      	add	r7, sp, #0
    _fill_ticks();
    d5e8:	f7ff ffd0 	bl	d58c <_fill_ticks>
    return (uint32_t)(ticks / AP3_STIMER_FREQ_KHZ);
    d5ec:	4b06      	ldr	r3, [pc, #24]	; (d608 <millis+0x24>)
    d5ee:	e9d3 0100 	ldrd	r0, r1, [r3]
    d5f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
    d5f6:	f04f 0300 	mov.w	r3, #0
    d5fa:	f7fe fd81 	bl	c100 <__aeabi_uldivmod>
    d5fe:	4603      	mov	r3, r0
    d600:	460c      	mov	r4, r1
}
    d602:	4618      	mov	r0, r3
    d604:	bd98      	pop	{r3, r4, r7, pc}
    d606:	bf00      	nop
    d608:	10000a60 	.word	0x10000a60

0000d60c <enable_burst_mode>:
//
// Burst mode
//
//*****************************************************************************
bool enable_burst_mode(void)
{
    d60c:	b580      	push	{r7, lr}
    d60e:	b082      	sub	sp, #8
    d610:	af00      	add	r7, sp, #0
    // Check that the Burst Feature is available.
    am_hal_burst_avail_e eBurstModeAvailable;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_initialize(&eBurstModeAvailable))
    d612:	1dfb      	adds	r3, r7, #7
    d614:	4618      	mov	r0, r3
    d616:	f000 f8dd 	bl	d7d4 <am_hal_burst_mode_initialize>
    d61a:	4603      	mov	r3, r0
    d61c:	2b00      	cmp	r3, #0
    d61e:	d001      	beq.n	d624 <enable_burst_mode+0x18>
    {
        return (false);
    d620:	2300      	movs	r3, #0
    d622:	e009      	b.n	d638 <enable_burst_mode+0x2c>
    }

    // Put the MCU into "Burst" mode.
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS != am_hal_burst_mode_enable(&eBurstMode))
    d624:	1dbb      	adds	r3, r7, #6
    d626:	4618      	mov	r0, r3
    d628:	f000 f916 	bl	d858 <am_hal_burst_mode_enable>
    d62c:	4603      	mov	r3, r0
    d62e:	2b00      	cmp	r3, #0
    d630:	d001      	beq.n	d636 <enable_burst_mode+0x2a>
    {
        return (false);
    d632:	2300      	movs	r3, #0
    d634:	e000      	b.n	d638 <enable_burst_mode+0x2c>
    }
    return (true);
    d636:	2301      	movs	r3, #1
}
    d638:	4618      	mov	r0, r3
    d63a:	3708      	adds	r7, #8
    d63c:	46bd      	mov	sp, r7
    d63e:	bd80      	pop	{r7, pc}

0000d640 <disable_burst_mode>:

//Turns main processor from 96MHz to 48MHz
//Returns false if disable fails
bool disable_burst_mode(void)
{
    d640:	b580      	push	{r7, lr}
    d642:	b082      	sub	sp, #8
    d644:	af00      	add	r7, sp, #0
    am_hal_burst_mode_e eBurstMode;
    if (AM_HAL_STATUS_SUCCESS == am_hal_burst_mode_disable(&eBurstMode))
    d646:	1dfb      	adds	r3, r7, #7
    d648:	4618      	mov	r0, r3
    d64a:	f000 f935 	bl	d8b8 <am_hal_burst_mode_disable>
    d64e:	4603      	mov	r3, r0
    d650:	2b00      	cmp	r3, #0
    d652:	d104      	bne.n	d65e <disable_burst_mode+0x1e>
    {
        if (AM_HAL_NORMAL_MODE != eBurstMode)
    d654:	79fb      	ldrb	r3, [r7, #7]
    d656:	2b01      	cmp	r3, #1
    d658:	d003      	beq.n	d662 <disable_burst_mode+0x22>
        {
            return (false);
    d65a:	2300      	movs	r3, #0
    d65c:	e002      	b.n	d664 <disable_burst_mode+0x24>
        }
    }
    else
    {
        return (false);
    d65e:	2300      	movs	r3, #0
    d660:	e000      	b.n	d664 <disable_burst_mode+0x24>
    }
    return (true);
    d662:	2301      	movs	r3, #1
}
    d664:	4618      	mov	r0, r3
    d666:	3708      	adds	r7, #8
    d668:	46bd      	mov	sp, r7
    d66a:	bd80      	pop	{r7, pc}

0000d66c <ap3_gpio_enable_interrupts>:

#define GPIOCFG_FLD_INTD_S 3
#define GPIOCFG_FLD_OUTCFG_S 1
#define GPIOCFG_FLD_INCFG_S 0

uint32_t ap3_gpio_enable_interrupts(uint32_t ui32Pin, uint32_t eIntDir){
    d66c:	b580      	push	{r7, lr}
    d66e:	b08a      	sub	sp, #40	; 0x28
    d670:	af00      	add	r7, sp, #0
    d672:	6078      	str	r0, [r7, #4]
    d674:	6039      	str	r1, [r7, #0]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    bool bClearEnable = false;
    d676:	2300      	movs	r3, #0
    d678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;
    d67c:	2300      	movs	r3, #0
    d67e:	623b      	str	r3, [r7, #32]
    d680:	6a3b      	ldr	r3, [r7, #32]
    d682:	61fb      	str	r3, [r7, #28]
    d684:	69fb      	ldr	r3, [r7, #28]
    d686:	61bb      	str	r3, [r7, #24]
    ui32GPCfg |= (((eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S) | (((eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);
    d688:	683b      	ldr	r3, [r7, #0]
    d68a:	00db      	lsls	r3, r3, #3
    d68c:	f003 0208 	and.w	r2, r3, #8
    d690:	683b      	ldr	r3, [r7, #0]
    d692:	085b      	lsrs	r3, r3, #1
    d694:	f003 0301 	and.w	r3, r3, #1
    d698:	4313      	orrs	r3, r2
    d69a:	69ba      	ldr	r2, [r7, #24]
    d69c:	4313      	orrs	r3, r2
    d69e:	61bb      	str	r3, [r7, #24]

    uint32_t ui32GPCfgAddr;
    uint32_t ui32GPCfgClearMask;
    uint32_t ui32GPCfgShft;

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	009b      	lsls	r3, r3, #2
    d6a4:	f003 031c 	and.w	r3, r3, #28
    d6a8:	617b      	str	r3, [r7, #20]

    ui32GPCfgAddr = AM_REGADDR(GPIO, CFGA) + ((ui32Pin >> 1) & ~0x3);
    d6aa:	687b      	ldr	r3, [r7, #4]
    d6ac:	085b      	lsrs	r3, r3, #1
    d6ae:	f023 0203 	bic.w	r2, r3, #3
    d6b2:	4b1d      	ldr	r3, [pc, #116]	; (d728 <ap3_gpio_enable_interrupts+0xbc>)
    d6b4:	4413      	add	r3, r2
    d6b6:	613b      	str	r3, [r7, #16]
    ui32GPCfgClearMask = ~((uint32_t)0xF << ui32GPCfgShft);
    d6b8:	220f      	movs	r2, #15
    d6ba:	697b      	ldr	r3, [r7, #20]
    d6bc:	fa02 f303 	lsl.w	r3, r2, r3
    d6c0:	43db      	mvns	r3, r3
    d6c2:	60fb      	str	r3, [r7, #12]

    ui32GPCfg <<= ui32GPCfgShft;
    d6c4:	69ba      	ldr	r2, [r7, #24]
    d6c6:	697b      	ldr	r3, [r7, #20]
    d6c8:	fa02 f303 	lsl.w	r3, r2, r3
    d6cc:	61bb      	str	r3, [r7, #24]

    AM_CRITICAL_BEGIN
    d6ce:	f000 fc35 	bl	df3c <am_hal_interrupt_master_disable>
    d6d2:	4603      	mov	r3, r0
    d6d4:	60bb      	str	r3, [r7, #8]

    if (bClearEnable)
    d6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d6da:	2b00      	cmp	r3, #0
    d6dc:	d00c      	beq.n	d6f8 <ap3_gpio_enable_interrupts+0x8c>
    {
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d6de:	687b      	ldr	r3, [r7, #4]
    d6e0:	f003 021f 	and.w	r2, r3, #31
    d6e4:	687b      	ldr	r3, [r7, #4]
    d6e6:	08db      	lsrs	r3, r3, #3
    d6e8:	f003 0104 	and.w	r1, r3, #4
    d6ec:	4b0f      	ldr	r3, [pc, #60]	; (d72c <ap3_gpio_enable_interrupts+0xc0>)
    d6ee:	440b      	add	r3, r1
    d6f0:	4619      	mov	r1, r3
    d6f2:	2301      	movs	r3, #1
    d6f4:	4093      	lsls	r3, r2
    d6f6:	600b      	str	r3, [r1, #0]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d6f8:	4b0d      	ldr	r3, [pc, #52]	; (d730 <ap3_gpio_enable_interrupts+0xc4>)
    d6fa:	2273      	movs	r2, #115	; 0x73
    d6fc:	661a      	str	r2, [r3, #96]	; 0x60

    // Here's where the magic happens
    AM_REGVAL(ui32GPCfgAddr) = (AM_REGVAL(ui32GPCfgAddr) & ui32GPCfgClearMask) | ui32GPCfg;
    d6fe:	693b      	ldr	r3, [r7, #16]
    d700:	681a      	ldr	r2, [r3, #0]
    d702:	68fb      	ldr	r3, [r7, #12]
    d704:	ea02 0103 	and.w	r1, r2, r3
    d708:	693b      	ldr	r3, [r7, #16]
    d70a:	69ba      	ldr	r2, [r7, #24]
    d70c:	430a      	orrs	r2, r1
    d70e:	601a      	str	r2, [r3, #0]

    GPIO->PADKEY = 0;
    d710:	4b07      	ldr	r3, [pc, #28]	; (d730 <ap3_gpio_enable_interrupts+0xc4>)
    d712:	2200      	movs	r2, #0
    d714:	661a      	str	r2, [r3, #96]	; 0x60

    AM_CRITICAL_END
    d716:	68bb      	ldr	r3, [r7, #8]
    d718:	4618      	mov	r0, r3
    d71a:	f000 fc13 	bl	df44 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d71e:	2300      	movs	r3, #0
}
    d720:	4618      	mov	r0, r3
    d722:	3728      	adds	r7, #40	; 0x28
    d724:	46bd      	mov	sp, r7
    d726:	bd80      	pop	{r7, pc}
    d728:	40010040 	.word	0x40010040
    d72c:	400100b4 	.word	0x400100b4
    d730:	40010000 	.word	0x40010000

0000d734 <memset>:
    d734:	b4f0      	push	{r4, r5, r6, r7}
    d736:	0786      	lsls	r6, r0, #30
    d738:	d046      	beq.n	d7c8 <memset+0x94>
    d73a:	1e54      	subs	r4, r2, #1
    d73c:	2a00      	cmp	r2, #0
    d73e:	d03c      	beq.n	d7ba <memset+0x86>
    d740:	b2ca      	uxtb	r2, r1
    d742:	4603      	mov	r3, r0
    d744:	e002      	b.n	d74c <memset+0x18>
    d746:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    d74a:	d336      	bcc.n	d7ba <memset+0x86>
    d74c:	f803 2b01 	strb.w	r2, [r3], #1
    d750:	079d      	lsls	r5, r3, #30
    d752:	d1f8      	bne.n	d746 <memset+0x12>
    d754:	2c03      	cmp	r4, #3
    d756:	d929      	bls.n	d7ac <memset+0x78>
    d758:	b2cd      	uxtb	r5, r1
    d75a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d75e:	2c0f      	cmp	r4, #15
    d760:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d764:	d933      	bls.n	d7ce <memset+0x9a>
    d766:	f1a4 0610 	sub.w	r6, r4, #16
    d76a:	0936      	lsrs	r6, r6, #4
    d76c:	f103 0720 	add.w	r7, r3, #32
    d770:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    d774:	f103 0210 	add.w	r2, r3, #16
    d778:	e942 5504 	strd	r5, r5, [r2, #-16]
    d77c:	e942 5502 	strd	r5, r5, [r2, #-8]
    d780:	3210      	adds	r2, #16
    d782:	42ba      	cmp	r2, r7
    d784:	d1f8      	bne.n	d778 <memset+0x44>
    d786:	1c72      	adds	r2, r6, #1
    d788:	f014 0f0c 	tst.w	r4, #12
    d78c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d790:	f004 060f 	and.w	r6, r4, #15
    d794:	d013      	beq.n	d7be <memset+0x8a>
    d796:	1f33      	subs	r3, r6, #4
    d798:	f023 0303 	bic.w	r3, r3, #3
    d79c:	3304      	adds	r3, #4
    d79e:	4413      	add	r3, r2
    d7a0:	f842 5b04 	str.w	r5, [r2], #4
    d7a4:	4293      	cmp	r3, r2
    d7a6:	d1fb      	bne.n	d7a0 <memset+0x6c>
    d7a8:	f006 0403 	and.w	r4, r6, #3
    d7ac:	b12c      	cbz	r4, d7ba <memset+0x86>
    d7ae:	b2c9      	uxtb	r1, r1
    d7b0:	441c      	add	r4, r3
    d7b2:	f803 1b01 	strb.w	r1, [r3], #1
    d7b6:	429c      	cmp	r4, r3
    d7b8:	d1fb      	bne.n	d7b2 <memset+0x7e>
    d7ba:	bcf0      	pop	{r4, r5, r6, r7}
    d7bc:	4770      	bx	lr
    d7be:	4634      	mov	r4, r6
    d7c0:	4613      	mov	r3, r2
    d7c2:	2c00      	cmp	r4, #0
    d7c4:	d1f3      	bne.n	d7ae <memset+0x7a>
    d7c6:	e7f8      	b.n	d7ba <memset+0x86>
    d7c8:	4614      	mov	r4, r2
    d7ca:	4603      	mov	r3, r0
    d7cc:	e7c2      	b.n	d754 <memset+0x20>
    d7ce:	461a      	mov	r2, r3
    d7d0:	4626      	mov	r6, r4
    d7d2:	e7e0      	b.n	d796 <memset+0x62>

0000d7d4 <am_hal_burst_mode_initialize>:
    d7d4:	b570      	push	{r4, r5, r6, lr}
    d7d6:	4b1c      	ldr	r3, [pc, #112]	; (d848 <am_hal_burst_mode_initialize+0x74>)
    d7d8:	695b      	ldr	r3, [r3, #20]
    d7da:	4604      	mov	r4, r0
    d7dc:	07d8      	lsls	r0, r3, #31
    d7de:	b082      	sub	sp, #8
    d7e0:	d521      	bpl.n	d826 <am_hal_burst_mode_initialize+0x52>
    d7e2:	4b1a      	ldr	r3, [pc, #104]	; (d84c <am_hal_burst_mode_initialize+0x78>)
    d7e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d7ea:	629a      	str	r2, [r3, #40]	; 0x28
    d7ec:	681b      	ldr	r3, [r3, #0]
    d7ee:	07d9      	lsls	r1, r3, #31
    d7f0:	d427      	bmi.n	d842 <am_hal_burst_mode_initialize+0x6e>
    d7f2:	4d15      	ldr	r5, [pc, #84]	; (d848 <am_hal_burst_mode_initialize+0x74>)
    d7f4:	4916      	ldr	r1, [pc, #88]	; (d850 <am_hal_burst_mode_initialize+0x7c>)
    d7f6:	7e2a      	ldrb	r2, [r5, #24]
    d7f8:	2601      	movs	r6, #1
    d7fa:	f042 0210 	orr.w	r2, r2, #16
    d7fe:	2320      	movs	r3, #32
    d800:	762a      	strb	r2, [r5, #24]
    d802:	f242 7010 	movw	r0, #10000	; 0x2710
    d806:	461a      	mov	r2, r3
    d808:	9600      	str	r6, [sp, #0]
    d80a:	f000 f9ab 	bl	db64 <am_hal_flash_delay_status_check>
    d80e:	b990      	cbnz	r0, d836 <am_hal_burst_mode_initialize+0x62>
    d810:	69ab      	ldr	r3, [r5, #24]
    d812:	065a      	lsls	r2, r3, #25
    d814:	d507      	bpl.n	d826 <am_hal_burst_mode_initialize+0x52>
    d816:	69ab      	ldr	r3, [r5, #24]
    d818:	069b      	lsls	r3, r3, #26
    d81a:	d504      	bpl.n	d826 <am_hal_burst_mode_initialize+0x52>
    d81c:	4b0d      	ldr	r3, [pc, #52]	; (d854 <am_hal_burst_mode_initialize+0x80>)
    d81e:	701e      	strb	r6, [r3, #0]
    d820:	7020      	strb	r0, [r4, #0]
    d822:	b002      	add	sp, #8
    d824:	bd70      	pop	{r4, r5, r6, pc}
    d826:	4a0b      	ldr	r2, [pc, #44]	; (d854 <am_hal_burst_mode_initialize+0x80>)
    d828:	2100      	movs	r1, #0
    d82a:	2301      	movs	r3, #1
    d82c:	2007      	movs	r0, #7
    d82e:	7011      	strb	r1, [r2, #0]
    d830:	7023      	strb	r3, [r4, #0]
    d832:	b002      	add	sp, #8
    d834:	bd70      	pop	{r4, r5, r6, pc}
    d836:	4b07      	ldr	r3, [pc, #28]	; (d854 <am_hal_burst_mode_initialize+0x80>)
    d838:	2200      	movs	r2, #0
    d83a:	701a      	strb	r2, [r3, #0]
    d83c:	7026      	strb	r6, [r4, #0]
    d83e:	b002      	add	sp, #8
    d840:	bd70      	pop	{r4, r5, r6, pc}
    d842:	f000 fbd9 	bl	dff8 <am_hal_pwrctrl_blebuck_trim>
    d846:	e7d4      	b.n	d7f2 <am_hal_burst_mode_initialize+0x1e>
    d848:	40020000 	.word	0x40020000
    d84c:	40021000 	.word	0x40021000
    d850:	40020018 	.word	0x40020018
    d854:	10000a68 	.word	0x10000a68

0000d858 <am_hal_burst_mode_enable>:
    d858:	b570      	push	{r4, r5, r6, lr}
    d85a:	4b15      	ldr	r3, [pc, #84]	; (d8b0 <am_hal_burst_mode_enable+0x58>)
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	b082      	sub	sp, #8
    d860:	4604      	mov	r4, r0
    d862:	b1db      	cbz	r3, d89c <am_hal_burst_mode_enable+0x44>
    d864:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d868:	2601      	movs	r6, #1
    d86a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d86e:	4911      	ldr	r1, [pc, #68]	; (d8b4 <am_hal_burst_mode_enable+0x5c>)
    d870:	4332      	orrs	r2, r6
    d872:	2304      	movs	r3, #4
    d874:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d878:	f242 7010 	movw	r0, #10000	; 0x2710
    d87c:	461a      	mov	r2, r3
    d87e:	9600      	str	r6, [sp, #0]
    d880:	f000 f970 	bl	db64 <am_hal_flash_delay_status_check>
    d884:	b938      	cbnz	r0, d896 <am_hal_burst_mode_enable+0x3e>
    d886:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d888:	079b      	lsls	r3, r3, #30
    d88a:	d50c      	bpl.n	d8a6 <am_hal_burst_mode_enable+0x4e>
    d88c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d88e:	f013 0f04 	tst.w	r3, #4
    d892:	bf18      	it	ne
    d894:	4606      	movne	r6, r0
    d896:	7026      	strb	r6, [r4, #0]
    d898:	b002      	add	sp, #8
    d89a:	bd70      	pop	{r4, r5, r6, pc}
    d89c:	2301      	movs	r3, #1
    d89e:	7003      	strb	r3, [r0, #0]
    d8a0:	2007      	movs	r0, #7
    d8a2:	b002      	add	sp, #8
    d8a4:	bd70      	pop	{r4, r5, r6, pc}
    d8a6:	4630      	mov	r0, r6
    d8a8:	7026      	strb	r6, [r4, #0]
    d8aa:	b002      	add	sp, #8
    d8ac:	bd70      	pop	{r4, r5, r6, pc}
    d8ae:	bf00      	nop
    d8b0:	10000a68 	.word	0x10000a68
    d8b4:	40004034 	.word	0x40004034

0000d8b8 <am_hal_burst_mode_disable>:
    d8b8:	b530      	push	{r4, r5, lr}
    d8ba:	b085      	sub	sp, #20
    d8bc:	4605      	mov	r5, r0
    d8be:	f000 fb3d 	bl	df3c <am_hal_interrupt_master_disable>
    d8c2:	2100      	movs	r1, #0
    d8c4:	4603      	mov	r3, r0
    d8c6:	4810      	ldr	r0, [pc, #64]	; (d908 <am_hal_burst_mode_disable+0x50>)
    d8c8:	9303      	str	r3, [sp, #12]
    d8ca:	f000 f985 	bl	dbd8 <am_hal_flash_store_ui32>
    d8ce:	9803      	ldr	r0, [sp, #12]
    d8d0:	f000 fb38 	bl	df44 <am_hal_interrupt_master_set>
    d8d4:	4b0d      	ldr	r3, [pc, #52]	; (d90c <am_hal_burst_mode_disable+0x54>)
    d8d6:	490c      	ldr	r1, [pc, #48]	; (d908 <am_hal_burst_mode_disable+0x50>)
    d8d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d8da:	2401      	movs	r4, #1
    d8dc:	f36f 72df 	bfc	r2, #31, #1
    d8e0:	629a      	str	r2, [r3, #40]	; 0x28
    d8e2:	f242 7010 	movw	r0, #10000	; 0x2710
    d8e6:	2300      	movs	r3, #0
    d8e8:	9400      	str	r4, [sp, #0]
    d8ea:	2204      	movs	r2, #4
    d8ec:	f000 f93a 	bl	db64 <am_hal_flash_delay_status_check>
    d8f0:	b930      	cbnz	r0, d900 <am_hal_burst_mode_disable+0x48>
    d8f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d8f8:	f013 0f04 	tst.w	r3, #4
    d8fc:	bf18      	it	ne
    d8fe:	4604      	movne	r4, r0
    d900:	702c      	strb	r4, [r5, #0]
    d902:	b005      	add	sp, #20
    d904:	bd30      	pop	{r4, r5, pc}
    d906:	bf00      	nop
    d908:	40004034 	.word	0x40004034
    d90c:	40021000 	.word	0x40021000

0000d910 <am_hal_cachectrl_config>:
    d910:	b530      	push	{r4, r5, lr}
    d912:	b083      	sub	sp, #12
    d914:	4604      	mov	r4, r0
    d916:	f000 fb11 	bl	df3c <am_hal_interrupt_master_disable>
    d91a:	4d0e      	ldr	r5, [pc, #56]	; (d954 <am_hal_cachectrl_config+0x44>)
    d91c:	9001      	str	r0, [sp, #4]
    d91e:	682b      	ldr	r3, [r5, #0]
    d920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d924:	602b      	str	r3, [r5, #0]
    d926:	9801      	ldr	r0, [sp, #4]
    d928:	f000 fb0c 	bl	df44 <am_hal_interrupt_master_set>
    d92c:	7863      	ldrb	r3, [r4, #1]
    d92e:	7822      	ldrb	r2, [r4, #0]
    d930:	78a1      	ldrb	r1, [r4, #2]
    d932:	021b      	lsls	r3, r3, #8
    d934:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d938:	0112      	lsls	r2, r2, #4
    d93a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d93e:	b2d2      	uxtb	r2, r2
    d940:	4313      	orrs	r3, r2
    d942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d94a:	2000      	movs	r0, #0
    d94c:	602b      	str	r3, [r5, #0]
    d94e:	b003      	add	sp, #12
    d950:	bd30      	pop	{r4, r5, pc}
    d952:	bf00      	nop
    d954:	40018000 	.word	0x40018000

0000d958 <am_hal_cachectrl_enable>:
    d958:	4a03      	ldr	r2, [pc, #12]	; (d968 <am_hal_cachectrl_enable+0x10>)
    d95a:	6813      	ldr	r3, [r2, #0]
    d95c:	f043 0301 	orr.w	r3, r3, #1
    d960:	6013      	str	r3, [r2, #0]
    d962:	2000      	movs	r0, #0
    d964:	4770      	bx	lr
    d966:	bf00      	nop
    d968:	40018000 	.word	0x40018000

0000d96c <am_hal_clkgen_control>:
    d96c:	4b49      	ldr	r3, [pc, #292]	; (da94 <am_hal_clkgen_control+0x128>)
    d96e:	681a      	ldr	r2, [r3, #0]
    d970:	b912      	cbnz	r2, d978 <am_hal_clkgen_control+0xc>
    d972:	4a49      	ldr	r2, [pc, #292]	; (da98 <am_hal_clkgen_control+0x12c>)
    d974:	6812      	ldr	r2, [r2, #0]
    d976:	601a      	str	r2, [r3, #0]
    d978:	2809      	cmp	r0, #9
    d97a:	f200 8089 	bhi.w	da90 <am_hal_clkgen_control+0x124>
    d97e:	e8df f000 	tbb	[pc, r0]
    d982:	160d      	.short	0x160d
    d984:	423a261e 	.word	0x423a261e
    d988:	055c544c 	.word	0x055c544c
    d98c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d990:	2000      	movs	r0, #0
    d992:	6a1a      	ldr	r2, [r3, #32]
    d994:	f36f 0200 	bfc	r2, #0, #1
    d998:	621a      	str	r2, [r3, #32]
    d99a:	4770      	bx	lr
    d99c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9a0:	2200      	movs	r2, #0
    d9a2:	2147      	movs	r1, #71	; 0x47
    d9a4:	6159      	str	r1, [r3, #20]
    d9a6:	4610      	mov	r0, r2
    d9a8:	619a      	str	r2, [r3, #24]
    d9aa:	615a      	str	r2, [r3, #20]
    d9ac:	4770      	bx	lr
    d9ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9b2:	2000      	movs	r0, #0
    d9b4:	899a      	ldrh	r2, [r3, #12]
    d9b6:	f36f 0200 	bfc	r2, #0, #1
    d9ba:	819a      	strh	r2, [r3, #12]
    d9bc:	4770      	bx	lr
    d9be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9c2:	2000      	movs	r0, #0
    d9c4:	899a      	ldrh	r2, [r3, #12]
    d9c6:	f36f 0241 	bfc	r2, #1, #1
    d9ca:	819a      	strh	r2, [r3, #12]
    d9cc:	4770      	bx	lr
    d9ce:	4a33      	ldr	r2, [pc, #204]	; (da9c <am_hal_clkgen_control+0x130>)
    d9d0:	68d3      	ldr	r3, [r2, #12]
    d9d2:	b2db      	uxtb	r3, r3
    d9d4:	2b21      	cmp	r3, #33	; 0x21
    d9d6:	d106      	bne.n	d9e6 <am_hal_clkgen_control+0x7a>
    d9d8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d9dc:	2101      	movs	r1, #1
    d9de:	f361 2309 	bfi	r3, r1, #8, #2
    d9e2:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d9e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9ea:	2000      	movs	r0, #0
    d9ec:	8993      	ldrh	r3, [r2, #12]
    d9ee:	f043 0301 	orr.w	r3, r3, #1
    d9f2:	8193      	strh	r3, [r2, #12]
    d9f4:	4770      	bx	lr
    d9f6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9fa:	2000      	movs	r0, #0
    d9fc:	8993      	ldrh	r3, [r2, #12]
    d9fe:	f043 0302 	orr.w	r3, r3, #2
    da02:	8193      	strh	r3, [r2, #12]
    da04:	4770      	bx	lr
    da06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da0a:	2200      	movs	r2, #0
    da0c:	2047      	movs	r0, #71	; 0x47
    da0e:	2101      	movs	r1, #1
    da10:	6158      	str	r0, [r3, #20]
    da12:	6199      	str	r1, [r3, #24]
    da14:	4610      	mov	r0, r2
    da16:	615a      	str	r2, [r3, #20]
    da18:	4770      	bx	lr
    da1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da1e:	2000      	movs	r0, #0
    da20:	899a      	ldrh	r2, [r3, #12]
    da22:	f36f 12c7 	bfc	r2, #7, #1
    da26:	819a      	strh	r2, [r3, #12]
    da28:	4770      	bx	lr
    da2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da2e:	2000      	movs	r0, #0
    da30:	8993      	ldrh	r3, [r2, #12]
    da32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da36:	8193      	strh	r3, [r2, #12]
    da38:	4770      	bx	lr
    da3a:	4a18      	ldr	r2, [pc, #96]	; (da9c <am_hal_clkgen_control+0x130>)
    da3c:	68d3      	ldr	r3, [r2, #12]
    da3e:	b2db      	uxtb	r3, r3
    da40:	2b21      	cmp	r3, #33	; 0x21
    da42:	d00a      	beq.n	da5a <am_hal_clkgen_control+0xee>
    da44:	b139      	cbz	r1, da56 <am_hal_clkgen_control+0xea>
    da46:	680b      	ldr	r3, [r1, #0]
    da48:	f043 0301 	orr.w	r3, r3, #1
    da4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da50:	2000      	movs	r0, #0
    da52:	6213      	str	r3, [r2, #32]
    da54:	4770      	bx	lr
    da56:	4b12      	ldr	r3, [pc, #72]	; (daa0 <am_hal_clkgen_control+0x134>)
    da58:	e7f8      	b.n	da4c <am_hal_clkgen_control+0xe0>
    da5a:	b500      	push	{lr}
    da5c:	b083      	sub	sp, #12
    da5e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    da62:	9101      	str	r1, [sp, #4]
    da64:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    da6c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da70:	f000 f868 	bl	db44 <am_hal_flash_delay>
    da74:	9901      	ldr	r1, [sp, #4]
    da76:	b149      	cbz	r1, da8c <am_hal_clkgen_control+0x120>
    da78:	680b      	ldr	r3, [r1, #0]
    da7a:	f043 0301 	orr.w	r3, r3, #1
    da7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da82:	2000      	movs	r0, #0
    da84:	6213      	str	r3, [r2, #32]
    da86:	b003      	add	sp, #12
    da88:	f85d fb04 	ldr.w	pc, [sp], #4
    da8c:	4b04      	ldr	r3, [pc, #16]	; (daa0 <am_hal_clkgen_control+0x134>)
    da8e:	e7f6      	b.n	da7e <am_hal_clkgen_control+0x112>
    da90:	2006      	movs	r0, #6
    da92:	4770      	bx	lr
    da94:	10000a6c 	.word	0x10000a6c
    da98:	4ffff000 	.word	0x4ffff000
    da9c:	40020000 	.word	0x40020000
    daa0:	0025b801 	.word	0x0025b801

0000daa4 <am_hal_clkgen_status_get>:
    daa4:	b1a8      	cbz	r0, dad2 <am_hal_clkgen_status_get+0x2e>
    daa6:	b410      	push	{r4}
    daa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daac:	490a      	ldr	r1, [pc, #40]	; (dad8 <am_hal_clkgen_status_get+0x34>)
    daae:	6994      	ldr	r4, [r2, #24]
    dab0:	4b0a      	ldr	r3, [pc, #40]	; (dadc <am_hal_clkgen_status_get+0x38>)
    dab2:	f014 0f01 	tst.w	r4, #1
    dab6:	bf08      	it	eq
    dab8:	460b      	moveq	r3, r1
    daba:	6003      	str	r3, [r0, #0]
    dabc:	69d3      	ldr	r3, [r2, #28]
    dabe:	f85d 4b04 	ldr.w	r4, [sp], #4
    dac2:	f003 0201 	and.w	r2, r3, #1
    dac6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    daca:	6042      	str	r2, [r0, #4]
    dacc:	7203      	strb	r3, [r0, #8]
    dace:	2000      	movs	r0, #0
    dad0:	4770      	bx	lr
    dad2:	2006      	movs	r0, #6
    dad4:	4770      	bx	lr
    dad6:	bf00      	nop
    dad8:	02dc6c00 	.word	0x02dc6c00
    dadc:	016e3600 	.word	0x016e3600

0000dae0 <am_hal_flash_page_erase>:
    dae0:	4b00      	ldr	r3, [pc, #0]	; (dae4 <am_hal_flash_page_erase+0x4>)
    dae2:	4718      	bx	r3
    dae4:	08000051 	.word	0x08000051

0000dae8 <am_hal_flash_program_main>:
    dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daec:	4e12      	ldr	r6, [pc, #72]	; (db38 <am_hal_flash_program_main+0x50>)
    daee:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    daf2:	42b5      	cmp	r5, r6
    daf4:	b082      	sub	sp, #8
    daf6:	d004      	beq.n	db02 <am_hal_flash_program_main+0x1a>
    daf8:	4c10      	ldr	r4, [pc, #64]	; (db3c <am_hal_flash_program_main+0x54>)
    dafa:	47a0      	blx	r4
    dafc:	b002      	add	sp, #8
    dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db02:	2b01      	cmp	r3, #1
    db04:	461c      	mov	r4, r3
    db06:	4680      	mov	r8, r0
    db08:	4617      	mov	r7, r2
    db0a:	d904      	bls.n	db16 <am_hal_flash_program_main+0x2e>
    db0c:	4d0b      	ldr	r5, [pc, #44]	; (db3c <am_hal_flash_program_main+0x54>)
    db0e:	3b01      	subs	r3, #1
    db10:	47a8      	blx	r5
    db12:	2800      	cmp	r0, #0
    db14:	d1f2      	bne.n	dafc <am_hal_flash_program_main+0x14>
    db16:	4b0a      	ldr	r3, [pc, #40]	; (db40 <am_hal_flash_program_main+0x58>)
    db18:	4d08      	ldr	r5, [pc, #32]	; (db3c <am_hal_flash_program_main+0x54>)
    db1a:	681b      	ldr	r3, [r3, #0]
    db1c:	9301      	str	r3, [sp, #4]
    db1e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    db22:	3a01      	subs	r2, #1
    db24:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    db28:	4640      	mov	r0, r8
    db2a:	2301      	movs	r3, #1
    db2c:	a901      	add	r1, sp, #4
    db2e:	47a8      	blx	r5
    db30:	b002      	add	sp, #8
    db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db36:	bf00      	nop
    db38:	10060000 	.word	0x10060000
    db3c:	08000055 	.word	0x08000055
    db40:	1005fffc 	.word	0x1005fffc

0000db44 <am_hal_flash_delay>:
    db44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    db4a:	075b      	lsls	r3, r3, #29
    db4c:	bf46      	itte	mi
    db4e:	0040      	lslmi	r0, r0, #1
    db50:	230e      	movmi	r3, #14
    db52:	230b      	movpl	r3, #11
    db54:	4298      	cmp	r0, r3
    db56:	d902      	bls.n	db5e <am_hal_flash_delay+0x1a>
    db58:	1ac0      	subs	r0, r0, r3
    db5a:	4b01      	ldr	r3, [pc, #4]	; (db60 <am_hal_flash_delay+0x1c>)
    db5c:	4718      	bx	r3
    db5e:	4770      	bx	lr
    db60:	0800009d 	.word	0x0800009d

0000db64 <am_hal_flash_delay_status_check>:
    db64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db68:	f89d c020 	ldrb.w	ip, [sp, #32]
    db6c:	4604      	mov	r4, r0
    db6e:	460d      	mov	r5, r1
    db70:	4616      	mov	r6, r2
    db72:	461f      	mov	r7, r3
    db74:	f1bc 0f00 	cmp.w	ip, #0
    db78:	d015      	beq.n	dba6 <am_hal_flash_delay_status_check+0x42>
    db7a:	f8df 8058 	ldr.w	r8, [pc, #88]	; dbd4 <am_hal_flash_delay_status_check+0x70>
    db7e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    db82:	e009      	b.n	db98 <am_hal_flash_delay_status_check+0x34>
    db84:	b31c      	cbz	r4, dbce <am_hal_flash_delay_status_check+0x6a>
    db86:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    db8a:	f013 0f04 	tst.w	r3, #4
    db8e:	bf0c      	ite	eq
    db90:	2005      	moveq	r0, #5
    db92:	2012      	movne	r0, #18
    db94:	3c01      	subs	r4, #1
    db96:	47c0      	blx	r8
    db98:	6828      	ldr	r0, [r5, #0]
    db9a:	4030      	ands	r0, r6
    db9c:	42b8      	cmp	r0, r7
    db9e:	d1f1      	bne.n	db84 <am_hal_flash_delay_status_check+0x20>
    dba0:	2000      	movs	r0, #0
    dba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dba6:	f8df 902c 	ldr.w	r9, [pc, #44]	; dbd4 <am_hal_flash_delay_status_check+0x70>
    dbaa:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
    dbae:	e009      	b.n	dbc4 <am_hal_flash_delay_status_check+0x60>
    dbb0:	b16c      	cbz	r4, dbce <am_hal_flash_delay_status_check+0x6a>
    dbb2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    dbb6:	f013 0f04 	tst.w	r3, #4
    dbba:	bf0c      	ite	eq
    dbbc:	2005      	moveq	r0, #5
    dbbe:	2012      	movne	r0, #18
    dbc0:	3c01      	subs	r4, #1
    dbc2:	47c8      	blx	r9
    dbc4:	6828      	ldr	r0, [r5, #0]
    dbc6:	4030      	ands	r0, r6
    dbc8:	42b8      	cmp	r0, r7
    dbca:	d0f1      	beq.n	dbb0 <am_hal_flash_delay_status_check+0x4c>
    dbcc:	e7e8      	b.n	dba0 <am_hal_flash_delay_status_check+0x3c>
    dbce:	2004      	movs	r0, #4
    dbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbd4:	0800009d 	.word	0x0800009d

0000dbd8 <am_hal_flash_store_ui32>:
    dbd8:	4b01      	ldr	r3, [pc, #4]	; (dbe0 <am_hal_flash_store_ui32+0x8>)
    dbda:	f043 0301 	orr.w	r3, r3, #1
    dbde:	4718      	bx	r3
    dbe0:	10000200 	.word	0x10000200

0000dbe4 <am_hal_gpio_pinconfig>:
    dbe4:	2831      	cmp	r0, #49	; 0x31
    dbe6:	f200 80bc 	bhi.w	dd62 <am_hal_gpio_pinconfig+0x17e>
    dbea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbee:	4604      	mov	r4, r0
    dbf0:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dbf4:	f001 0007 	and.w	r0, r1, #7
    dbf8:	b085      	sub	sp, #20
    dbfa:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dbfe:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dc02:	d00f      	beq.n	dc24 <am_hal_gpio_pinconfig+0x40>
    dc04:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dc08:	1db5      	adds	r5, r6, #6
    dc0a:	f005 0507 	and.w	r5, r5, #7
    dc0e:	2d03      	cmp	r5, #3
    dc10:	f042 0201 	orr.w	r2, r2, #1
    dc14:	f240 80a7 	bls.w	dd66 <am_hal_gpio_pinconfig+0x182>
    dc18:	2fc0      	cmp	r7, #192	; 0xc0
    dc1a:	f000 80eb 	beq.w	ddf4 <am_hal_gpio_pinconfig+0x210>
    dc1e:	2f20      	cmp	r7, #32
    dc20:	f000 80ed 	beq.w	ddfe <am_hal_gpio_pinconfig+0x21a>
    dc24:	b163      	cbz	r3, dc40 <am_hal_gpio_pinconfig+0x5c>
    dc26:	2b01      	cmp	r3, #1
    dc28:	f000 80dd 	beq.w	dde6 <am_hal_gpio_pinconfig+0x202>
    dc2c:	2b02      	cmp	r3, #2
    dc2e:	f040 80c3 	bne.w	ddb8 <am_hal_gpio_pinconfig+0x1d4>
    dc32:	4b7e      	ldr	r3, [pc, #504]	; (de2c <am_hal_gpio_pinconfig+0x248>)
    dc34:	5d1b      	ldrb	r3, [r3, r4]
    dc36:	075b      	lsls	r3, r3, #29
    dc38:	f140 80be 	bpl.w	ddb8 <am_hal_gpio_pinconfig+0x1d4>
    dc3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc40:	4b7b      	ldr	r3, [pc, #492]	; (de30 <am_hal_gpio_pinconfig+0x24c>)
    dc42:	4d7c      	ldr	r5, [pc, #496]	; (de34 <am_hal_gpio_pinconfig+0x250>)
    dc44:	5d1b      	ldrb	r3, [r3, r4]
    dc46:	5d2d      	ldrb	r5, [r5, r4]
    dc48:	4103      	asrs	r3, r0
    dc4a:	005b      	lsls	r3, r3, #1
    dc4c:	f003 0302 	and.w	r3, r3, #2
    dc50:	4285      	cmp	r5, r0
    dc52:	ea43 0302 	orr.w	r3, r3, r2
    dc56:	f000 8091 	beq.w	dd7c <am_hal_gpio_pinconfig+0x198>
    dc5a:	f3c1 2607 	ubfx	r6, r1, #8, #8
    dc5e:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dc62:	f3c1 3080 	ubfx	r0, r1, #14, #1
    dc66:	0a8a      	lsrs	r2, r1, #10
    dc68:	f006 070c 	and.w	r7, r6, #12
    dc6c:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    dc70:	f002 0208 	and.w	r2, r2, #8
    dc74:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dc78:	2f04      	cmp	r7, #4
    dc7a:	ea42 0200 	orr.w	r2, r2, r0
    dc7e:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    dc82:	4628      	mov	r0, r5
    dc84:	f000 80ac 	beq.w	dde0 <am_hal_gpio_pinconfig+0x1fc>
    dc88:	486b      	ldr	r0, [pc, #428]	; (de38 <am_hal_gpio_pinconfig+0x254>)
    dc8a:	6800      	ldr	r0, [r0, #0]
    dc8c:	eba1 0800 	sub.w	r8, r1, r0
    dc90:	fab8 f888 	clz	r8, r8
    dc94:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dc98:	f016 0f60 	tst.w	r6, #96	; 0x60
    dc9c:	bf04      	itt	eq
    dc9e:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dca2:	f360 0200 	bfieq	r2, r0, #0, #1
    dca6:	00a6      	lsls	r6, r4, #2
    dca8:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dcac:	2902      	cmp	r1, #2
    dcae:	ea4f 05c4 	mov.w	r5, r4, lsl #3
    dcb2:	f000 808e 	beq.w	ddd2 <am_hal_gpio_pinconfig+0x1ee>
    dcb6:	2903      	cmp	r1, #3
    dcb8:	f000 8082 	beq.w	ddc0 <am_hal_gpio_pinconfig+0x1dc>
    dcbc:	2901      	cmp	r1, #1
    dcbe:	bf08      	it	eq
    dcc0:	f043 0304 	orreq.w	r3, r3, #4
    dcc4:	f005 0518 	and.w	r5, r5, #24
    dcc8:	f04f 0900 	mov.w	r9, #0
    dccc:	f006 061c 	and.w	r6, r6, #28
    dcd0:	210f      	movs	r1, #15
    dcd2:	40b1      	lsls	r1, r6
    dcd4:	27ff      	movs	r7, #255	; 0xff
    dcd6:	fa02 f606 	lsl.w	r6, r2, r6
    dcda:	43ca      	mvns	r2, r1
    dcdc:	40af      	lsls	r7, r5
    dcde:	9201      	str	r2, [sp, #4]
    dce0:	fa03 f505 	lsl.w	r5, r3, r5
    dce4:	f000 f92a 	bl	df3c <am_hal_interrupt_master_disable>
    dce8:	f024 0b03 	bic.w	fp, r4, #3
    dcec:	ea4f 0a54 	mov.w	sl, r4, lsr #1
    dcf0:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
    dcf4:	4b51      	ldr	r3, [pc, #324]	; (de3c <am_hal_gpio_pinconfig+0x258>)
    dcf6:	4952      	ldr	r1, [pc, #328]	; (de40 <am_hal_gpio_pinconfig+0x25c>)
    dcf8:	9a01      	ldr	r2, [sp, #4]
    dcfa:	9003      	str	r0, [sp, #12]
    dcfc:	43ff      	mvns	r7, r7
    dcfe:	f02a 0a03 	bic.w	sl, sl, #3
    dd02:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dd06:	f1b8 0f00 	cmp.w	r8, #0
    dd0a:	d00b      	beq.n	dd24 <am_hal_gpio_pinconfig+0x140>
    dd0c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dd10:	f004 081f 	and.w	r8, r4, #31
    dd14:	484b      	ldr	r0, [pc, #300]	; (de44 <am_hal_gpio_pinconfig+0x260>)
    dd16:	f00e 0e04 	and.w	lr, lr, #4
    dd1a:	2401      	movs	r4, #1
    dd1c:	fa04 f408 	lsl.w	r4, r4, r8
    dd20:	f84e 4000 	str.w	r4, [lr, r0]
    dd24:	4848      	ldr	r0, [pc, #288]	; (de48 <am_hal_gpio_pinconfig+0x264>)
    dd26:	2473      	movs	r4, #115	; 0x73
    dd28:	6604      	str	r4, [r0, #96]	; 0x60
    dd2a:	f8dc 4000 	ldr.w	r4, [ip]
    dd2e:	403c      	ands	r4, r7
    dd30:	4325      	orrs	r5, r4
    dd32:	f8cc 5000 	str.w	r5, [ip]
    dd36:	f85a 4003 	ldr.w	r4, [sl, r3]
    dd3a:	4022      	ands	r2, r4
    dd3c:	4332      	orrs	r2, r6
    dd3e:	f84a 2003 	str.w	r2, [sl, r3]
    dd42:	f85b 3001 	ldr.w	r3, [fp, r1]
    dd46:	401f      	ands	r7, r3
    dd48:	2400      	movs	r4, #0
    dd4a:	ea47 0709 	orr.w	r7, r7, r9
    dd4e:	f84b 7001 	str.w	r7, [fp, r1]
    dd52:	6604      	str	r4, [r0, #96]	; 0x60
    dd54:	9803      	ldr	r0, [sp, #12]
    dd56:	f000 f8f5 	bl	df44 <am_hal_interrupt_master_set>
    dd5a:	4620      	mov	r0, r4
    dd5c:	b005      	add	sp, #20
    dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd62:	2006      	movs	r0, #6
    dd64:	4770      	bx	lr
    dd66:	4d31      	ldr	r5, [pc, #196]	; (de2c <am_hal_gpio_pinconfig+0x248>)
    dd68:	5d2d      	ldrb	r5, [r5, r4]
    dd6a:	3e02      	subs	r6, #2
    dd6c:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dd70:	07ee      	lsls	r6, r5, #31
    dd72:	d547      	bpl.n	de04 <am_hal_gpio_pinconfig+0x220>
    dd74:	2b00      	cmp	r3, #0
    dd76:	f43f af63 	beq.w	dc40 <am_hal_gpio_pinconfig+0x5c>
    dd7a:	e754      	b.n	dc26 <am_hal_gpio_pinconfig+0x42>
    dd7c:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dd80:	2a07      	cmp	r2, #7
    dd82:	d041      	beq.n	de08 <am_hal_gpio_pinconfig+0x224>
    dd84:	4d31      	ldr	r5, [pc, #196]	; (de4c <am_hal_gpio_pinconfig+0x268>)
    dd86:	4610      	mov	r0, r2
    dd88:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    dd8c:	f3c1 42c1 	ubfx	r2, r1, #19, #2
    dd90:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
    dd94:	4286      	cmp	r6, r0
    dd96:	d039      	beq.n	de0c <am_hal_gpio_pinconfig+0x228>
    dd98:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dd9c:	00a6      	lsls	r6, r4, #2
    dd9e:	786a      	ldrb	r2, [r5, #1]
    dda0:	4282      	cmp	r2, r0
    dda2:	d03d      	beq.n	de20 <am_hal_gpio_pinconfig+0x23c>
    dda4:	78aa      	ldrb	r2, [r5, #2]
    dda6:	4282      	cmp	r2, r0
    dda8:	d03c      	beq.n	de24 <am_hal_gpio_pinconfig+0x240>
    ddaa:	78ea      	ldrb	r2, [r5, #3]
    ddac:	4282      	cmp	r2, r0
    ddae:	d03b      	beq.n	de28 <am_hal_gpio_pinconfig+0x244>
    ddb0:	4827      	ldr	r0, [pc, #156]	; (de50 <am_hal_gpio_pinconfig+0x26c>)
    ddb2:	b005      	add	sp, #20
    ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddb8:	4826      	ldr	r0, [pc, #152]	; (de54 <am_hal_gpio_pinconfig+0x270>)
    ddba:	b005      	add	sp, #20
    ddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddc0:	f005 0518 	and.w	r5, r5, #24
    ddc4:	f04f 0901 	mov.w	r9, #1
    ddc8:	f043 0304 	orr.w	r3, r3, #4
    ddcc:	fa09 f905 	lsl.w	r9, r9, r5
    ddd0:	e77c      	b.n	dccc <am_hal_gpio_pinconfig+0xe8>
    ddd2:	f005 0518 	and.w	r5, r5, #24
    ddd6:	f04f 0901 	mov.w	r9, #1
    ddda:	fa09 f905 	lsl.w	r9, r9, r5
    ddde:	e775      	b.n	dccc <am_hal_gpio_pinconfig+0xe8>
    dde0:	f04f 0801 	mov.w	r8, #1
    dde4:	e758      	b.n	dc98 <am_hal_gpio_pinconfig+0xb4>
    dde6:	4b11      	ldr	r3, [pc, #68]	; (de2c <am_hal_gpio_pinconfig+0x248>)
    dde8:	5d1b      	ldrb	r3, [r3, r4]
    ddea:	079d      	lsls	r5, r3, #30
    ddec:	d5e4      	bpl.n	ddb8 <am_hal_gpio_pinconfig+0x1d4>
    ddee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ddf2:	e725      	b.n	dc40 <am_hal_gpio_pinconfig+0x5c>
    ddf4:	2c14      	cmp	r4, #20
    ddf6:	f43f af15 	beq.w	dc24 <am_hal_gpio_pinconfig+0x40>
    ddfa:	4817      	ldr	r0, [pc, #92]	; (de58 <am_hal_gpio_pinconfig+0x274>)
    ddfc:	e7ae      	b.n	dd5c <am_hal_gpio_pinconfig+0x178>
    ddfe:	2c14      	cmp	r4, #20
    de00:	f47f af10 	bne.w	dc24 <am_hal_gpio_pinconfig+0x40>
    de04:	4815      	ldr	r0, [pc, #84]	; (de5c <am_hal_gpio_pinconfig+0x278>)
    de06:	e7a9      	b.n	dd5c <am_hal_gpio_pinconfig+0x178>
    de08:	4815      	ldr	r0, [pc, #84]	; (de60 <am_hal_gpio_pinconfig+0x27c>)
    de0a:	e7a7      	b.n	dd5c <am_hal_gpio_pinconfig+0x178>
    de0c:	2200      	movs	r2, #0
    de0e:	00a6      	lsls	r6, r4, #2
    de10:	0052      	lsls	r2, r2, #1
    de12:	f3c1 5040 	ubfx	r0, r1, #21, #1
    de16:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
    de1a:	f04f 0800 	mov.w	r8, #0
    de1e:	e743      	b.n	dca8 <am_hal_gpio_pinconfig+0xc4>
    de20:	2201      	movs	r2, #1
    de22:	e7f5      	b.n	de10 <am_hal_gpio_pinconfig+0x22c>
    de24:	2202      	movs	r2, #2
    de26:	e7f3      	b.n	de10 <am_hal_gpio_pinconfig+0x22c>
    de28:	2203      	movs	r2, #3
    de2a:	e7f1      	b.n	de10 <am_hal_gpio_pinconfig+0x22c>
    de2c:	0000ee6c 	.word	0x0000ee6c
    de30:	0000eea0 	.word	0x0000eea0
    de34:	0000ef9c 	.word	0x0000ef9c
    de38:	0000ee64 	.word	0x0000ee64
    de3c:	40010040 	.word	0x40010040
    de40:	400100e0 	.word	0x400100e0
    de44:	400100b4 	.word	0x400100b4
    de48:	40010000 	.word	0x40010000
    de4c:	0000eed4 	.word	0x0000eed4
    de50:	08000104 	.word	0x08000104
    de54:	08000102 	.word	0x08000102
    de58:	08000101 	.word	0x08000101
    de5c:	08000100 	.word	0x08000100
    de60:	08000103 	.word	0x08000103

0000de64 <am_hal_gpio_interrupt_enable>:
    de64:	b570      	push	{r4, r5, r6, lr}
    de66:	0c8b      	lsrs	r3, r1, #18
    de68:	2500      	movs	r5, #0
    de6a:	462a      	mov	r2, r5
    de6c:	049b      	lsls	r3, r3, #18
    de6e:	4313      	orrs	r3, r2
    de70:	b082      	sub	sp, #8
    de72:	d115      	bne.n	dea0 <am_hal_gpio_interrupt_enable+0x3c>
    de74:	460c      	mov	r4, r1
    de76:	4606      	mov	r6, r0
    de78:	f000 f860 	bl	df3c <am_hal_interrupt_master_disable>
    de7c:	4b0a      	ldr	r3, [pc, #40]	; (dea8 <am_hal_gpio_interrupt_enable+0x44>)
    de7e:	9001      	str	r0, [sp, #4]
    de80:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    de84:	4330      	orrs	r0, r6
    de86:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    de8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    de8e:	430c      	orrs	r4, r1
    de90:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    de94:	9801      	ldr	r0, [sp, #4]
    de96:	f000 f855 	bl	df44 <am_hal_interrupt_master_set>
    de9a:	4628      	mov	r0, r5
    de9c:	b002      	add	sp, #8
    de9e:	bd70      	pop	{r4, r5, r6, pc}
    dea0:	2005      	movs	r0, #5
    dea2:	b002      	add	sp, #8
    dea4:	bd70      	pop	{r4, r5, r6, pc}
    dea6:	bf00      	nop
    dea8:	40010000 	.word	0x40010000

0000deac <am_hal_gpio_interrupt_disable>:
    deac:	b570      	push	{r4, r5, r6, lr}
    deae:	0c8b      	lsrs	r3, r1, #18
    deb0:	2500      	movs	r5, #0
    deb2:	462a      	mov	r2, r5
    deb4:	049b      	lsls	r3, r3, #18
    deb6:	4313      	orrs	r3, r2
    deb8:	b082      	sub	sp, #8
    deba:	d117      	bne.n	deec <am_hal_gpio_interrupt_disable+0x40>
    debc:	460c      	mov	r4, r1
    debe:	4606      	mov	r6, r0
    dec0:	f000 f83c 	bl	df3c <am_hal_interrupt_master_disable>
    dec4:	4b0b      	ldr	r3, [pc, #44]	; (def4 <am_hal_gpio_interrupt_disable+0x48>)
    dec6:	9001      	str	r0, [sp, #4]
    dec8:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    decc:	ea20 0006 	bic.w	r0, r0, r6
    ded0:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    ded4:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ded8:	ea21 0404 	bic.w	r4, r1, r4
    dedc:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    dee0:	9801      	ldr	r0, [sp, #4]
    dee2:	f000 f82f 	bl	df44 <am_hal_interrupt_master_set>
    dee6:	4628      	mov	r0, r5
    dee8:	b002      	add	sp, #8
    deea:	bd70      	pop	{r4, r5, r6, pc}
    deec:	2005      	movs	r0, #5
    deee:	b002      	add	sp, #8
    def0:	bd70      	pop	{r4, r5, r6, pc}
    def2:	bf00      	nop
    def4:	40010000 	.word	0x40010000

0000def8 <am_hal_gpio_interrupt_clear>:
    def8:	b570      	push	{r4, r5, r6, lr}
    defa:	0c8b      	lsrs	r3, r1, #18
    defc:	2500      	movs	r5, #0
    defe:	462a      	mov	r2, r5
    df00:	049b      	lsls	r3, r3, #18
    df02:	4313      	orrs	r3, r2
    df04:	b082      	sub	sp, #8
    df06:	d10f      	bne.n	df28 <am_hal_gpio_interrupt_clear+0x30>
    df08:	460c      	mov	r4, r1
    df0a:	4606      	mov	r6, r0
    df0c:	f000 f816 	bl	df3c <am_hal_interrupt_master_disable>
    df10:	4b07      	ldr	r3, [pc, #28]	; (df30 <am_hal_gpio_interrupt_clear+0x38>)
    df12:	9001      	str	r0, [sp, #4]
    df14:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    df18:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
    df1c:	9801      	ldr	r0, [sp, #4]
    df1e:	f000 f811 	bl	df44 <am_hal_interrupt_master_set>
    df22:	4628      	mov	r0, r5
    df24:	b002      	add	sp, #8
    df26:	bd70      	pop	{r4, r5, r6, pc}
    df28:	2005      	movs	r0, #5
    df2a:	b002      	add	sp, #8
    df2c:	bd70      	pop	{r4, r5, r6, pc}
    df2e:	bf00      	nop
    df30:	40010000 	.word	0x40010000

0000df34 <am_hal_interrupt_master_enable>:
    df34:	f3ef 8010 	mrs	r0, PRIMASK
    df38:	b662      	cpsie	i
    df3a:	4770      	bx	lr

0000df3c <am_hal_interrupt_master_disable>:
    df3c:	f3ef 8010 	mrs	r0, PRIMASK
    df40:	b672      	cpsid	i
    df42:	4770      	bx	lr

0000df44 <am_hal_interrupt_master_set>:
    df44:	f380 8810 	msr	PRIMASK, r0
    df48:	4770      	bx	lr
    df4a:	bf00      	nop

0000df4c <am_hal_pwrctrl_periph_enable>:
    df4c:	b570      	push	{r4, r5, r6, lr}
    df4e:	b082      	sub	sp, #8
    df50:	4604      	mov	r4, r0
    df52:	f7ff fff3 	bl	df3c <am_hal_interrupt_master_disable>
    df56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    df5a:	4e0f      	ldr	r6, [pc, #60]	; (df98 <am_hal_pwrctrl_periph_enable+0x4c>)
    df5c:	4d0f      	ldr	r5, [pc, #60]	; (df9c <am_hal_pwrctrl_periph_enable+0x50>)
    df5e:	9001      	str	r0, [sp, #4]
    df60:	00a4      	lsls	r4, r4, #2
    df62:	68b3      	ldr	r3, [r6, #8]
    df64:	592a      	ldr	r2, [r5, r4]
    df66:	4313      	orrs	r3, r2
    df68:	60b3      	str	r3, [r6, #8]
    df6a:	9801      	ldr	r0, [sp, #4]
    df6c:	442c      	add	r4, r5
    df6e:	f7ff ffe9 	bl	df44 <am_hal_interrupt_master_set>
    df72:	20a0      	movs	r0, #160	; 0xa0
    df74:	f7ff fde6 	bl	db44 <am_hal_flash_delay>
    df78:	69b3      	ldr	r3, [r6, #24]
    df7a:	6864      	ldr	r4, [r4, #4]
    df7c:	4223      	tst	r3, r4
    df7e:	d103      	bne.n	df88 <am_hal_pwrctrl_periph_enable+0x3c>
    df80:	20a0      	movs	r0, #160	; 0xa0
    df82:	f7ff fddf 	bl	db44 <am_hal_flash_delay>
    df86:	69b3      	ldr	r3, [r6, #24]
    df88:	4b03      	ldr	r3, [pc, #12]	; (df98 <am_hal_pwrctrl_periph_enable+0x4c>)
    df8a:	699b      	ldr	r3, [r3, #24]
    df8c:	4223      	tst	r3, r4
    df8e:	bf0c      	ite	eq
    df90:	2001      	moveq	r0, #1
    df92:	2000      	movne	r0, #0
    df94:	b002      	add	sp, #8
    df96:	bd70      	pop	{r4, r5, r6, pc}
    df98:	40021000 	.word	0x40021000
    df9c:	0000efd0 	.word	0x0000efd0

0000dfa0 <am_hal_pwrctrl_periph_disable>:
    dfa0:	b570      	push	{r4, r5, r6, lr}
    dfa2:	b082      	sub	sp, #8
    dfa4:	4604      	mov	r4, r0
    dfa6:	f7ff ffc9 	bl	df3c <am_hal_interrupt_master_disable>
    dfaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dfae:	4e10      	ldr	r6, [pc, #64]	; (dff0 <am_hal_pwrctrl_periph_disable+0x50>)
    dfb0:	4d10      	ldr	r5, [pc, #64]	; (dff4 <am_hal_pwrctrl_periph_disable+0x54>)
    dfb2:	9001      	str	r0, [sp, #4]
    dfb4:	00a4      	lsls	r4, r4, #2
    dfb6:	68b3      	ldr	r3, [r6, #8]
    dfb8:	592a      	ldr	r2, [r5, r4]
    dfba:	ea23 0302 	bic.w	r3, r3, r2
    dfbe:	60b3      	str	r3, [r6, #8]
    dfc0:	9801      	ldr	r0, [sp, #4]
    dfc2:	442c      	add	r4, r5
    dfc4:	f7ff ffbe 	bl	df44 <am_hal_interrupt_master_set>
    dfc8:	20a0      	movs	r0, #160	; 0xa0
    dfca:	f7ff fdbb 	bl	db44 <am_hal_flash_delay>
    dfce:	69b3      	ldr	r3, [r6, #24]
    dfd0:	6864      	ldr	r4, [r4, #4]
    dfd2:	4223      	tst	r3, r4
    dfd4:	d003      	beq.n	dfde <am_hal_pwrctrl_periph_disable+0x3e>
    dfd6:	20a0      	movs	r0, #160	; 0xa0
    dfd8:	f7ff fdb4 	bl	db44 <am_hal_flash_delay>
    dfdc:	69b3      	ldr	r3, [r6, #24]
    dfde:	4b04      	ldr	r3, [pc, #16]	; (dff0 <am_hal_pwrctrl_periph_disable+0x50>)
    dfe0:	699b      	ldr	r3, [r3, #24]
    dfe2:	4223      	tst	r3, r4
    dfe4:	bf14      	ite	ne
    dfe6:	2001      	movne	r0, #1
    dfe8:	2000      	moveq	r0, #0
    dfea:	b002      	add	sp, #8
    dfec:	bd70      	pop	{r4, r5, r6, pc}
    dfee:	bf00      	nop
    dff0:	40021000 	.word	0x40021000
    dff4:	0000efd0 	.word	0x0000efd0

0000dff8 <am_hal_pwrctrl_blebuck_trim>:
    dff8:	b510      	push	{r4, lr}
    dffa:	4c12      	ldr	r4, [pc, #72]	; (e044 <am_hal_pwrctrl_blebuck_trim+0x4c>)
    dffc:	68e3      	ldr	r3, [r4, #12]
    dffe:	b2db      	uxtb	r3, r3
    e000:	2b11      	cmp	r3, #17
    e002:	b082      	sub	sp, #8
    e004:	d801      	bhi.n	e00a <am_hal_pwrctrl_blebuck_trim+0x12>
    e006:	b002      	add	sp, #8
    e008:	bd10      	pop	{r4, pc}
    e00a:	f7ff ff97 	bl	df3c <am_hal_interrupt_master_disable>
    e00e:	9001      	str	r0, [sp, #4]
    e010:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e014:	2219      	movs	r2, #25
    e016:	f362 138b 	bfi	r3, r2, #6, #6
    e01a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e01e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e022:	230c      	movs	r3, #12
    e024:	f363 0205 	bfi	r2, r3, #0, #6
    e028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e02c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e032:	f36f 5296 	bfc	r2, #22, #1
    e036:	63da      	str	r2, [r3, #60]	; 0x3c
    e038:	9801      	ldr	r0, [sp, #4]
    e03a:	b002      	add	sp, #8
    e03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e040:	f7ff bf80 	b.w	df44 <am_hal_interrupt_master_set>
    e044:	40020000 	.word	0x40020000

0000e048 <am_hal_reset_control>:
    e048:	2803      	cmp	r0, #3
    e04a:	d819      	bhi.n	e080 <am_hal_reset_control+0x38>
    e04c:	e8df f000 	tbb	[pc, r0]
    e050:	02140e08 	.word	0x02140e08
    e054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e058:	2201      	movs	r2, #1
    e05a:	615a      	str	r2, [r3, #20]
    e05c:	2000      	movs	r0, #0
    e05e:	4770      	bx	lr
    e060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e064:	22d4      	movs	r2, #212	; 0xd4
    e066:	609a      	str	r2, [r3, #8]
    e068:	2000      	movs	r0, #0
    e06a:	4770      	bx	lr
    e06c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e070:	221b      	movs	r2, #27
    e072:	605a      	str	r2, [r3, #4]
    e074:	2000      	movs	r0, #0
    e076:	4770      	bx	lr
    e078:	4b02      	ldr	r3, [pc, #8]	; (e084 <am_hal_reset_control+0x3c>)
    e07a:	2000      	movs	r0, #0
    e07c:	6018      	str	r0, [r3, #0]
    e07e:	4770      	bx	lr
    e080:	2006      	movs	r0, #6
    e082:	4770      	bx	lr
    e084:	4ffff000 	.word	0x4ffff000

0000e088 <am_hal_stimer_config>:
    e088:	4a03      	ldr	r2, [pc, #12]	; (e098 <am_hal_stimer_config+0x10>)
    e08a:	4603      	mov	r3, r0
    e08c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e090:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e094:	4770      	bx	lr
    e096:	bf00      	nop
    e098:	40008000 	.word	0x40008000

0000e09c <am_hal_stimer_counter_get>:
    e09c:	4b01      	ldr	r3, [pc, #4]	; (e0a4 <am_hal_stimer_counter_get+0x8>)
    e09e:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    e0a2:	4770      	bx	lr
    e0a4:	40008000 	.word	0x40008000

0000e0a8 <am_hal_stimer_int_enable>:
    e0a8:	4a03      	ldr	r2, [pc, #12]	; (e0b8 <am_hal_stimer_int_enable+0x10>)
    e0aa:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e0ae:	4318      	orrs	r0, r3
    e0b0:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e0b4:	4770      	bx	lr
    e0b6:	bf00      	nop
    e0b8:	40008000 	.word	0x40008000

0000e0bc <am_hal_stimer_int_disable>:
    e0bc:	4a03      	ldr	r2, [pc, #12]	; (e0cc <am_hal_stimer_int_disable+0x10>)
    e0be:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    e0c2:	ea23 0000 	bic.w	r0, r3, r0
    e0c6:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
    e0ca:	4770      	bx	lr
    e0cc:	40008000 	.word	0x40008000

0000e0d0 <am_hal_stimer_int_clear>:
    e0d0:	4b01      	ldr	r3, [pc, #4]	; (e0d8 <am_hal_stimer_int_clear+0x8>)
    e0d2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    e0d6:	4770      	bx	lr
    e0d8:	40008000 	.word	0x40008000

0000e0dc <am_hal_sysctrl_sleep>:
    e0dc:	b510      	push	{r4, lr}
    e0de:	b082      	sub	sp, #8
    e0e0:	4604      	mov	r4, r0
    e0e2:	f7ff ff2b 	bl	df3c <am_hal_interrupt_master_disable>
    e0e6:	9001      	str	r0, [sp, #4]
    e0e8:	b124      	cbz	r4, e0f4 <am_hal_sysctrl_sleep+0x18>
    e0ea:	4b12      	ldr	r3, [pc, #72]	; (e134 <am_hal_sysctrl_sleep+0x58>)
    e0ec:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e0f0:	07db      	lsls	r3, r3, #31
    e0f2:	d513      	bpl.n	e11c <am_hal_sysctrl_sleep+0x40>
    e0f4:	4a10      	ldr	r2, [pc, #64]	; (e138 <am_hal_sysctrl_sleep+0x5c>)
    e0f6:	6913      	ldr	r3, [r2, #16]
    e0f8:	f023 0304 	bic.w	r3, r3, #4
    e0fc:	6113      	str	r3, [r2, #16]
    e0fe:	f3bf 8f4f 	dsb	sy
    e102:	4a0e      	ldr	r2, [pc, #56]	; (e13c <am_hal_sysctrl_sleep+0x60>)
    e104:	4b0e      	ldr	r3, [pc, #56]	; (e140 <am_hal_sysctrl_sleep+0x64>)
    e106:	6812      	ldr	r2, [r2, #0]
    e108:	601a      	str	r2, [r3, #0]
    e10a:	bf30      	wfi
    e10c:	f3bf 8f6f 	isb	sy
    e110:	9801      	ldr	r0, [sp, #4]
    e112:	b002      	add	sp, #8
    e114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e118:	f7ff bf14 	b.w	df44 <am_hal_interrupt_master_set>
    e11c:	4b09      	ldr	r3, [pc, #36]	; (e144 <am_hal_sysctrl_sleep+0x68>)
    e11e:	681a      	ldr	r2, [r3, #0]
    e120:	b912      	cbnz	r2, e128 <am_hal_sysctrl_sleep+0x4c>
    e122:	4a09      	ldr	r2, [pc, #36]	; (e148 <am_hal_sysctrl_sleep+0x6c>)
    e124:	6812      	ldr	r2, [r2, #0]
    e126:	601a      	str	r2, [r3, #0]
    e128:	4a03      	ldr	r2, [pc, #12]	; (e138 <am_hal_sysctrl_sleep+0x5c>)
    e12a:	6913      	ldr	r3, [r2, #16]
    e12c:	f043 0304 	orr.w	r3, r3, #4
    e130:	6113      	str	r3, [r2, #16]
    e132:	e7e4      	b.n	e0fe <am_hal_sysctrl_sleep+0x22>
    e134:	40020000 	.word	0x40020000
    e138:	e000ed00 	.word	0xe000ed00
    e13c:	5fff0000 	.word	0x5fff0000
    e140:	10000a70 	.word	0x10000a70
    e144:	10000a6c 	.word	0x10000a6c
    e148:	4ffff000 	.word	0x4ffff000

0000e14c <am_hal_uart_initialize>:
    e14c:	2801      	cmp	r0, #1
    e14e:	d819      	bhi.n	e184 <am_hal_uart_initialize+0x38>
    e150:	b1e9      	cbz	r1, e18e <am_hal_uart_initialize+0x42>
    e152:	b4f0      	push	{r4, r5, r6, r7}
    e154:	2264      	movs	r2, #100	; 0x64
    e156:	4d0f      	ldr	r5, [pc, #60]	; (e194 <am_hal_uart_initialize+0x48>)
    e158:	fb02 f200 	mul.w	r2, r2, r0
    e15c:	18ac      	adds	r4, r5, r2
    e15e:	78e3      	ldrb	r3, [r4, #3]
    e160:	f3c3 0700 	ubfx	r7, r3, #0, #1
    e164:	f013 0301 	ands.w	r3, r3, #1
    e168:	d10e      	bne.n	e188 <am_hal_uart_initialize+0x3c>
    e16a:	6260      	str	r0, [r4, #36]	; 0x24
    e16c:	58ae      	ldr	r6, [r5, r2]
    e16e:	480a      	ldr	r0, [pc, #40]	; (e198 <am_hal_uart_initialize+0x4c>)
    e170:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
    e174:	4330      	orrs	r0, r6
    e176:	50a8      	str	r0, [r5, r2]
    e178:	7127      	strb	r7, [r4, #4]
    e17a:	6623      	str	r3, [r4, #96]	; 0x60
    e17c:	4618      	mov	r0, r3
    e17e:	600c      	str	r4, [r1, #0]
    e180:	bcf0      	pop	{r4, r5, r6, r7}
    e182:	4770      	bx	lr
    e184:	2005      	movs	r0, #5
    e186:	4770      	bx	lr
    e188:	2007      	movs	r0, #7
    e18a:	bcf0      	pop	{r4, r5, r6, r7}
    e18c:	4770      	bx	lr
    e18e:	2006      	movs	r0, #6
    e190:	4770      	bx	lr
    e192:	bf00      	nop
    e194:	10000a78 	.word	0x10000a78
    e198:	01ea9e06 	.word	0x01ea9e06

0000e19c <am_hal_uart_power_control>:
    e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e19e:	4604      	mov	r4, r0
    e1a0:	6800      	ldr	r0, [r0, #0]
    e1a2:	4b39      	ldr	r3, [pc, #228]	; (e288 <am_hal_uart_power_control+0xec>)
    e1a4:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e1a8:	429e      	cmp	r6, r3
    e1aa:	b085      	sub	sp, #20
    e1ac:	d13f      	bne.n	e22e <am_hal_uart_power_control+0x92>
    e1ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e1b0:	f105 0008 	add.w	r0, r5, #8
    e1b4:	b2c7      	uxtb	r7, r0
    e1b6:	b1a1      	cbz	r1, e1e2 <am_hal_uart_power_control+0x46>
    e1b8:	3901      	subs	r1, #1
    e1ba:	2901      	cmp	r1, #1
    e1bc:	d80e      	bhi.n	e1dc <am_hal_uart_power_control+0x40>
    e1be:	2a00      	cmp	r2, #0
    e1c0:	d138      	bne.n	e234 <am_hal_uart_power_control+0x98>
    e1c2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1c6:	351c      	adds	r5, #28
    e1c8:	032d      	lsls	r5, r5, #12
    e1ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e1ce:	646b      	str	r3, [r5, #68]	; 0x44
    e1d0:	4638      	mov	r0, r7
    e1d2:	f7ff fee5 	bl	dfa0 <am_hal_pwrctrl_periph_disable>
    e1d6:	2000      	movs	r0, #0
    e1d8:	b005      	add	sp, #20
    e1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1dc:	2006      	movs	r0, #6
    e1de:	b005      	add	sp, #20
    e1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1e2:	2a00      	cmp	r2, #0
    e1e4:	d047      	beq.n	e276 <am_hal_uart_power_control+0xda>
    e1e6:	7923      	ldrb	r3, [r4, #4]
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d04b      	beq.n	e284 <am_hal_uart_power_control+0xe8>
    e1ec:	4638      	mov	r0, r7
    e1ee:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1f2:	9101      	str	r1, [sp, #4]
    e1f4:	351c      	adds	r5, #28
    e1f6:	f7ff fea9 	bl	df4c <am_hal_pwrctrl_periph_enable>
    e1fa:	f7ff fe9f 	bl	df3c <am_hal_interrupt_master_disable>
    e1fe:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
    e202:	032d      	lsls	r5, r5, #12
    e204:	9002      	str	r0, [sp, #8]
    e206:	6922      	ldr	r2, [r4, #16]
    e208:	622b      	str	r3, [r5, #32]
    e20a:	6963      	ldr	r3, [r4, #20]
    e20c:	69a0      	ldr	r0, [r4, #24]
    e20e:	626e      	str	r6, [r5, #36]	; 0x24
    e210:	62aa      	str	r2, [r5, #40]	; 0x28
    e212:	69e2      	ldr	r2, [r4, #28]
    e214:	62eb      	str	r3, [r5, #44]	; 0x2c
    e216:	6a23      	ldr	r3, [r4, #32]
    e218:	9901      	ldr	r1, [sp, #4]
    e21a:	6328      	str	r0, [r5, #48]	; 0x30
    e21c:	636a      	str	r2, [r5, #52]	; 0x34
    e21e:	63ab      	str	r3, [r5, #56]	; 0x38
    e220:	9802      	ldr	r0, [sp, #8]
    e222:	7121      	strb	r1, [r4, #4]
    e224:	f7ff fe8e 	bl	df44 <am_hal_interrupt_master_set>
    e228:	9901      	ldr	r1, [sp, #4]
    e22a:	4608      	mov	r0, r1
    e22c:	e7d7      	b.n	e1de <am_hal_uart_power_control+0x42>
    e22e:	2002      	movs	r0, #2
    e230:	b005      	add	sp, #20
    e232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e234:	f7ff fe82 	bl	df3c <am_hal_interrupt_master_disable>
    e238:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e23c:	351c      	adds	r5, #28
    e23e:	032d      	lsls	r5, r5, #12
    e240:	9003      	str	r0, [sp, #12]
    e242:	6a2a      	ldr	r2, [r5, #32]
    e244:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e246:	60a2      	str	r2, [r4, #8]
    e248:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e24a:	60e3      	str	r3, [r4, #12]
    e24c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e24e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e250:	6163      	str	r3, [r4, #20]
    e252:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e254:	6122      	str	r2, [r4, #16]
    e256:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e258:	61e3      	str	r3, [r4, #28]
    e25a:	2301      	movs	r3, #1
    e25c:	7123      	strb	r3, [r4, #4]
    e25e:	9803      	ldr	r0, [sp, #12]
    e260:	61a1      	str	r1, [r4, #24]
    e262:	6222      	str	r2, [r4, #32]
    e264:	f7ff fe6e 	bl	df44 <am_hal_interrupt_master_set>
    e268:	6823      	ldr	r3, [r4, #0]
    e26a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e26e:	42b3      	cmp	r3, r6
    e270:	d1ae      	bne.n	e1d0 <am_hal_uart_power_control+0x34>
    e272:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e274:	e7a5      	b.n	e1c2 <am_hal_uart_power_control+0x26>
    e276:	4638      	mov	r0, r7
    e278:	9201      	str	r2, [sp, #4]
    e27a:	f7ff fe67 	bl	df4c <am_hal_pwrctrl_periph_enable>
    e27e:	9a01      	ldr	r2, [sp, #4]
    e280:	4610      	mov	r0, r2
    e282:	e7ac      	b.n	e1de <am_hal_uart_power_control+0x42>
    e284:	2007      	movs	r0, #7
    e286:	e7aa      	b.n	e1de <am_hal_uart_power_control+0x42>
    e288:	01ea9e06 	.word	0x01ea9e06

0000e28c <am_hal_uart_configure>:
    e28c:	6803      	ldr	r3, [r0, #0]
    e28e:	4a78      	ldr	r2, [pc, #480]	; (e470 <am_hal_uart_configure+0x1e4>)
    e290:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e294:	4293      	cmp	r3, r2
    e296:	d001      	beq.n	e29c <am_hal_uart_configure+0x10>
    e298:	2002      	movs	r0, #2
    e29a:	4770      	bx	lr
    e29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e2a2:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e2a6:	341c      	adds	r4, #28
    e2a8:	0324      	lsls	r4, r4, #12
    e2aa:	2700      	movs	r7, #0
    e2ac:	b084      	sub	sp, #16
    e2ae:	6327      	str	r7, [r4, #48]	; 0x30
    e2b0:	460e      	mov	r6, r1
    e2b2:	4605      	mov	r5, r0
    e2b4:	f7ff fe42 	bl	df3c <am_hal_interrupt_master_disable>
    e2b8:	9001      	str	r0, [sp, #4]
    e2ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e2bc:	f043 0308 	orr.w	r3, r3, #8
    e2c0:	8623      	strh	r3, [r4, #48]	; 0x30
    e2c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e2c4:	2201      	movs	r2, #1
    e2c6:	f362 1306 	bfi	r3, r2, #4, #3
    e2ca:	8623      	strh	r3, [r4, #48]	; 0x30
    e2cc:	9801      	ldr	r0, [sp, #4]
    e2ce:	f7ff fe39 	bl	df44 <am_hal_interrupt_master_set>
    e2d2:	f7ff fe33 	bl	df3c <am_hal_interrupt_master_disable>
    e2d6:	9002      	str	r0, [sp, #8]
    e2d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e2da:	f367 0300 	bfi	r3, r7, #0, #1
    e2de:	8623      	strh	r3, [r4, #48]	; 0x30
    e2e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e2e2:	f367 2349 	bfi	r3, r7, #9, #1
    e2e6:	8623      	strh	r3, [r4, #48]	; 0x30
    e2e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e2ea:	f367 2308 	bfi	r3, r7, #8, #1
    e2ee:	8623      	strh	r3, [r4, #48]	; 0x30
    e2f0:	9802      	ldr	r0, [sp, #8]
    e2f2:	f7ff fe27 	bl	df44 <am_hal_interrupt_master_set>
    e2f6:	4b5f      	ldr	r3, [pc, #380]	; (e474 <am_hal_uart_configure+0x1e8>)
    e2f8:	6832      	ldr	r2, [r6, #0]
    e2fa:	68db      	ldr	r3, [r3, #12]
    e2fc:	b2db      	uxtb	r3, r3
    e2fe:	2b12      	cmp	r3, #18
    e300:	d076      	beq.n	e3f0 <am_hal_uart_configure+0x164>
    e302:	4b5c      	ldr	r3, [pc, #368]	; (e474 <am_hal_uart_configure+0x1e8>)
    e304:	68db      	ldr	r3, [r3, #12]
    e306:	b2db      	uxtb	r3, r3
    e308:	2b20      	cmp	r3, #32
    e30a:	d902      	bls.n	e312 <am_hal_uart_configure+0x86>
    e30c:	4b5a      	ldr	r3, [pc, #360]	; (e478 <am_hal_uart_configure+0x1ec>)
    e30e:	429a      	cmp	r2, r3
    e310:	d871      	bhi.n	e3f6 <am_hal_uart_configure+0x16a>
    e312:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e314:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e318:	3b01      	subs	r3, #1
    e31a:	b2db      	uxtb	r3, r3
    e31c:	2b03      	cmp	r3, #3
    e31e:	d86c      	bhi.n	e3fa <am_hal_uart_configure+0x16e>
    e320:	4956      	ldr	r1, [pc, #344]	; (e47c <am_hal_uart_configure+0x1f0>)
    e322:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e326:	0112      	lsls	r2, r2, #4
    e328:	4291      	cmp	r1, r2
    e32a:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e32e:	fbb1 f0f2 	udiv	r0, r1, r2
    e332:	fbb3 f3f2 	udiv	r3, r3, r2
    e336:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e33a:	d364      	bcc.n	e406 <am_hal_uart_configure+0x17a>
    e33c:	089a      	lsrs	r2, r3, #2
    e33e:	6260      	str	r0, [r4, #36]	; 0x24
    e340:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    e344:	6260      	str	r0, [r4, #36]	; 0x24
    e346:	fbb1 f1f2 	udiv	r1, r1, r2
    e34a:	62a3      	str	r3, [r4, #40]	; 0x28
    e34c:	6629      	str	r1, [r5, #96]	; 0x60
    e34e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e350:	f36f 338e 	bfc	r3, #14, #1
    e354:	8623      	strh	r3, [r4, #48]	; 0x30
    e356:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e358:	f36f 33cf 	bfc	r3, #15, #1
    e35c:	8623      	strh	r3, [r4, #48]	; 0x30
    e35e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    e362:	6873      	ldr	r3, [r6, #4]
    e364:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e366:	430b      	orrs	r3, r1
    e368:	6931      	ldr	r1, [r6, #16]
    e36a:	4303      	orrs	r3, r0
    e36c:	430a      	orrs	r2, r1
    e36e:	f043 0310 	orr.w	r3, r3, #16
    e372:	6971      	ldr	r1, [r6, #20]
    e374:	6322      	str	r2, [r4, #48]	; 0x30
    e376:	6361      	str	r1, [r4, #52]	; 0x34
    e378:	62e3      	str	r3, [r4, #44]	; 0x2c
    e37a:	f7ff fddf 	bl	df3c <am_hal_interrupt_master_disable>
    e37e:	9003      	str	r0, [sp, #12]
    e380:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e382:	f043 0301 	orr.w	r3, r3, #1
    e386:	8623      	strh	r3, [r4, #48]	; 0x30
    e388:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e38a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e38e:	8623      	strh	r3, [r4, #48]	; 0x30
    e390:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e396:	8623      	strh	r3, [r4, #48]	; 0x30
    e398:	9803      	ldr	r0, [sp, #12]
    e39a:	f7ff fdd3 	bl	df44 <am_hal_interrupt_master_set>
    e39e:	682a      	ldr	r2, [r5, #0]
    e3a0:	4b33      	ldr	r3, [pc, #204]	; (e470 <am_hal_uart_configure+0x1e4>)
    e3a2:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e3a6:	4598      	cmp	r8, r3
    e3a8:	d11e      	bne.n	e3e8 <am_hal_uart_configure+0x15c>
    e3aa:	69b1      	ldr	r1, [r6, #24]
    e3ac:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e3b0:	b109      	cbz	r1, e3b6 <am_hal_uart_configure+0x12a>
    e3b2:	69f3      	ldr	r3, [r6, #28]
    e3b4:	bb5b      	cbnz	r3, e40e <am_hal_uart_configure+0x182>
    e3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e3b8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e3bc:	331c      	adds	r3, #28
    e3be:	031b      	lsls	r3, r3, #12
    e3c0:	2100      	movs	r1, #0
    e3c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e3c4:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
    e3c8:	f022 0220 	bic.w	r2, r2, #32
    e3cc:	639a      	str	r2, [r3, #56]	; 0x38
    e3ce:	b10c      	cbz	r4, e3d4 <am_hal_uart_configure+0x148>
    e3d0:	2f00      	cmp	r7, #0
    e3d2:	d132      	bne.n	e43a <am_hal_uart_configure+0x1ae>
    e3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e3d6:	2000      	movs	r0, #0
    e3d8:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e3dc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e3e0:	639a      	str	r2, [r3, #56]	; 0x38
    e3e2:	b004      	add	sp, #16
    e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3e8:	2000      	movs	r0, #0
    e3ea:	b004      	add	sp, #16
    e3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3f0:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e3f4:	d985      	bls.n	e302 <am_hal_uart_configure+0x76>
    e3f6:	4822      	ldr	r0, [pc, #136]	; (e480 <am_hal_uart_configure+0x1f4>)
    e3f8:	e7f3      	b.n	e3e2 <am_hal_uart_configure+0x156>
    e3fa:	4822      	ldr	r0, [pc, #136]	; (e484 <am_hal_uart_configure+0x1f8>)
    e3fc:	2300      	movs	r3, #0
    e3fe:	662b      	str	r3, [r5, #96]	; 0x60
    e400:	b004      	add	sp, #16
    e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e406:	2300      	movs	r3, #0
    e408:	481d      	ldr	r0, [pc, #116]	; (e480 <am_hal_uart_configure+0x1f4>)
    e40a:	662b      	str	r3, [r5, #96]	; 0x60
    e40c:	e7e9      	b.n	e3e2 <am_hal_uart_configure+0x156>
    e40e:	2201      	movs	r2, #1
    e410:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e414:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e418:	f000 fb18 	bl	ea4c <am_hal_queue_init>
    e41c:	682b      	ldr	r3, [r5, #0]
    e41e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e422:	4543      	cmp	r3, r8
    e424:	d1e0      	bne.n	e3e8 <am_hal_uart_configure+0x15c>
    e426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e428:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e42c:	331c      	adds	r3, #28
    e42e:	031b      	lsls	r3, r3, #12
    e430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e432:	f042 0220 	orr.w	r2, r2, #32
    e436:	639a      	str	r2, [r3, #56]	; 0x38
    e438:	e7c9      	b.n	e3ce <am_hal_uart_configure+0x142>
    e43a:	2201      	movs	r2, #1
    e43c:	463b      	mov	r3, r7
    e43e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e442:	4621      	mov	r1, r4
    e444:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e448:	f000 fb00 	bl	ea4c <am_hal_queue_init>
    e44c:	682b      	ldr	r3, [r5, #0]
    e44e:	4a08      	ldr	r2, [pc, #32]	; (e470 <am_hal_uart_configure+0x1e4>)
    e450:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e454:	4293      	cmp	r3, r2
    e456:	d1c7      	bne.n	e3e8 <am_hal_uart_configure+0x15c>
    e458:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e45a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e45e:	331c      	adds	r3, #28
    e460:	031b      	lsls	r3, r3, #12
    e462:	2000      	movs	r0, #0
    e464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e466:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e46a:	639a      	str	r2, [r3, #56]	; 0x38
    e46c:	e7b9      	b.n	e3e2 <am_hal_uart_configure+0x156>
    e46e:	bf00      	nop
    e470:	01ea9e06 	.word	0x01ea9e06
    e474:	40020000 	.word	0x40020000
    e478:	0016e360 	.word	0x0016e360
    e47c:	0000f084 	.word	0x0000f084
    e480:	08000003 	.word	0x08000003
    e484:	08000002 	.word	0x08000002

0000e488 <am_hal_uart_transfer>:
    e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e48c:	ed2d 8b02 	vpush	{d8}
    e490:	680d      	ldr	r5, [r1, #0]
    e492:	b091      	sub	sp, #68	; 0x44
    e494:	4604      	mov	r4, r0
    e496:	b14d      	cbz	r5, e4ac <am_hal_uart_transfer+0x24>
    e498:	2d01      	cmp	r5, #1
    e49a:	f000 8091 	beq.w	e5c0 <am_hal_uart_transfer+0x138>
    e49e:	2507      	movs	r5, #7
    e4a0:	4628      	mov	r0, r5
    e4a2:	b011      	add	sp, #68	; 0x44
    e4a4:	ecbd 8b02 	vpop	{d8}
    e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4ac:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e4b0:	684b      	ldr	r3, [r1, #4]
    e4b2:	690a      	ldr	r2, [r1, #16]
    e4b4:	688e      	ldr	r6, [r1, #8]
    e4b6:	9301      	str	r3, [sp, #4]
    e4b8:	9203      	str	r2, [sp, #12]
    e4ba:	f1b9 0f00 	cmp.w	r9, #0
    e4be:	f000 8113 	beq.w	e6e8 <am_hal_uart_transfer+0x260>
    e4c2:	2e00      	cmp	r6, #0
    e4c4:	f000 8179 	beq.w	e7ba <am_hal_uart_transfer+0x332>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	f000 8168 	beq.w	e79e <am_hal_uart_transfer+0x316>
    e4ce:	46aa      	mov	sl, r5
    e4d0:	462f      	mov	r7, r5
    e4d2:	9502      	str	r5, [sp, #8]
    e4d4:	4605      	mov	r5, r0
    e4d6:	4619      	mov	r1, r3
    e4d8:	682a      	ldr	r2, [r5, #0]
    e4da:	4bb4      	ldr	r3, [pc, #720]	; (e7ac <am_hal_uart_transfer+0x324>)
    e4dc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e4e0:	429a      	cmp	r2, r3
    e4e2:	d12f      	bne.n	e544 <am_hal_uart_transfer+0xbc>
    e4e4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e4e8:	2a00      	cmp	r2, #0
    e4ea:	d133      	bne.n	e554 <am_hal_uart_transfer+0xcc>
    e4ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e4ee:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e4f2:	301c      	adds	r0, #28
    e4f4:	3901      	subs	r1, #1
    e4f6:	0300      	lsls	r0, r0, #12
    e4f8:	e005      	b.n	e506 <am_hal_uart_transfer+0x7e>
    e4fa:	3201      	adds	r2, #1
    e4fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e500:	6003      	str	r3, [r0, #0]
    e502:	42b2      	cmp	r2, r6
    e504:	d023      	beq.n	e54e <am_hal_uart_transfer+0xc6>
    e506:	6983      	ldr	r3, [r0, #24]
    e508:	069c      	lsls	r4, r3, #26
    e50a:	d5f6      	bpl.n	e4fa <am_hal_uart_transfer+0x72>
    e50c:	4417      	add	r7, r2
    e50e:	1ab6      	subs	r6, r6, r2
    e510:	b936      	cbnz	r6, e520 <am_hal_uart_transfer+0x98>
    e512:	9d02      	ldr	r5, [sp, #8]
    e514:	9b03      	ldr	r3, [sp, #12]
    e516:	2b00      	cmp	r3, #0
    e518:	f000 808d 	beq.w	e636 <am_hal_uart_transfer+0x1ae>
    e51c:	601f      	str	r7, [r3, #0]
    e51e:	e7bf      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e520:	2010      	movs	r0, #16
    e522:	f7ff fb0f 	bl	db44 <am_hal_flash_delay>
    e526:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e52a:	bf18      	it	ne
    e52c:	f10a 0a01 	addne.w	sl, sl, #1
    e530:	45d1      	cmp	r9, sl
    e532:	d9ee      	bls.n	e512 <am_hal_uart_transfer+0x8a>
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	682a      	ldr	r2, [r5, #0]
    e538:	19d9      	adds	r1, r3, r7
    e53a:	4b9c      	ldr	r3, [pc, #624]	; (e7ac <am_hal_uart_transfer+0x324>)
    e53c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e540:	429a      	cmp	r2, r3
    e542:	d0cf      	beq.n	e4e4 <am_hal_uart_transfer+0x5c>
    e544:	9b03      	ldr	r3, [sp, #12]
    e546:	b103      	cbz	r3, e54a <am_hal_uart_transfer+0xc2>
    e548:	601f      	str	r7, [r3, #0]
    e54a:	2502      	movs	r5, #2
    e54c:	e7a8      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e54e:	9d02      	ldr	r5, [sp, #8]
    e550:	4417      	add	r7, r2
    e552:	e7df      	b.n	e514 <am_hal_uart_transfer+0x8c>
    e554:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e558:	eba2 0b00 	sub.w	fp, r2, r0
    e55c:	45b3      	cmp	fp, r6
    e55e:	bf28      	it	cs
    e560:	46b3      	movcs	fp, r6
    e562:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e566:	465a      	mov	r2, fp
    e568:	4620      	mov	r0, r4
    e56a:	f000 fa7b 	bl	ea64 <am_hal_queue_item_add>
    e56e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    e572:	f7ff fce3 	bl	df3c <am_hal_interrupt_master_disable>
    e576:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
    e57a:	f108 081c 	add.w	r8, r8, #28
    e57e:	ea4f 3808 	mov.w	r8, r8, lsl #12
    e582:	9008      	str	r0, [sp, #32]
    e584:	e00d      	b.n	e5a2 <am_hal_uart_transfer+0x11a>
    e586:	f000 faab 	bl	eae0 <am_hal_queue_item_get>
    e58a:	b190      	cbz	r0, e5b2 <am_hal_uart_transfer+0x12a>
    e58c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e58e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e592:	331c      	adds	r3, #28
    e594:	031b      	lsls	r3, r3, #12
    e596:	699a      	ldr	r2, [r3, #24]
    e598:	0692      	lsls	r2, r2, #26
    e59a:	bf5c      	itt	pl
    e59c:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e5a0:	601a      	strpl	r2, [r3, #0]
    e5a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
    e5a6:	069b      	lsls	r3, r3, #26
    e5a8:	f04f 0201 	mov.w	r2, #1
    e5ac:	a907      	add	r1, sp, #28
    e5ae:	4620      	mov	r0, r4
    e5b0:	d5e9      	bpl.n	e586 <am_hal_uart_transfer+0xfe>
    e5b2:	9808      	ldr	r0, [sp, #32]
    e5b4:	445f      	add	r7, fp
    e5b6:	eba6 060b 	sub.w	r6, r6, fp
    e5ba:	f7ff fcc3 	bl	df44 <am_hal_interrupt_master_set>
    e5be:	e7a7      	b.n	e510 <am_hal_uart_transfer+0x88>
    e5c0:	68cd      	ldr	r5, [r1, #12]
    e5c2:	690b      	ldr	r3, [r1, #16]
    e5c4:	9301      	str	r3, [sp, #4]
    e5c6:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e5ca:	2d00      	cmp	r5, #0
    e5cc:	f000 80b8 	beq.w	e740 <am_hal_uart_transfer+0x2b8>
    e5d0:	2f00      	cmp	r7, #0
    e5d2:	f000 8123 	beq.w	e81c <am_hal_uart_transfer+0x394>
    e5d6:	2800      	cmp	r0, #0
    e5d8:	f000 80ec 	beq.w	e7b4 <am_hal_uart_transfer+0x32c>
    e5dc:	6822      	ldr	r2, [r4, #0]
    e5de:	f8df a1cc 	ldr.w	sl, [pc, #460]	; e7ac <am_hal_uart_transfer+0x324>
    e5e2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e5e6:	f04f 0900 	mov.w	r9, #0
    e5ea:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e5ee:	4552      	cmp	r2, sl
    e5f0:	ee08 3a10 	vmov	s16, r3
    e5f4:	46c8      	mov	r8, r9
    e5f6:	465e      	mov	r6, fp
    e5f8:	d134      	bne.n	e664 <am_hal_uart_transfer+0x1dc>
    e5fa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e5fe:	2a00      	cmp	r2, #0
    e600:	d138      	bne.n	e674 <am_hal_uart_transfer+0x1ec>
    e602:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e604:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e608:	311c      	adds	r1, #28
    e60a:	1e73      	subs	r3, r6, #1
    e60c:	0309      	lsls	r1, r1, #12
    e60e:	e008      	b.n	e622 <am_hal_uart_transfer+0x19a>
    e610:	6808      	ldr	r0, [r1, #0]
    e612:	f410 6f70 	tst.w	r0, #3840	; 0xf00
    e616:	d163      	bne.n	e6e0 <am_hal_uart_transfer+0x258>
    e618:	3201      	adds	r2, #1
    e61a:	42ba      	cmp	r2, r7
    e61c:	f803 0f01 	strb.w	r0, [r3, #1]!
    e620:	d056      	beq.n	e6d0 <am_hal_uart_transfer+0x248>
    e622:	6988      	ldr	r0, [r1, #24]
    e624:	06c0      	lsls	r0, r0, #27
    e626:	d5f3      	bpl.n	e610 <am_hal_uart_transfer+0x188>
    e628:	4490      	add	r8, r2
    e62a:	1abf      	subs	r7, r7, r2
    e62c:	b957      	cbnz	r7, e644 <am_hal_uart_transfer+0x1bc>
    e62e:	9b01      	ldr	r3, [sp, #4]
    e630:	b10b      	cbz	r3, e636 <am_hal_uart_transfer+0x1ae>
    e632:	f8c3 8000 	str.w	r8, [r3]
    e636:	2500      	movs	r5, #0
    e638:	4628      	mov	r0, r5
    e63a:	b011      	add	sp, #68	; 0x44
    e63c:	ecbd 8b02 	vpop	{d8}
    e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e644:	2010      	movs	r0, #16
    e646:	f7ff fa7d 	bl	db44 <am_hal_flash_delay>
    e64a:	1c6b      	adds	r3, r5, #1
    e64c:	bf18      	it	ne
    e64e:	f109 0901 	addne.w	r9, r9, #1
    e652:	454d      	cmp	r5, r9
    e654:	d9eb      	bls.n	e62e <am_hal_uart_transfer+0x1a6>
    e656:	6822      	ldr	r2, [r4, #0]
    e658:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e65c:	4552      	cmp	r2, sl
    e65e:	eb0b 0608 	add.w	r6, fp, r8
    e662:	d0ca      	beq.n	e5fa <am_hal_uart_transfer+0x172>
    e664:	2502      	movs	r5, #2
    e666:	9b01      	ldr	r3, [sp, #4]
    e668:	2b00      	cmp	r3, #0
    e66a:	f43f af19 	beq.w	e4a0 <am_hal_uart_transfer+0x18>
    e66e:	f8c3 8000 	str.w	r8, [r3]
    e672:	e715      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e674:	f7ff fc62 	bl	df3c <am_hal_interrupt_master_disable>
    e678:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e67a:	9007      	str	r0, [sp, #28]
    e67c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e680:	321c      	adds	r2, #28
    e682:	0310      	lsls	r0, r2, #12
    e684:	f10d 0c20 	add.w	ip, sp, #32
    e688:	2200      	movs	r2, #0
    e68a:	6983      	ldr	r3, [r0, #24]
    e68c:	06db      	lsls	r3, r3, #27
    e68e:	d409      	bmi.n	e6a4 <am_hal_uart_transfer+0x21c>
    e690:	6803      	ldr	r3, [r0, #0]
    e692:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e696:	f102 0201 	add.w	r2, r2, #1
    e69a:	d11b      	bne.n	e6d4 <am_hal_uart_transfer+0x24c>
    e69c:	2a20      	cmp	r2, #32
    e69e:	f80c 3b01 	strb.w	r3, [ip], #1
    e6a2:	d1f2      	bne.n	e68a <am_hal_uart_transfer+0x202>
    e6a4:	ee18 0a10 	vmov	r0, s16
    e6a8:	a908      	add	r1, sp, #32
    e6aa:	f000 f9db 	bl	ea64 <am_hal_queue_item_add>
    e6ae:	2800      	cmp	r0, #0
    e6b0:	d077      	beq.n	e7a2 <am_hal_uart_transfer+0x31a>
    e6b2:	9807      	ldr	r0, [sp, #28]
    e6b4:	f7ff fc46 	bl	df44 <am_hal_interrupt_master_set>
    e6b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e6ba:	42ba      	cmp	r2, r7
    e6bc:	bf28      	it	cs
    e6be:	463a      	movcs	r2, r7
    e6c0:	ee18 0a10 	vmov	r0, s16
    e6c4:	4631      	mov	r1, r6
    e6c6:	4490      	add	r8, r2
    e6c8:	1abf      	subs	r7, r7, r2
    e6ca:	f000 fa09 	bl	eae0 <am_hal_queue_item_get>
    e6ce:	e7ad      	b.n	e62c <am_hal_uart_transfer+0x1a4>
    e6d0:	4490      	add	r8, r2
    e6d2:	e7ac      	b.n	e62e <am_hal_uart_transfer+0x1a6>
    e6d4:	9807      	ldr	r0, [sp, #28]
    e6d6:	f7ff fc35 	bl	df44 <am_hal_interrupt_master_set>
    e6da:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e6de:	e7c2      	b.n	e666 <am_hal_uart_transfer+0x1de>
    e6e0:	4490      	add	r8, r2
    e6e2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e6e6:	e7be      	b.n	e666 <am_hal_uart_transfer+0x1de>
    e6e8:	2800      	cmp	r0, #0
    e6ea:	f43f af2e 	beq.w	e54a <am_hal_uart_transfer+0xc2>
    e6ee:	6803      	ldr	r3, [r0, #0]
    e6f0:	4a2e      	ldr	r2, [pc, #184]	; (e7ac <am_hal_uart_transfer+0x324>)
    e6f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6f6:	4293      	cmp	r3, r2
    e6f8:	f47f af27 	bne.w	e54a <am_hal_uart_transfer+0xc2>
    e6fc:	9b03      	ldr	r3, [sp, #12]
    e6fe:	b10b      	cbz	r3, e704 <am_hal_uart_transfer+0x27c>
    e700:	f8c3 9000 	str.w	r9, [r3]
    e704:	2e00      	cmp	r6, #0
    e706:	d096      	beq.n	e636 <am_hal_uart_transfer+0x1ae>
    e708:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    e70c:	2d00      	cmp	r5, #0
    e70e:	d156      	bne.n	e7be <am_hal_uart_transfer+0x336>
    e710:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e712:	9b01      	ldr	r3, [sp, #4]
    e714:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e718:	321c      	adds	r2, #28
    e71a:	0312      	lsls	r2, r2, #12
    e71c:	3b01      	subs	r3, #1
    e71e:	e005      	b.n	e72c <am_hal_uart_transfer+0x2a4>
    e720:	3501      	adds	r5, #1
    e722:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e726:	6011      	str	r1, [r2, #0]
    e728:	42ae      	cmp	r6, r5
    e72a:	d002      	beq.n	e732 <am_hal_uart_transfer+0x2aa>
    e72c:	6991      	ldr	r1, [r2, #24]
    e72e:	0689      	lsls	r1, r1, #26
    e730:	d5f6      	bpl.n	e720 <am_hal_uart_transfer+0x298>
    e732:	9b03      	ldr	r3, [sp, #12]
    e734:	2b00      	cmp	r3, #0
    e736:	f43f af7e 	beq.w	e636 <am_hal_uart_transfer+0x1ae>
    e73a:	601d      	str	r5, [r3, #0]
    e73c:	2500      	movs	r5, #0
    e73e:	e6af      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e740:	2800      	cmp	r0, #0
    e742:	f43f af02 	beq.w	e54a <am_hal_uart_transfer+0xc2>
    e746:	6802      	ldr	r2, [r0, #0]
    e748:	4918      	ldr	r1, [pc, #96]	; (e7ac <am_hal_uart_transfer+0x324>)
    e74a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e74e:	428a      	cmp	r2, r1
    e750:	f47f aefb 	bne.w	e54a <am_hal_uart_transfer+0xc2>
    e754:	b103      	cbz	r3, e758 <am_hal_uart_transfer+0x2d0>
    e756:	601d      	str	r5, [r3, #0]
    e758:	2f00      	cmp	r7, #0
    e75a:	f43f af6c 	beq.w	e636 <am_hal_uart_transfer+0x1ae>
    e75e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e762:	2a00      	cmp	r2, #0
    e764:	d15c      	bne.n	e820 <am_hal_uart_transfer+0x398>
    e766:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e768:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    e76c:	301c      	adds	r0, #28
    e76e:	0300      	lsls	r0, r0, #12
    e770:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    e774:	4614      	mov	r4, r2
    e776:	e009      	b.n	e78c <am_hal_uart_transfer+0x304>
    e778:	6801      	ldr	r1, [r0, #0]
    e77a:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
    e77e:	f040 8080 	bne.w	e882 <am_hal_uart_transfer+0x3fa>
    e782:	3401      	adds	r4, #1
    e784:	42a7      	cmp	r7, r4
    e786:	f803 1f01 	strb.w	r1, [r3, #1]!
    e78a:	d07d      	beq.n	e888 <am_hal_uart_transfer+0x400>
    e78c:	6982      	ldr	r2, [r0, #24]
    e78e:	06d2      	lsls	r2, r2, #27
    e790:	d5f2      	bpl.n	e778 <am_hal_uart_transfer+0x2f0>
    e792:	9b01      	ldr	r3, [sp, #4]
    e794:	2b00      	cmp	r3, #0
    e796:	f43f ae83 	beq.w	e4a0 <am_hal_uart_transfer+0x18>
    e79a:	601c      	str	r4, [r3, #0]
    e79c:	e680      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e79e:	4607      	mov	r7, r0
    e7a0:	e6d0      	b.n	e544 <am_hal_uart_transfer+0xbc>
    e7a2:	9807      	ldr	r0, [sp, #28]
    e7a4:	4d02      	ldr	r5, [pc, #8]	; (e7b0 <am_hal_uart_transfer+0x328>)
    e7a6:	f7ff fbcd 	bl	df44 <am_hal_interrupt_master_set>
    e7aa:	e75c      	b.n	e666 <am_hal_uart_transfer+0x1de>
    e7ac:	01ea9e06 	.word	0x01ea9e06
    e7b0:	08000001 	.word	0x08000001
    e7b4:	4680      	mov	r8, r0
    e7b6:	2502      	movs	r5, #2
    e7b8:	e755      	b.n	e666 <am_hal_uart_transfer+0x1de>
    e7ba:	462f      	mov	r7, r5
    e7bc:	e6aa      	b.n	e514 <am_hal_uart_transfer+0x8c>
    e7be:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
    e7c2:	1b5d      	subs	r5, r3, r5
    e7c4:	42b5      	cmp	r5, r6
    e7c6:	bf28      	it	cs
    e7c8:	4635      	movcs	r5, r6
    e7ca:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    e7ce:	9901      	ldr	r1, [sp, #4]
    e7d0:	462a      	mov	r2, r5
    e7d2:	4638      	mov	r0, r7
    e7d4:	f000 f946 	bl	ea64 <am_hal_queue_item_add>
    e7d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e7da:	f7ff fbaf 	bl	df3c <am_hal_interrupt_master_disable>
    e7de:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    e7e2:	361c      	adds	r6, #28
    e7e4:	0336      	lsls	r6, r6, #12
    e7e6:	9005      	str	r0, [sp, #20]
    e7e8:	e00d      	b.n	e806 <am_hal_uart_transfer+0x37e>
    e7ea:	f000 f979 	bl	eae0 <am_hal_queue_item_get>
    e7ee:	b188      	cbz	r0, e814 <am_hal_uart_transfer+0x38c>
    e7f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e7f2:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e7f6:	321c      	adds	r2, #28
    e7f8:	0312      	lsls	r2, r2, #12
    e7fa:	6993      	ldr	r3, [r2, #24]
    e7fc:	0699      	lsls	r1, r3, #26
    e7fe:	bf5c      	itt	pl
    e800:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    e804:	6013      	strpl	r3, [r2, #0]
    e806:	69b3      	ldr	r3, [r6, #24]
    e808:	069b      	lsls	r3, r3, #26
    e80a:	f04f 0201 	mov.w	r2, #1
    e80e:	a908      	add	r1, sp, #32
    e810:	4638      	mov	r0, r7
    e812:	d5ea      	bpl.n	e7ea <am_hal_uart_transfer+0x362>
    e814:	9805      	ldr	r0, [sp, #20]
    e816:	f7ff fb95 	bl	df44 <am_hal_interrupt_master_set>
    e81a:	e78a      	b.n	e732 <am_hal_uart_transfer+0x2aa>
    e81c:	46b8      	mov	r8, r7
    e81e:	e706      	b.n	e62e <am_hal_uart_transfer+0x1a6>
    e820:	f7ff fb8c 	bl	df3c <am_hal_interrupt_master_disable>
    e824:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e826:	9006      	str	r0, [sp, #24]
    e828:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e82c:	321c      	adds	r2, #28
    e82e:	0310      	lsls	r0, r2, #12
    e830:	ae08      	add	r6, sp, #32
    e832:	2200      	movs	r2, #0
    e834:	6983      	ldr	r3, [r0, #24]
    e836:	06d9      	lsls	r1, r3, #27
    e838:	d409      	bmi.n	e84e <am_hal_uart_transfer+0x3c6>
    e83a:	6803      	ldr	r3, [r0, #0]
    e83c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e840:	f102 0201 	add.w	r2, r2, #1
    e844:	d117      	bne.n	e876 <am_hal_uart_transfer+0x3ee>
    e846:	2a20      	cmp	r2, #32
    e848:	f806 3b01 	strb.w	r3, [r6], #1
    e84c:	d1f2      	bne.n	e834 <am_hal_uart_transfer+0x3ac>
    e84e:	f104 0648 	add.w	r6, r4, #72	; 0x48
    e852:	a908      	add	r1, sp, #32
    e854:	4630      	mov	r0, r6
    e856:	f000 f905 	bl	ea64 <am_hal_queue_item_add>
    e85a:	b1b8      	cbz	r0, e88c <am_hal_uart_transfer+0x404>
    e85c:	9806      	ldr	r0, [sp, #24]
    e85e:	f7ff fb71 	bl	df44 <am_hal_interrupt_master_set>
    e862:	6d24      	ldr	r4, [r4, #80]	; 0x50
    e864:	42bc      	cmp	r4, r7
    e866:	bf28      	it	cs
    e868:	463c      	movcs	r4, r7
    e86a:	4659      	mov	r1, fp
    e86c:	4630      	mov	r0, r6
    e86e:	4622      	mov	r2, r4
    e870:	f000 f936 	bl	eae0 <am_hal_queue_item_get>
    e874:	e78d      	b.n	e792 <am_hal_uart_transfer+0x30a>
    e876:	9806      	ldr	r0, [sp, #24]
    e878:	f7ff fb64 	bl	df44 <am_hal_interrupt_master_set>
    e87c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e880:	e60e      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e882:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e886:	e784      	b.n	e792 <am_hal_uart_transfer+0x30a>
    e888:	4615      	mov	r5, r2
    e88a:	e782      	b.n	e792 <am_hal_uart_transfer+0x30a>
    e88c:	9806      	ldr	r0, [sp, #24]
    e88e:	4d02      	ldr	r5, [pc, #8]	; (e898 <am_hal_uart_transfer+0x410>)
    e890:	f7ff fb58 	bl	df44 <am_hal_interrupt_master_set>
    e894:	e604      	b.n	e4a0 <am_hal_uart_transfer+0x18>
    e896:	bf00      	nop
    e898:	08000001 	.word	0x08000001

0000e89c <am_hal_uart_interrupt_service>:
    e89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a0:	4604      	mov	r4, r0
    e8a2:	4847      	ldr	r0, [pc, #284]	; (e9c0 <am_hal_uart_interrupt_service+0x124>)
    e8a4:	6823      	ldr	r3, [r4, #0]
    e8a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e8aa:	4283      	cmp	r3, r0
    e8ac:	b08a      	sub	sp, #40	; 0x28
    e8ae:	d124      	bne.n	e8fa <am_hal_uart_interrupt_service+0x5e>
    e8b0:	f011 0f50 	tst.w	r1, #80	; 0x50
    e8b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e8b6:	460d      	mov	r5, r1
    e8b8:	4616      	mov	r6, r2
    e8ba:	d002      	beq.n	e8c2 <am_hal_uart_interrupt_service+0x26>
    e8bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e8c0:	bb63      	cbnz	r3, e91c <am_hal_uart_interrupt_service+0x80>
    e8c2:	06a9      	lsls	r1, r5, #26
    e8c4:	d409      	bmi.n	e8da <am_hal_uart_interrupt_service+0x3e>
    e8c6:	b126      	cbz	r6, e8d2 <am_hal_uart_interrupt_service+0x36>
    e8c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e8cc:	b15b      	cbz	r3, e8e6 <am_hal_uart_interrupt_service+0x4a>
    e8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e8d0:	b1bb      	cbz	r3, e902 <am_hal_uart_interrupt_service+0x66>
    e8d2:	2000      	movs	r0, #0
    e8d4:	b00a      	add	sp, #40	; 0x28
    e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e8de:	2b00      	cmp	r3, #0
    e8e0:	d13d      	bne.n	e95e <am_hal_uart_interrupt_service+0xc2>
    e8e2:	2e00      	cmp	r6, #0
    e8e4:	d0f5      	beq.n	e8d2 <am_hal_uart_interrupt_service+0x36>
    e8e6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e8ea:	371c      	adds	r7, #28
    e8ec:	033f      	lsls	r7, r7, #12
    e8ee:	69bb      	ldr	r3, [r7, #24]
    e8f0:	071b      	lsls	r3, r3, #28
    e8f2:	d40e      	bmi.n	e912 <am_hal_uart_interrupt_service+0x76>
    e8f4:	2301      	movs	r3, #1
    e8f6:	6033      	str	r3, [r6, #0]
    e8f8:	e7eb      	b.n	e8d2 <am_hal_uart_interrupt_service+0x36>
    e8fa:	2002      	movs	r0, #2
    e8fc:	b00a      	add	sp, #40	; 0x28
    e8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e902:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e906:	371c      	adds	r7, #28
    e908:	033f      	lsls	r7, r7, #12
    e90a:	69bb      	ldr	r3, [r7, #24]
    e90c:	071a      	lsls	r2, r3, #28
    e90e:	d4e0      	bmi.n	e8d2 <am_hal_uart_interrupt_service+0x36>
    e910:	e7f0      	b.n	e8f4 <am_hal_uart_interrupt_service+0x58>
    e912:	2000      	movs	r0, #0
    e914:	6030      	str	r0, [r6, #0]
    e916:	b00a      	add	sp, #40	; 0x28
    e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e91c:	f7ff fb0e 	bl	df3c <am_hal_interrupt_master_disable>
    e920:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e922:	9001      	str	r0, [sp, #4]
    e924:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e928:	311c      	adds	r1, #28
    e92a:	0309      	lsls	r1, r1, #12
    e92c:	a802      	add	r0, sp, #8
    e92e:	2200      	movs	r2, #0
    e930:	698b      	ldr	r3, [r1, #24]
    e932:	06db      	lsls	r3, r3, #27
    e934:	d409      	bmi.n	e94a <am_hal_uart_interrupt_service+0xae>
    e936:	680b      	ldr	r3, [r1, #0]
    e938:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e93c:	f102 0201 	add.w	r2, r2, #1
    e940:	d132      	bne.n	e9a8 <am_hal_uart_interrupt_service+0x10c>
    e942:	2a20      	cmp	r2, #32
    e944:	f800 3b01 	strb.w	r3, [r0], #1
    e948:	d1f2      	bne.n	e930 <am_hal_uart_interrupt_service+0x94>
    e94a:	a902      	add	r1, sp, #8
    e94c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e950:	f000 f888 	bl	ea64 <am_hal_queue_item_add>
    e954:	b370      	cbz	r0, e9b4 <am_hal_uart_interrupt_service+0x118>
    e956:	9801      	ldr	r0, [sp, #4]
    e958:	f7ff faf4 	bl	df44 <am_hal_interrupt_master_set>
    e95c:	e7b1      	b.n	e8c2 <am_hal_uart_interrupt_service+0x26>
    e95e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e960:	f7ff faec 	bl	df3c <am_hal_interrupt_master_disable>
    e964:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e968:	351c      	adds	r5, #28
    e96a:	032d      	lsls	r5, r5, #12
    e96c:	9002      	str	r0, [sp, #8]
    e96e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    e972:	e00d      	b.n	e990 <am_hal_uart_interrupt_service+0xf4>
    e974:	f000 f8b4 	bl	eae0 <am_hal_queue_item_get>
    e978:	b190      	cbz	r0, e9a0 <am_hal_uart_interrupt_service+0x104>
    e97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e97c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e980:	331c      	adds	r3, #28
    e982:	031b      	lsls	r3, r3, #12
    e984:	699a      	ldr	r2, [r3, #24]
    e986:	0692      	lsls	r2, r2, #26
    e988:	bf5c      	itt	pl
    e98a:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
    e98e:	601a      	strpl	r2, [r3, #0]
    e990:	69ab      	ldr	r3, [r5, #24]
    e992:	069b      	lsls	r3, r3, #26
    e994:	f04f 0201 	mov.w	r2, #1
    e998:	f10d 0103 	add.w	r1, sp, #3
    e99c:	4640      	mov	r0, r8
    e99e:	d5e9      	bpl.n	e974 <am_hal_uart_interrupt_service+0xd8>
    e9a0:	9802      	ldr	r0, [sp, #8]
    e9a2:	f7ff facf 	bl	df44 <am_hal_interrupt_master_set>
    e9a6:	e78e      	b.n	e8c6 <am_hal_uart_interrupt_service+0x2a>
    e9a8:	9801      	ldr	r0, [sp, #4]
    e9aa:	f7ff facb 	bl	df44 <am_hal_interrupt_master_set>
    e9ae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    e9b2:	e78f      	b.n	e8d4 <am_hal_uart_interrupt_service+0x38>
    e9b4:	9801      	ldr	r0, [sp, #4]
    e9b6:	f7ff fac5 	bl	df44 <am_hal_interrupt_master_set>
    e9ba:	4802      	ldr	r0, [pc, #8]	; (e9c4 <am_hal_uart_interrupt_service+0x128>)
    e9bc:	e78a      	b.n	e8d4 <am_hal_uart_interrupt_service+0x38>
    e9be:	bf00      	nop
    e9c0:	01ea9e06 	.word	0x01ea9e06
    e9c4:	08000001 	.word	0x08000001

0000e9c8 <am_hal_uart_interrupt_enable>:
    e9c8:	6803      	ldr	r3, [r0, #0]
    e9ca:	4a08      	ldr	r2, [pc, #32]	; (e9ec <am_hal_uart_interrupt_enable+0x24>)
    e9cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9d0:	4293      	cmp	r3, r2
    e9d2:	d109      	bne.n	e9e8 <am_hal_uart_interrupt_enable+0x20>
    e9d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e9d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9da:	331c      	adds	r3, #28
    e9dc:	031b      	lsls	r3, r3, #12
    e9de:	2000      	movs	r0, #0
    e9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e9e2:	4311      	orrs	r1, r2
    e9e4:	6399      	str	r1, [r3, #56]	; 0x38
    e9e6:	4770      	bx	lr
    e9e8:	2002      	movs	r0, #2
    e9ea:	4770      	bx	lr
    e9ec:	01ea9e06 	.word	0x01ea9e06

0000e9f0 <am_hal_uart_interrupt_clear>:
    e9f0:	6803      	ldr	r3, [r0, #0]
    e9f2:	4a07      	ldr	r2, [pc, #28]	; (ea10 <am_hal_uart_interrupt_clear+0x20>)
    e9f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9f8:	4293      	cmp	r3, r2
    e9fa:	d107      	bne.n	ea0c <am_hal_uart_interrupt_clear+0x1c>
    e9fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e9fe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea02:	331c      	adds	r3, #28
    ea04:	031b      	lsls	r3, r3, #12
    ea06:	2000      	movs	r0, #0
    ea08:	6459      	str	r1, [r3, #68]	; 0x44
    ea0a:	4770      	bx	lr
    ea0c:	2002      	movs	r0, #2
    ea0e:	4770      	bx	lr
    ea10:	01ea9e06 	.word	0x01ea9e06

0000ea14 <am_hal_uart_interrupt_status_get>:
    ea14:	6803      	ldr	r3, [r0, #0]
    ea16:	b410      	push	{r4}
    ea18:	4c0b      	ldr	r4, [pc, #44]	; (ea48 <am_hal_uart_interrupt_status_get+0x34>)
    ea1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea1e:	42a3      	cmp	r3, r4
    ea20:	d10d      	bne.n	ea3e <am_hal_uart_interrupt_status_get+0x2a>
    ea22:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ea24:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea28:	331c      	adds	r3, #28
    ea2a:	031b      	lsls	r3, r3, #12
    ea2c:	b92a      	cbnz	r2, ea3a <am_hal_uart_interrupt_status_get+0x26>
    ea2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ea30:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea34:	600b      	str	r3, [r1, #0]
    ea36:	2000      	movs	r0, #0
    ea38:	4770      	bx	lr
    ea3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea3c:	e7f8      	b.n	ea30 <am_hal_uart_interrupt_status_get+0x1c>
    ea3e:	2002      	movs	r0, #2
    ea40:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea44:	4770      	bx	lr
    ea46:	bf00      	nop
    ea48:	01ea9e06 	.word	0x01ea9e06

0000ea4c <am_hal_queue_init>:
    ea4c:	b410      	push	{r4}
    ea4e:	2400      	movs	r4, #0
    ea50:	e9c0 4400 	strd	r4, r4, [r0]
    ea54:	6084      	str	r4, [r0, #8]
    ea56:	e9c0 2104 	strd	r2, r1, [r0, #16]
    ea5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea5e:	60c3      	str	r3, [r0, #12]
    ea60:	4770      	bx	lr
    ea62:	bf00      	nop

0000ea64 <am_hal_queue_item_add>:
    ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea66:	6906      	ldr	r6, [r0, #16]
    ea68:	b083      	sub	sp, #12
    ea6a:	4604      	mov	r4, r0
    ea6c:	fb06 f602 	mul.w	r6, r6, r2
    ea70:	460d      	mov	r5, r1
    ea72:	f7ff fa63 	bl	df3c <am_hal_interrupt_master_disable>
    ea76:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    ea7a:	1a53      	subs	r3, r2, r1
    ea7c:	42b3      	cmp	r3, r6
    ea7e:	9001      	str	r0, [sp, #4]
    ea80:	d31c      	bcc.n	eabc <am_hal_queue_item_add+0x58>
    ea82:	b196      	cbz	r6, eaaa <am_hal_queue_item_add+0x46>
    ea84:	6823      	ldr	r3, [r4, #0]
    ea86:	b305      	cbz	r5, eaca <am_hal_queue_item_add+0x66>
    ea88:	1e68      	subs	r0, r5, #1
    ea8a:	1987      	adds	r7, r0, r6
    ea8c:	6962      	ldr	r2, [r4, #20]
    ea8e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    ea92:	54d1      	strb	r1, [r2, r3]
    ea94:	6823      	ldr	r3, [r4, #0]
    ea96:	68e5      	ldr	r5, [r4, #12]
    ea98:	1c59      	adds	r1, r3, #1
    ea9a:	4287      	cmp	r7, r0
    ea9c:	fbb1 f3f5 	udiv	r3, r1, r5
    eaa0:	fb05 1313 	mls	r3, r5, r3, r1
    eaa4:	6023      	str	r3, [r4, #0]
    eaa6:	d1f1      	bne.n	ea8c <am_hal_queue_item_add+0x28>
    eaa8:	68a1      	ldr	r1, [r4, #8]
    eaaa:	9801      	ldr	r0, [sp, #4]
    eaac:	440e      	add	r6, r1
    eaae:	60a6      	str	r6, [r4, #8]
    eab0:	f7ff fa48 	bl	df44 <am_hal_interrupt_master_set>
    eab4:	2401      	movs	r4, #1
    eab6:	4620      	mov	r0, r4
    eab8:	b003      	add	sp, #12
    eaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eabc:	9801      	ldr	r0, [sp, #4]
    eabe:	f7ff fa41 	bl	df44 <am_hal_interrupt_master_set>
    eac2:	2400      	movs	r4, #0
    eac4:	4620      	mov	r0, r4
    eac6:	b003      	add	sp, #12
    eac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eaca:	4628      	mov	r0, r5
    eacc:	3001      	adds	r0, #1
    eace:	3301      	adds	r3, #1
    ead0:	4286      	cmp	r6, r0
    ead2:	fbb3 f5f2 	udiv	r5, r3, r2
    ead6:	fb02 3315 	mls	r3, r2, r5, r3
    eada:	d1f7      	bne.n	eacc <am_hal_queue_item_add+0x68>
    eadc:	6023      	str	r3, [r4, #0]
    eade:	e7e4      	b.n	eaaa <am_hal_queue_item_add+0x46>

0000eae0 <am_hal_queue_item_get>:
    eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eae2:	6906      	ldr	r6, [r0, #16]
    eae4:	4604      	mov	r4, r0
    eae6:	b083      	sub	sp, #12
    eae8:	fb06 f602 	mul.w	r6, r6, r2
    eaec:	460d      	mov	r5, r1
    eaee:	f7ff fa25 	bl	df3c <am_hal_interrupt_master_disable>
    eaf2:	68a2      	ldr	r2, [r4, #8]
    eaf4:	9001      	str	r0, [sp, #4]
    eaf6:	42b2      	cmp	r2, r6
    eaf8:	d31c      	bcc.n	eb34 <am_hal_queue_item_get+0x54>
    eafa:	b196      	cbz	r6, eb22 <am_hal_queue_item_get+0x42>
    eafc:	6863      	ldr	r3, [r4, #4]
    eafe:	b305      	cbz	r5, eb42 <am_hal_queue_item_get+0x62>
    eb00:	1e68      	subs	r0, r5, #1
    eb02:	1987      	adds	r7, r0, r6
    eb04:	6962      	ldr	r2, [r4, #20]
    eb06:	5cd3      	ldrb	r3, [r2, r3]
    eb08:	f800 3f01 	strb.w	r3, [r0, #1]!
    eb0c:	6863      	ldr	r3, [r4, #4]
    eb0e:	68e5      	ldr	r5, [r4, #12]
    eb10:	1c59      	adds	r1, r3, #1
    eb12:	4287      	cmp	r7, r0
    eb14:	fbb1 f3f5 	udiv	r3, r1, r5
    eb18:	fb05 1313 	mls	r3, r5, r3, r1
    eb1c:	6063      	str	r3, [r4, #4]
    eb1e:	d1f1      	bne.n	eb04 <am_hal_queue_item_get+0x24>
    eb20:	68a2      	ldr	r2, [r4, #8]
    eb22:	9801      	ldr	r0, [sp, #4]
    eb24:	1b92      	subs	r2, r2, r6
    eb26:	60a2      	str	r2, [r4, #8]
    eb28:	f7ff fa0c 	bl	df44 <am_hal_interrupt_master_set>
    eb2c:	2401      	movs	r4, #1
    eb2e:	4620      	mov	r0, r4
    eb30:	b003      	add	sp, #12
    eb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb34:	9801      	ldr	r0, [sp, #4]
    eb36:	f7ff fa05 	bl	df44 <am_hal_interrupt_master_set>
    eb3a:	2400      	movs	r4, #0
    eb3c:	4620      	mov	r0, r4
    eb3e:	b003      	add	sp, #12
    eb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb42:	68e1      	ldr	r1, [r4, #12]
    eb44:	4628      	mov	r0, r5
    eb46:	3001      	adds	r0, #1
    eb48:	3301      	adds	r3, #1
    eb4a:	42b0      	cmp	r0, r6
    eb4c:	fbb3 f5f1 	udiv	r5, r3, r1
    eb50:	fb01 3315 	mls	r3, r1, r5, r3
    eb54:	d1f7      	bne.n	eb46 <am_hal_queue_item_get+0x66>
    eb56:	6063      	str	r3, [r4, #4]
    eb58:	e7e3      	b.n	eb22 <am_hal_queue_item_get+0x42>
    eb5a:	bf00      	nop

0000eb5c <__init_array_end>:
    eb5c:	72410a0a 	.word	0x72410a0a
    eb60:	696d6574 	.word	0x696d6574
    eb64:	56532073 	.word	0x56532073
    eb68:	6f42204c 	.word	0x6f42204c
    eb6c:	6f6c746f 	.word	0x6f6c746f
    eb70:	72656461 	.word	0x72656461
    eb74:	44202d20 	.word	0x44202d20
    eb78:	47554245 	.word	0x47554245
    eb7c:	00000a0a 	.word	0x00000a0a
    eb80:	73616870 	.word	0x73616870
    eb84:	63093a65 	.word	0x63093a65
    eb88:	69666e6f 	.word	0x69666e6f
    eb8c:	62206d72 	.word	0x62206d72
    eb90:	6c746f6f 	.word	0x6c746f6f
    eb94:	6964616f 	.word	0x6964616f
    eb98:	6520676e 	.word	0x6520676e
    eb9c:	7972746e 	.word	0x7972746e
    eba0:	0000000a 	.word	0x0000000a
    eba4:	6e657309 	.word	0x6e657309
    eba8:	676e6964 	.word	0x676e6964
    ebac:	74724120 	.word	0x74724120
    ebb0:	73696d65 	.word	0x73696d65
    ebb4:	4c565320 	.word	0x4c565320
    ebb8:	72657620 	.word	0x72657620
    ebbc:	6e6f6973 	.word	0x6e6f6973
    ebc0:	63617020 	.word	0x63617020
    ebc4:	0a74656b 	.word	0x0a74656b
    ebc8:	00000000 	.word	0x00000000
    ebcc:	69617709 	.word	0x69617709
    ebd0:	676e6974 	.word	0x676e6974
    ebd4:	726f6620 	.word	0x726f6620
    ebd8:	6f6f6220 	.word	0x6f6f6220
    ebdc:	616f6c74 	.word	0x616f6c74
    ebe0:	20726564 	.word	0x20726564
    ebe4:	666e6f63 	.word	0x666e6f63
    ebe8:	616d7269 	.word	0x616d7269
    ebec:	6e6f6974 	.word	0x6e6f6974
    ebf0:	0000000a 	.word	0x0000000a
    ebf4:	206f6e09 	.word	0x206f6e09
    ebf8:	666e6f63 	.word	0x666e6f63
    ebfc:	616d7269 	.word	0x616d7269
    ec00:	6e6f6974 	.word	0x6e6f6974
    ec04:	63657220 	.word	0x63657220
    ec08:	65766965 	.word	0x65766965
    ec0c:	00000a64 	.word	0x00000a64
    ec10:	746e6509 	.word	0x746e6509
    ec14:	6e697265 	.word	0x6e697265
    ec18:	6f622067 	.word	0x6f622067
    ec1c:	6f6c746f 	.word	0x6f6c746f
    ec20:	72656461 	.word	0x72656461
    ec24:	00000a0a 	.word	0x00000a0a
    ec28:	4f525245 	.word	0x4f525245
    ec2c:	202d2052 	.word	0x202d2052
    ec30:	6f6e7572 	.word	0x6f6e7572
    ec34:	00006666 	.word	0x00006666
    ec38:	73616870 	.word	0x73616870
    ec3c:	64093a65 	.word	0x64093a65
    ec40:	63657465 	.word	0x63657465
    ec44:	61622074 	.word	0x61622074
    ec48:	72206475 	.word	0x72206475
    ec4c:	0a657461 	.word	0x0a657461
    ec50:	00000000 	.word	0x00000000
    ec54:	75616209 	.word	0x75616209
    ec58:	61722064 	.word	0x61722064
    ec5c:	6e206574 	.word	0x6e206574
    ec60:	6420746f 	.word	0x6420746f
    ec64:	63657465 	.word	0x63657465
    ec68:	2e646574 	.word	0x2e646574
    ec6c:	7209090a 	.word	0x7209090a
    ec70:	6e697369 	.word	0x6e697369
    ec74:	64652067 	.word	0x64652067
    ec78:	3a736567 	.word	0x3a736567
    ec7c:	0a642509 	.word	0x0a642509
    ec80:	69740909 	.word	0x69740909
    ec84:	2064656d 	.word	0x2064656d
    ec88:	3a74756f 	.word	0x3a74756f
    ec8c:	0a642509 	.word	0x0a642509
    ec90:	0000000a 	.word	0x0000000a
    ec94:	74656409 	.word	0x74656409
    ec98:	65746365 	.word	0x65746365
    ec9c:	61762064 	.word	0x61762064
    eca0:	2064696c 	.word	0x2064696c
    eca4:	64756162 	.word	0x64756162
    eca8:	74617220 	.word	0x74617220
    ecac:	25093a65 	.word	0x25093a65
    ecb0:	000a0a64 	.word	0x000a0a64
    ecb4:	73616870 	.word	0x73616870
    ecb8:	62093a65 	.word	0x62093a65
    ecbc:	6c746f6f 	.word	0x6c746f6f
    ecc0:	0a64616f 	.word	0x0a64616f
    ecc4:	00000000 	.word	0x00000000
    ecc8:	71657209 	.word	0x71657209
    eccc:	74736575 	.word	0x74736575
    ecd0:	20676e69 	.word	0x20676e69
    ecd4:	72746572 	.word	0x72746572
    ecd8:	6d736e61 	.word	0x6d736e61
    ecdc:	69737369 	.word	0x69737369
    ece0:	000a6e6f 	.word	0x000a6e6f
    ece4:	71657209 	.word	0x71657209
    ece8:	74736575 	.word	0x74736575
    ecec:	20676e69 	.word	0x20676e69
    ecf0:	7478656e 	.word	0x7478656e
    ecf4:	70706120 	.word	0x70706120
    ecf8:	61726620 	.word	0x61726620
    ecfc:	000a656d 	.word	0x000a656d
    ed00:	72650909 	.word	0x72650909
    ed04:	20726f72 	.word	0x20726f72
    ed08:	65636572 	.word	0x65636572
    ed0c:	6e697669 	.word	0x6e697669
    ed10:	61702067 	.word	0x61702067
    ed14:	74656b63 	.word	0x74656b63
    ed18:	64252820 	.word	0x64252820
    ed1c:	00000a29 	.word	0x00000a29
    ed20:	65720909 	.word	0x65720909
    ed24:	76696563 	.word	0x76696563
    ed28:	61206465 	.word	0x61206465
    ed2c:	7061206e 	.word	0x7061206e
    ed30:	72662070 	.word	0x72662070
    ed34:	0a656d61 	.word	0x0a656d61
    ed38:	00000000 	.word	0x00000000
    ed3c:	65720909 	.word	0x65720909
    ed40:	76696563 	.word	0x76696563
    ed44:	64206465 	.word	0x64206465
    ed48:	20656e6f 	.word	0x20656e6f
    ed4c:	6e676973 	.word	0x6e676973
    ed50:	0a216c61 	.word	0x0a216c61
    ed54:	0000000a 	.word	0x0000000a
    ed58:	746f6f62 	.word	0x746f6f62
    ed5c:	64616f6c 	.word	0x64616f6c
    ed60:	72726520 	.word	0x72726520
    ed64:	2d20726f 	.word	0x2d20726f
    ed68:	6b6e7520 	.word	0x6b6e7520
    ed6c:	6e776f6e 	.word	0x6e776f6e
    ed70:	6d6f6320 	.word	0x6d6f6320
    ed74:	646e616d 	.word	0x646e616d
    ed78:	0000000a 	.word	0x0000000a
    ed7c:	00000004 	.word	0x00000004
    ed80:	1000023c 	.word	0x1000023c
    ed84:	08000800 	.word	0x08000800
    ed88:	72660909 	.word	0x72660909
    ed8c:	5f656d61 	.word	0x5f656d61
    ed90:	72646461 	.word	0x72646461
    ed94:	20737365 	.word	0x20737365
    ed98:	7830203d 	.word	0x7830203d
    ed9c:	58383025 	.word	0x58383025
    eda0:	756e202c 	.word	0x756e202c
    eda4:	6f775f6d 	.word	0x6f775f6d
    eda8:	20736472 	.word	0x20736472
    edac:	6425203d 	.word	0x6425203d
    edb0:	0000000a 	.word	0x0000000a
    edb4:	6f727245 	.word	0x6f727245
    edb8:	66203a72 	.word	0x66203a72
    edbc:	656d6172 	.word	0x656d6172
    edc0:	63617020 	.word	0x63617020
    edc4:	2074656b 	.word	0x2074656b
    edc8:	20746f6e 	.word	0x20746f6e
    edcc:	65746e69 	.word	0x65746e69
    edd0:	20726567 	.word	0x20726567
    edd4:	746c756d 	.word	0x746c756d
    edd8:	656c7069 	.word	0x656c7069
    eddc:	20666f20 	.word	0x20666f20
    ede0:	64726f77 	.word	0x64726f77
    ede4:	34282073 	.word	0x34282073
    ede8:	74796220 	.word	0x74796220
    edec:	70207365 	.word	0x70207365
    edf0:	77207265 	.word	0x77207265
    edf4:	2964726f 	.word	0x2964726f
    edf8:	0000000a 	.word	0x0000000a
    edfc:	53414c46 	.word	0x53414c46
    ee00:	414d5f48 	.word	0x414d5f48
    ee04:	455f5353 	.word	0x455f5353
    ee08:	45534152 	.word	0x45534152
    ee0c:	32336920 	.word	0x32336920
    ee10:	75746552 	.word	0x75746552
    ee14:	6f436e72 	.word	0x6f436e72
    ee18:	3d206564 	.word	0x3d206564
    ee1c:	25783020 	.word	0x25783020
    ee20:	0d0a2e78 	.word	0x0d0a2e78
    ee24:	00000000 	.word	0x00000000
    ee28:	53414c46 	.word	0x53414c46
    ee2c:	52575f48 	.word	0x52575f48
    ee30:	20455449 	.word	0x20455449
    ee34:	6f727265 	.word	0x6f727265
    ee38:	203d2072 	.word	0x203d2072
    ee3c:	78257830 	.word	0x78257830
    ee40:	000d0a2e 	.word	0x000d0a2e
    ee44:	6d754a0a 	.word	0x6d754a0a
    ee48:	6f742070 	.word	0x6f742070
    ee4c:	70704120 	.word	0x70704120
    ee50:	20746120 	.word	0x20746120
    ee54:	30257830 	.word	0x30257830
    ee58:	0a0a5838 	.word	0x0a0a5838
    ee5c:	00000000 	.word	0x00000000

0000ee60 <am_hal_cachectrl_defaults>:
    ee60:	00000308                                ....

0000ee64 <g_AM_HAL_GPIO_DISABLE>:
    ee64:	00000003                                ....

0000ee68 <g_AM_HAL_GPIO_INPUT_PULLUP>:
    ee68:	00001023                                #...

0000ee6c <g_ui8Bit76Capabilities>:
    ee6c:	02800101 80010180 80800101 80808080     ................
    ee7c:	80808080 80808008 01800180 80808080     ................
    ee8c:	80808080 01800402 01010401 80808080     ................
    ee9c:	00000101                                ....

0000eea0 <g_ui8Inpen>:
    eea0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    eeb0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    eec0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    eed0:	00003130                                01..

0000eed4 <g_ui8NCEtable>:
    eed4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    eee4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    eef4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ef04:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ef14:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ef24:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ef34:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ef44:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ef54:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ef64:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ef74:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ef84:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ef94:	32221202 43231303                       .."2..#C

0000ef9c <g_ui8nCEpins>:
    ef9c:	02070707 00080802 01020202 01010101     ................
    efac:	01010101 01010101 01010101 01010101     ................
    efbc:	01010101 08010101 01010008 01010101     ................
    efcc:	00000101                                ....

0000efd0 <am_hal_pwrctrl_peripheral_control>:
	...
    efdc:	00000001 00000004 00000004 00000002     ................
    efec:	00000008 00000008 00000004 00000008     ................
    effc:	00000008 00000008 00000008 00000008     ................
    f00c:	00000010 00000010 00000010 00000020     ............ ...
    f01c:	00000010 00000010 00000040 00000010     ........@.......
    f02c:	00000010 00000080 00000004 00000004     ................
    f03c:	00000100 00000004 00000004 00000200     ................
    f04c:	00000020 00000020 00000400 00000004      ... ...........
    f05c:	00000004 00000800 00000040 00000040     ........@...@...
    f06c:	00001000 00000080 00000080 00002000     ............. ..
    f07c:	00000100 00000100                       ........

0000f084 <CSWTCH.20>:
    f084:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
